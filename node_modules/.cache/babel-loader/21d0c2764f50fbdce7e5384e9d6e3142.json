{"ast":null,"code":"var AWS = require('./core');\nvar AcceptorStateMachine = require('./state_machine');\nvar inherit = AWS.util.inherit;\nvar domain = AWS.util.domain;\nvar jmespath = require('jmespath');\n\n/**\r\n * @api private\r\n */\nvar hardErrorStates = {\n  success: 1,\n  error: 1,\n  complete: 1\n};\nfunction isTerminalState(machine) {\n  return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);\n}\nvar fsm = new AcceptorStateMachine();\nfsm.setupStates = function () {\n  var transition = function (_, done) {\n    var self = this;\n    self._haltHandlersOnError = false;\n    self.emit(self._asm.currentState, function (err) {\n      if (err) {\n        if (isTerminalState(self)) {\n          if (domain && self.domain instanceof domain.Domain) {\n            err.domainEmitter = self;\n            err.domain = self.domain;\n            err.domainThrown = false;\n            self.domain.emit('error', err);\n          } else {\n            throw err;\n          }\n        } else {\n          self.response.error = err;\n          done(err);\n        }\n      } else {\n        done(self.response.error);\n      }\n    });\n  };\n  this.addState('validate', 'build', 'error', transition);\n  this.addState('build', 'afterBuild', 'restart', transition);\n  this.addState('afterBuild', 'sign', 'restart', transition);\n  this.addState('sign', 'send', 'retry', transition);\n  this.addState('retry', 'afterRetry', 'afterRetry', transition);\n  this.addState('afterRetry', 'sign', 'error', transition);\n  this.addState('send', 'validateResponse', 'retry', transition);\n  this.addState('validateResponse', 'extractData', 'extractError', transition);\n  this.addState('extractError', 'extractData', 'retry', transition);\n  this.addState('extractData', 'success', 'retry', transition);\n  this.addState('restart', 'build', 'error', transition);\n  this.addState('success', 'complete', 'complete', transition);\n  this.addState('error', 'complete', 'complete', transition);\n  this.addState('complete', null, null, transition);\n};\nfsm.setupStates();\n\n/**\r\n * ## Asynchronous Requests\r\n *\r\n * All requests made through the SDK are asynchronous and use a\r\n * callback interface. Each service method that kicks off a request\r\n * returns an `AWS.Request` object that you can use to register\r\n * callbacks.\r\n *\r\n * For example, the following service method returns the request\r\n * object as \"request\", which can be used to register callbacks:\r\n *\r\n * ```javascript\r\n * // request is an AWS.Request object\r\n * var request = ec2.describeInstances();\r\n *\r\n * // register callbacks on request to retrieve response data\r\n * request.on('success', function(response) {\r\n *   console.log(response.data);\r\n * });\r\n * ```\r\n *\r\n * When a request is ready to be sent, the {send} method should\r\n * be called:\r\n *\r\n * ```javascript\r\n * request.send();\r\n * ```\r\n *\r\n * Since registered callbacks may or may not be idempotent, requests should only\r\n * be sent once. To perform the same operation multiple times, you will need to\r\n * create multiple request objects, each with its own registered callbacks.\r\n *\r\n * ## Removing Default Listeners for Events\r\n *\r\n * Request objects are built with default listeners for the various events,\r\n * depending on the service type. In some cases, you may want to remove\r\n * some built-in listeners to customize behaviour. Doing this requires\r\n * access to the built-in listener functions, which are exposed through\r\n * the {AWS.EventListeners.Core} namespace. For instance, you may\r\n * want to customize the HTTP handler used when sending a request. In this\r\n * case, you can remove the built-in listener associated with the 'send'\r\n * event, the {AWS.EventListeners.Core.SEND} listener and add your own.\r\n *\r\n * ## Multiple Callbacks and Chaining\r\n *\r\n * You can register multiple callbacks on any request object. The\r\n * callbacks can be registered for different events, or all for the\r\n * same event. In addition, you can chain callback registration, for\r\n * example:\r\n *\r\n * ```javascript\r\n * request.\r\n *   on('success', function(response) {\r\n *     console.log(\"Success!\");\r\n *   }).\r\n *   on('error', function(error, response) {\r\n *     console.log(\"Error!\");\r\n *   }).\r\n *   on('complete', function(response) {\r\n *     console.log(\"Always!\");\r\n *   }).\r\n *   send();\r\n * ```\r\n *\r\n * The above example will print either \"Success! Always!\", or \"Error! Always!\",\r\n * depending on whether the request succeeded or not.\r\n *\r\n * @!attribute httpRequest\r\n *   @readonly\r\n *   @!group HTTP Properties\r\n *   @return [AWS.HttpRequest] the raw HTTP request object\r\n *     containing request headers and body information\r\n *     sent by the service.\r\n *\r\n * @!attribute startTime\r\n *   @readonly\r\n *   @!group Operation Properties\r\n *   @return [Date] the time that the request started\r\n *\r\n * @!group Request Building Events\r\n *\r\n * @!event validate(request)\r\n *   Triggered when a request is being validated. Listeners\r\n *   should throw an error if the request should not be sent.\r\n *   @param request [Request] the request object being sent\r\n *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS\r\n *   @see AWS.EventListeners.Core.VALIDATE_REGION\r\n *   @example Ensuring that a certain parameter is set before sending a request\r\n *     var req = s3.putObject(params);\r\n *     req.on('validate', function() {\r\n *       if (!req.params.Body.match(/^Hello\\s/)) {\r\n *         throw new Error('Body must start with \"Hello \"');\r\n *       }\r\n *     });\r\n *     req.send(function(err, data) { ... });\r\n *\r\n * @!event build(request)\r\n *   Triggered when the request payload is being built. Listeners\r\n *   should fill the necessary information to send the request\r\n *   over HTTP.\r\n *   @param (see AWS.Request~validate)\r\n *   @example Add a custom HTTP header to a request\r\n *     var req = s3.putObject(params);\r\n *     req.on('build', function() {\r\n *       req.httpRequest.headers['Custom-Header'] = 'value';\r\n *     });\r\n *     req.send(function(err, data) { ... });\r\n *\r\n * @!event sign(request)\r\n *   Triggered when the request is being signed. Listeners should\r\n *   add the correct authentication headers and/or adjust the body,\r\n *   depending on the authentication mechanism being used.\r\n *   @param (see AWS.Request~validate)\r\n *\r\n * @!group Request Sending Events\r\n *\r\n * @!event send(response)\r\n *   Triggered when the request is ready to be sent. Listeners\r\n *   should call the underlying transport layer to initiate\r\n *   the sending of the request.\r\n *   @param response [Response] the response object\r\n *   @context [Request] the request object that was sent\r\n *   @see AWS.EventListeners.Core.SEND\r\n *\r\n * @!event retry(response)\r\n *   Triggered when a request failed and might need to be retried or redirected.\r\n *   If the response is retryable, the listener should set the\r\n *   `response.error.retryable` property to `true`, and optionally set\r\n *   `response.error.retryDelay` to the millisecond delay for the next attempt.\r\n *   In the case of a redirect, `response.error.redirect` should be set to\r\n *   `true` with `retryDelay` set to an optional delay on the next request.\r\n *\r\n *   If a listener decides that a request should not be retried,\r\n *   it should set both `retryable` and `redirect` to false.\r\n *\r\n *   Note that a retryable error will be retried at most\r\n *   {AWS.Config.maxRetries} times (based on the service object's config).\r\n *   Similarly, a request that is redirected will only redirect at most\r\n *   {AWS.Config.maxRedirects} times.\r\n *\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *   @example Adding a custom retry for a 404 response\r\n *     request.on('retry', function(response) {\r\n *       // this resource is not yet available, wait 10 seconds to get it again\r\n *       if (response.httpResponse.statusCode === 404 && response.error) {\r\n *         response.error.retryable = true;   // retry this error\r\n *         response.error.retryDelay = 10000; // wait 10 seconds\r\n *       }\r\n *     });\r\n *\r\n * @!group Data Parsing Events\r\n *\r\n * @!event extractError(response)\r\n *   Triggered on all non-2xx requests so that listeners can extract\r\n *   error details from the response body. Listeners to this event\r\n *   should set the `response.error` property.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event extractData(response)\r\n *   Triggered in successful requests to allow listeners to\r\n *   de-serialize the response body into `response.data`.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!group Completion Events\r\n *\r\n * @!event success(response)\r\n *   Triggered when the request completed successfully.\r\n *   `response.data` will contain the response data and\r\n *   `response.error` will be null.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event error(error, response)\r\n *   Triggered when an error occurs at any point during the\r\n *   request. `response.error` will contain details about the error\r\n *   that occurred. `response.data` will be null.\r\n *   @param error [Error] the error object containing details about\r\n *     the error that occurred.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event complete(response)\r\n *   Triggered whenever a request cycle completes. `response.error`\r\n *   should be checked, since the request may have failed.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!group HTTP Events\r\n *\r\n * @!event httpHeaders(statusCode, headers, response, statusMessage)\r\n *   Triggered when headers are sent by the remote server\r\n *   @param statusCode [Integer] the HTTP response code\r\n *   @param headers [map<String,String>] the response headers\r\n *   @param (see AWS.Request~send)\r\n *   @param statusMessage [String] A status message corresponding to the HTTP\r\n *                                 response code\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event httpData(chunk, response)\r\n *   Triggered when data is sent by the remote server\r\n *   @param chunk [Buffer] the buffer data containing the next data chunk\r\n *     from the server\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *   @see AWS.EventListeners.Core.HTTP_DATA\r\n *\r\n * @!event httpUploadProgress(progress, response)\r\n *   Triggered when the HTTP request has uploaded more data\r\n *   @param progress [map] An object containing the `loaded` and `total` bytes\r\n *     of the request.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *   @note This event will not be emitted in Node.js 0.8.x.\r\n *\r\n * @!event httpDownloadProgress(progress, response)\r\n *   Triggered when the HTTP request has downloaded more data\r\n *   @param progress [map] An object containing the `loaded` and `total` bytes\r\n *     of the request.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *   @note This event will not be emitted in Node.js 0.8.x.\r\n *\r\n * @!event httpError(error, response)\r\n *   Triggered when the HTTP request failed\r\n *   @param error [Error] the error object that was thrown\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event httpDone(response)\r\n *   Triggered when the server is finished sending data\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @see AWS.Response\r\n */\nAWS.Request = inherit({\n  /**\r\n   * Creates a request for an operation on a given service with\r\n   * a set of input parameters.\r\n   *\r\n   * @param service [AWS.Service] the service to perform the operation on\r\n   * @param operation [String] the operation to perform on the service\r\n   * @param params [Object] parameters to send to the operation.\r\n   *   See the operation's documentation for the format of the\r\n   *   parameters.\r\n   */\n  constructor: function Request(service, operation, params) {\n    var endpoint = service.endpoint;\n    var region = service.config.region;\n    var customUserAgent = service.config.customUserAgent;\n    if (service.signingRegion) {\n      region = service.signingRegion;\n    } else if (service.isGlobalEndpoint) {\n      region = 'us-east-1';\n    }\n    this.domain = domain && domain.active;\n    this.service = service;\n    this.operation = operation;\n    this.params = params || {};\n    this.httpRequest = new AWS.HttpRequest(endpoint, region);\n    this.httpRequest.appendToUserAgent(customUserAgent);\n    this.startTime = service.getSkewCorrectedDate();\n    this.response = new AWS.Response(this);\n    this._asm = new AcceptorStateMachine(fsm.states, 'validate');\n    this._haltHandlersOnError = false;\n    AWS.SequentialExecutor.call(this);\n    this.emit = this.emitEvent;\n  },\n  /**\r\n   * @!group Sending a Request\r\n   */\n\n  /**\r\n   * @overload send(callback = null)\r\n   *   Sends the request object.\r\n   *\r\n   *   @callback callback function(err, data)\r\n   *     If a callback is supplied, it is called when a response is returned\r\n   *     from the service.\r\n   *     @context [AWS.Request] the request object being sent.\r\n   *     @param err [Error] the error object returned from the request.\r\n   *       Set to `null` if the request is successful.\r\n   *     @param data [Object] the de-serialized data returned from\r\n   *       the request. Set to `null` if a request error occurs.\r\n   *   @example Sending a request with a callback\r\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\r\n   *     request.send(function(err, data) { console.log(err, data); });\r\n   *   @example Sending a request with no callback (using event handlers)\r\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\r\n   *     request.on('complete', function(response) { ... }); // register a callback\r\n   *     request.send();\r\n   */\n  send: function send(callback) {\n    if (callback) {\n      // append to user agent\n      this.httpRequest.appendToUserAgent('callback');\n      this.on('complete', function (resp) {\n        callback.call(resp, resp.error, resp.data);\n      });\n    }\n    this.runTo();\n    return this.response;\n  },\n  /**\r\n   * @!method  promise()\r\n   *   Sends the request and returns a 'thenable' promise.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @callback fulfilledCallback function(data)\r\n   *     Called if the promise is fulfilled.\r\n   *     @param data [Object] the de-serialized data returned from the request.\r\n   *   @callback rejectedCallback function(error)\r\n   *     Called if the promise is rejected.\r\n   *     @param error [Error] the error object returned from the request.\r\n   *   @return [Promise] A promise that represents the state of the request.\r\n   *   @example Sending a request using promises.\r\n   *     var request = s3.putObject({Bucket: 'bucket', Key: 'key'});\r\n   *     var result = request.promise();\r\n   *     result.then(function(data) { ... }, function(error) { ... });\r\n   */\n\n  /**\r\n   * @api private\r\n   */\n  build: function build(callback) {\n    return this.runTo('send', callback);\n  },\n  /**\r\n   * @api private\r\n   */\n  runTo: function runTo(state, done) {\n    this._asm.runTo(state, done, this);\n    return this;\n  },\n  /**\r\n   * Aborts a request, emitting the error and complete events.\r\n   *\r\n   * @!macro nobrowser\r\n   * @example Aborting a request after sending\r\n   *   var params = {\r\n   *     Bucket: 'bucket', Key: 'key',\r\n   *     Body: Buffer.alloc(1024 * 1024 * 5) // 5MB payload\r\n   *   };\r\n   *   var request = s3.putObject(params);\r\n   *   request.send(function (err, data) {\r\n   *     if (err) console.log(\"Error:\", err.code, err.message);\r\n   *     else console.log(data);\r\n   *   });\r\n   *\r\n   *   // abort request in 1 second\r\n   *   setTimeout(request.abort.bind(request), 1000);\r\n   *\r\n   *   // prints \"Error: RequestAbortedError Request aborted by user\"\r\n   * @return [AWS.Request] the same request object, for chaining.\r\n   * @since v1.4.0\r\n   */\n  abort: function abort() {\n    this.removeAllListeners('validateResponse');\n    this.removeAllListeners('extractError');\n    this.on('validateResponse', function addAbortedError(resp) {\n      resp.error = AWS.util.error(new Error('Request aborted by user'), {\n        code: 'RequestAbortedError',\n        retryable: false\n      });\n    });\n    if (this.httpRequest.stream && !this.httpRequest.stream.didCallback) {\n      // abort HTTP stream\n      this.httpRequest.stream.abort();\n      if (this.httpRequest._abortCallback) {\n        this.httpRequest._abortCallback();\n      } else {\n        this.removeAllListeners('send'); // haven't sent yet, so let's not\n      }\n    }\n\n    return this;\n  },\n  /**\r\n   * Iterates over each page of results given a pageable request, calling\r\n   * the provided callback with each page of data. After all pages have been\r\n   * retrieved, the callback is called with `null` data.\r\n   *\r\n   * @note This operation can generate multiple requests to a service.\r\n   * @example Iterating over multiple pages of objects in an S3 bucket\r\n   *   var pages = 1;\r\n   *   s3.listObjects().eachPage(function(err, data) {\r\n   *     if (err) return;\r\n   *     console.log(\"Page\", pages++);\r\n   *     console.log(data);\r\n   *   });\r\n   * @example Iterating over multiple pages with an asynchronous callback\r\n   *   s3.listObjects(params).eachPage(function(err, data, done) {\r\n   *     doSomethingAsyncAndOrExpensive(function() {\r\n   *       // The next page of results isn't fetched until done is called\r\n   *       done();\r\n   *     });\r\n   *   });\r\n   * @callback callback function(err, data, [doneCallback])\r\n   *   Called with each page of resulting data from the request. If the\r\n   *   optional `doneCallback` is provided in the function, it must be called\r\n   *   when the callback is complete.\r\n   *\r\n   *   @param err [Error] an error object, if an error occurred.\r\n   *   @param data [Object] a single page of response data. If there is no\r\n   *     more data, this object will be `null`.\r\n   *   @param doneCallback [Function] an optional done callback. If this\r\n   *     argument is defined in the function declaration, it should be called\r\n   *     when the next page is ready to be retrieved. This is useful for\r\n   *     controlling serial pagination across asynchronous operations.\r\n   *   @return [Boolean] if the callback returns `false`, pagination will\r\n   *     stop.\r\n   *\r\n   * @see AWS.Request.eachItem\r\n   * @see AWS.Response.nextPage\r\n   * @since v1.4.0\r\n   */\n  eachPage: function eachPage(callback) {\n    // Make all callbacks async-ish\n    callback = AWS.util.fn.makeAsync(callback, 3);\n    function wrappedCallback(response) {\n      callback.call(response, response.error, response.data, function (result) {\n        if (result === false) return;\n        if (response.hasNextPage()) {\n          response.nextPage().on('complete', wrappedCallback).send();\n        } else {\n          callback.call(response, null, null, AWS.util.fn.noop);\n        }\n      });\n    }\n    this.on('complete', wrappedCallback).send();\n  },\n  /**\r\n   * Enumerates over individual items of a request, paging the responses if\r\n   * necessary.\r\n   *\r\n   * @api experimental\r\n   * @since v1.4.0\r\n   */\n  eachItem: function eachItem(callback) {\n    var self = this;\n    function wrappedCallback(err, data) {\n      if (err) return callback(err, null);\n      if (data === null) return callback(null, null);\n      var config = self.service.paginationConfig(self.operation);\n      var resultKey = config.resultKey;\n      if (Array.isArray(resultKey)) resultKey = resultKey[0];\n      var items = jmespath.search(data, resultKey);\n      var continueIteration = true;\n      AWS.util.arrayEach(items, function (item) {\n        continueIteration = callback(null, item);\n        if (continueIteration === false) {\n          return AWS.util.abort;\n        }\n      });\n      return continueIteration;\n    }\n    this.eachPage(wrappedCallback);\n  },\n  /**\r\n   * @return [Boolean] whether the operation can return multiple pages of\r\n   *   response data.\r\n   * @see AWS.Response.eachPage\r\n   * @since v1.4.0\r\n   */\n  isPageable: function isPageable() {\n    return this.service.paginationConfig(this.operation) ? true : false;\n  },\n  /**\r\n   * Sends the request and converts the request object into a readable stream\r\n   * that can be read from or piped into a writable stream.\r\n   *\r\n   * @note The data read from a readable stream contains only\r\n   *   the raw HTTP body contents.\r\n   * @example Manually reading from a stream\r\n   *   request.createReadStream().on('data', function(data) {\r\n   *     console.log(\"Got data:\", data.toString());\r\n   *   });\r\n   * @example Piping a request body into a file\r\n   *   var out = fs.createWriteStream('/path/to/outfile.jpg');\r\n   *   s3.service.getObject(params).createReadStream().pipe(out);\r\n   * @return [Stream] the readable stream object that can be piped\r\n   *   or read from (by registering 'data' event listeners).\r\n   * @!macro nobrowser\r\n   */\n  createReadStream: function createReadStream() {\n    var streams = AWS.util.stream;\n    var req = this;\n    var stream = null;\n    if (AWS.HttpClient.streamsApiVersion === 2) {\n      stream = new streams.PassThrough();\n      process.nextTick(function () {\n        req.send();\n      });\n    } else {\n      stream = new streams.Stream();\n      stream.readable = true;\n      stream.sent = false;\n      stream.on('newListener', function (event) {\n        if (!stream.sent && event === 'data') {\n          stream.sent = true;\n          process.nextTick(function () {\n            req.send();\n          });\n        }\n      });\n    }\n    this.on('error', function (err) {\n      stream.emit('error', err);\n    });\n    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {\n      if (statusCode < 300) {\n        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);\n        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);\n        req.on('httpError', function streamHttpError(error) {\n          resp.error = error;\n          resp.error.retryable = false;\n        });\n        var shouldCheckContentLength = false;\n        var expectedLen;\n        if (req.httpRequest.method !== 'HEAD') {\n          expectedLen = parseInt(headers['content-length'], 10);\n        }\n        if (expectedLen !== undefined && !isNaN(expectedLen) && expectedLen >= 0) {\n          shouldCheckContentLength = true;\n          var receivedLen = 0;\n        }\n        var checkContentLengthAndEmit = function checkContentLengthAndEmit() {\n          if (shouldCheckContentLength && receivedLen !== expectedLen) {\n            stream.emit('error', AWS.util.error(new Error('Stream content length mismatch. Received ' + receivedLen + ' of ' + expectedLen + ' bytes.'), {\n              code: 'StreamContentLengthMismatch'\n            }));\n          } else if (AWS.HttpClient.streamsApiVersion === 2) {\n            stream.end();\n          } else {\n            stream.emit('end');\n          }\n        };\n        var httpStream = resp.httpResponse.createUnbufferedStream();\n        if (AWS.HttpClient.streamsApiVersion === 2) {\n          if (shouldCheckContentLength) {\n            var lengthAccumulator = new streams.PassThrough();\n            lengthAccumulator._write = function (chunk) {\n              if (chunk && chunk.length) {\n                receivedLen += chunk.length;\n              }\n              return streams.PassThrough.prototype._write.apply(this, arguments);\n            };\n            lengthAccumulator.on('end', checkContentLengthAndEmit);\n            stream.on('error', function (err) {\n              shouldCheckContentLength = false;\n              httpStream.unpipe(lengthAccumulator);\n              lengthAccumulator.emit('end');\n              lengthAccumulator.end();\n            });\n            httpStream.pipe(lengthAccumulator).pipe(stream, {\n              end: false\n            });\n          } else {\n            httpStream.pipe(stream);\n          }\n        } else {\n          if (shouldCheckContentLength) {\n            httpStream.on('data', function (arg) {\n              if (arg && arg.length) {\n                receivedLen += arg.length;\n              }\n            });\n          }\n          httpStream.on('data', function (arg) {\n            stream.emit('data', arg);\n          });\n          httpStream.on('end', checkContentLengthAndEmit);\n        }\n        httpStream.on('error', function (err) {\n          shouldCheckContentLength = false;\n          stream.emit('error', err);\n        });\n      }\n    });\n    return stream;\n  },\n  /**\r\n   * @param [Array,Response] args This should be the response object,\r\n   *   or an array of args to send to the event.\r\n   * @api private\r\n   */\n  emitEvent: function emit(eventName, args, done) {\n    if (typeof args === 'function') {\n      done = args;\n      args = null;\n    }\n    if (!done) done = function () {};\n    if (!args) args = this.eventParameters(eventName, this.response);\n    var origEmit = AWS.SequentialExecutor.prototype.emit;\n    origEmit.call(this, eventName, args, function (err) {\n      if (err) this.response.error = err;\n      done.call(this, err);\n    });\n  },\n  /**\r\n   * @api private\r\n   */\n  eventParameters: function eventParameters(eventName) {\n    switch (eventName) {\n      case 'restart':\n      case 'validate':\n      case 'sign':\n      case 'build':\n      case 'afterValidate':\n      case 'afterBuild':\n        return [this];\n      case 'error':\n        return [this.response.error, this.response];\n      default:\n        return [this.response];\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  presign: function presign(expires, callback) {\n    if (!callback && typeof expires === 'function') {\n      callback = expires;\n      expires = null;\n    }\n    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);\n  },\n  /**\r\n   * @api private\r\n   */\n  isPresigned: function isPresigned() {\n    return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, 'presigned-expires');\n  },\n  /**\r\n   * @api private\r\n   */\n  toUnauthenticated: function toUnauthenticated() {\n    this._unAuthenticated = true;\n    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);\n    this.removeListener('sign', AWS.EventListeners.Core.SIGN);\n    return this;\n  },\n  /**\r\n   * @api private\r\n   */\n  toGet: function toGet() {\n    if (this.service.api.protocol === 'query' || this.service.api.protocol === 'ec2') {\n      this.removeListener('build', this.buildAsGet);\n      this.addListener('build', this.buildAsGet);\n    }\n    return this;\n  },\n  /**\r\n   * @api private\r\n   */\n  buildAsGet: function buildAsGet(request) {\n    request.httpRequest.method = 'GET';\n    request.httpRequest.path = request.service.endpoint.path + '?' + request.httpRequest.body;\n    request.httpRequest.body = '';\n\n    // don't need these headers on a GET request\n    delete request.httpRequest.headers['Content-Length'];\n    delete request.httpRequest.headers['Content-Type'];\n  },\n  /**\r\n   * @api private\r\n   */\n  haltHandlersOnError: function haltHandlersOnError() {\n    this._haltHandlersOnError = true;\n  }\n});\n\n/**\r\n * @api private\r\n */\nAWS.Request.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.promise = function promise() {\n    var self = this;\n    // append to user agent\n    this.httpRequest.appendToUserAgent('promise');\n    return new PromiseDependency(function (resolve, reject) {\n      self.on('complete', function (resp) {\n        if (resp.error) {\n          reject(resp.error);\n        } else {\n          // define $response property so that it is not enumerable\n          // this prevents circular reference errors when stringifying the JSON object\n          resolve(Object.defineProperty(resp.data || {}, '$response', {\n            value: resp\n          }));\n        }\n      });\n      self.runTo();\n    });\n  };\n};\n\n/**\r\n * @api private\r\n */\nAWS.Request.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.promise;\n};\nAWS.util.addPromises(AWS.Request);\nAWS.util.mixin(AWS.Request, AWS.SequentialExecutor);","map":{"version":3,"names":["AWS","require","AcceptorStateMachine","inherit","util","domain","jmespath","hardErrorStates","success","error","complete","isTerminalState","machine","Object","prototype","hasOwnProperty","call","_asm","currentState","fsm","setupStates","transition","_","done","self","_haltHandlersOnError","emit","err","Domain","domainEmitter","domainThrown","response","addState","Request","constructor","service","operation","params","endpoint","region","config","customUserAgent","signingRegion","isGlobalEndpoint","active","httpRequest","HttpRequest","appendToUserAgent","startTime","getSkewCorrectedDate","Response","states","SequentialExecutor","emitEvent","send","callback","on","resp","data","runTo","build","state","abort","removeAllListeners","addAbortedError","Error","code","retryable","stream","didCallback","_abortCallback","eachPage","fn","makeAsync","wrappedCallback","result","hasNextPage","nextPage","noop","eachItem","paginationConfig","resultKey","Array","isArray","items","search","continueIteration","arrayEach","item","isPageable","createReadStream","streams","req","HttpClient","streamsApiVersion","PassThrough","process","nextTick","Stream","readable","sent","event","streamHeaders","statusCode","headers","removeListener","EventListeners","Core","HTTP_DATA","HTTP_ERROR","streamHttpError","shouldCheckContentLength","expectedLen","method","parseInt","undefined","isNaN","receivedLen","checkContentLengthAndEmit","end","httpStream","httpResponse","createUnbufferedStream","lengthAccumulator","_write","chunk","length","apply","arguments","unpipe","pipe","arg","eventName","args","eventParameters","origEmit","presign","expires","Signers","Presign","sign","toGet","isPresigned","toUnauthenticated","_unAuthenticated","VALIDATE_CREDENTIALS","SIGN","api","protocol","buildAsGet","addListener","request","path","body","haltHandlersOnError","addPromisesToClass","PromiseDependency","promise","resolve","reject","defineProperty","value","deletePromisesFromClass","addPromises","mixin"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/request.js"],"sourcesContent":["var AWS = require('./core');\r\nvar AcceptorStateMachine = require('./state_machine');\r\nvar inherit = AWS.util.inherit;\r\nvar domain = AWS.util.domain;\r\nvar jmespath = require('jmespath');\r\n\r\n/**\r\n * @api private\r\n */\r\nvar hardErrorStates = {success: 1, error: 1, complete: 1};\r\n\r\nfunction isTerminalState(machine) {\r\n  return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);\r\n}\r\n\r\nvar fsm = new AcceptorStateMachine();\r\nfsm.setupStates = function() {\r\n  var transition = function(_, done) {\r\n    var self = this;\r\n    self._haltHandlersOnError = false;\r\n\r\n    self.emit(self._asm.currentState, function(err) {\r\n      if (err) {\r\n        if (isTerminalState(self)) {\r\n          if (domain && self.domain instanceof domain.Domain) {\r\n            err.domainEmitter = self;\r\n            err.domain = self.domain;\r\n            err.domainThrown = false;\r\n            self.domain.emit('error', err);\r\n          } else {\r\n            throw err;\r\n          }\r\n        } else {\r\n          self.response.error = err;\r\n          done(err);\r\n        }\r\n      } else {\r\n        done(self.response.error);\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  this.addState('validate', 'build', 'error', transition);\r\n  this.addState('build', 'afterBuild', 'restart', transition);\r\n  this.addState('afterBuild', 'sign', 'restart', transition);\r\n  this.addState('sign', 'send', 'retry', transition);\r\n  this.addState('retry', 'afterRetry', 'afterRetry', transition);\r\n  this.addState('afterRetry', 'sign', 'error', transition);\r\n  this.addState('send', 'validateResponse', 'retry', transition);\r\n  this.addState('validateResponse', 'extractData', 'extractError', transition);\r\n  this.addState('extractError', 'extractData', 'retry', transition);\r\n  this.addState('extractData', 'success', 'retry', transition);\r\n  this.addState('restart', 'build', 'error', transition);\r\n  this.addState('success', 'complete', 'complete', transition);\r\n  this.addState('error', 'complete', 'complete', transition);\r\n  this.addState('complete', null, null, transition);\r\n};\r\nfsm.setupStates();\r\n\r\n/**\r\n * ## Asynchronous Requests\r\n *\r\n * All requests made through the SDK are asynchronous and use a\r\n * callback interface. Each service method that kicks off a request\r\n * returns an `AWS.Request` object that you can use to register\r\n * callbacks.\r\n *\r\n * For example, the following service method returns the request\r\n * object as \"request\", which can be used to register callbacks:\r\n *\r\n * ```javascript\r\n * // request is an AWS.Request object\r\n * var request = ec2.describeInstances();\r\n *\r\n * // register callbacks on request to retrieve response data\r\n * request.on('success', function(response) {\r\n *   console.log(response.data);\r\n * });\r\n * ```\r\n *\r\n * When a request is ready to be sent, the {send} method should\r\n * be called:\r\n *\r\n * ```javascript\r\n * request.send();\r\n * ```\r\n *\r\n * Since registered callbacks may or may not be idempotent, requests should only\r\n * be sent once. To perform the same operation multiple times, you will need to\r\n * create multiple request objects, each with its own registered callbacks.\r\n *\r\n * ## Removing Default Listeners for Events\r\n *\r\n * Request objects are built with default listeners for the various events,\r\n * depending on the service type. In some cases, you may want to remove\r\n * some built-in listeners to customize behaviour. Doing this requires\r\n * access to the built-in listener functions, which are exposed through\r\n * the {AWS.EventListeners.Core} namespace. For instance, you may\r\n * want to customize the HTTP handler used when sending a request. In this\r\n * case, you can remove the built-in listener associated with the 'send'\r\n * event, the {AWS.EventListeners.Core.SEND} listener and add your own.\r\n *\r\n * ## Multiple Callbacks and Chaining\r\n *\r\n * You can register multiple callbacks on any request object. The\r\n * callbacks can be registered for different events, or all for the\r\n * same event. In addition, you can chain callback registration, for\r\n * example:\r\n *\r\n * ```javascript\r\n * request.\r\n *   on('success', function(response) {\r\n *     console.log(\"Success!\");\r\n *   }).\r\n *   on('error', function(error, response) {\r\n *     console.log(\"Error!\");\r\n *   }).\r\n *   on('complete', function(response) {\r\n *     console.log(\"Always!\");\r\n *   }).\r\n *   send();\r\n * ```\r\n *\r\n * The above example will print either \"Success! Always!\", or \"Error! Always!\",\r\n * depending on whether the request succeeded or not.\r\n *\r\n * @!attribute httpRequest\r\n *   @readonly\r\n *   @!group HTTP Properties\r\n *   @return [AWS.HttpRequest] the raw HTTP request object\r\n *     containing request headers and body information\r\n *     sent by the service.\r\n *\r\n * @!attribute startTime\r\n *   @readonly\r\n *   @!group Operation Properties\r\n *   @return [Date] the time that the request started\r\n *\r\n * @!group Request Building Events\r\n *\r\n * @!event validate(request)\r\n *   Triggered when a request is being validated. Listeners\r\n *   should throw an error if the request should not be sent.\r\n *   @param request [Request] the request object being sent\r\n *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS\r\n *   @see AWS.EventListeners.Core.VALIDATE_REGION\r\n *   @example Ensuring that a certain parameter is set before sending a request\r\n *     var req = s3.putObject(params);\r\n *     req.on('validate', function() {\r\n *       if (!req.params.Body.match(/^Hello\\s/)) {\r\n *         throw new Error('Body must start with \"Hello \"');\r\n *       }\r\n *     });\r\n *     req.send(function(err, data) { ... });\r\n *\r\n * @!event build(request)\r\n *   Triggered when the request payload is being built. Listeners\r\n *   should fill the necessary information to send the request\r\n *   over HTTP.\r\n *   @param (see AWS.Request~validate)\r\n *   @example Add a custom HTTP header to a request\r\n *     var req = s3.putObject(params);\r\n *     req.on('build', function() {\r\n *       req.httpRequest.headers['Custom-Header'] = 'value';\r\n *     });\r\n *     req.send(function(err, data) { ... });\r\n *\r\n * @!event sign(request)\r\n *   Triggered when the request is being signed. Listeners should\r\n *   add the correct authentication headers and/or adjust the body,\r\n *   depending on the authentication mechanism being used.\r\n *   @param (see AWS.Request~validate)\r\n *\r\n * @!group Request Sending Events\r\n *\r\n * @!event send(response)\r\n *   Triggered when the request is ready to be sent. Listeners\r\n *   should call the underlying transport layer to initiate\r\n *   the sending of the request.\r\n *   @param response [Response] the response object\r\n *   @context [Request] the request object that was sent\r\n *   @see AWS.EventListeners.Core.SEND\r\n *\r\n * @!event retry(response)\r\n *   Triggered when a request failed and might need to be retried or redirected.\r\n *   If the response is retryable, the listener should set the\r\n *   `response.error.retryable` property to `true`, and optionally set\r\n *   `response.error.retryDelay` to the millisecond delay for the next attempt.\r\n *   In the case of a redirect, `response.error.redirect` should be set to\r\n *   `true` with `retryDelay` set to an optional delay on the next request.\r\n *\r\n *   If a listener decides that a request should not be retried,\r\n *   it should set both `retryable` and `redirect` to false.\r\n *\r\n *   Note that a retryable error will be retried at most\r\n *   {AWS.Config.maxRetries} times (based on the service object's config).\r\n *   Similarly, a request that is redirected will only redirect at most\r\n *   {AWS.Config.maxRedirects} times.\r\n *\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *   @example Adding a custom retry for a 404 response\r\n *     request.on('retry', function(response) {\r\n *       // this resource is not yet available, wait 10 seconds to get it again\r\n *       if (response.httpResponse.statusCode === 404 && response.error) {\r\n *         response.error.retryable = true;   // retry this error\r\n *         response.error.retryDelay = 10000; // wait 10 seconds\r\n *       }\r\n *     });\r\n *\r\n * @!group Data Parsing Events\r\n *\r\n * @!event extractError(response)\r\n *   Triggered on all non-2xx requests so that listeners can extract\r\n *   error details from the response body. Listeners to this event\r\n *   should set the `response.error` property.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event extractData(response)\r\n *   Triggered in successful requests to allow listeners to\r\n *   de-serialize the response body into `response.data`.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!group Completion Events\r\n *\r\n * @!event success(response)\r\n *   Triggered when the request completed successfully.\r\n *   `response.data` will contain the response data and\r\n *   `response.error` will be null.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event error(error, response)\r\n *   Triggered when an error occurs at any point during the\r\n *   request. `response.error` will contain details about the error\r\n *   that occurred. `response.data` will be null.\r\n *   @param error [Error] the error object containing details about\r\n *     the error that occurred.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event complete(response)\r\n *   Triggered whenever a request cycle completes. `response.error`\r\n *   should be checked, since the request may have failed.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!group HTTP Events\r\n *\r\n * @!event httpHeaders(statusCode, headers, response, statusMessage)\r\n *   Triggered when headers are sent by the remote server\r\n *   @param statusCode [Integer] the HTTP response code\r\n *   @param headers [map<String,String>] the response headers\r\n *   @param (see AWS.Request~send)\r\n *   @param statusMessage [String] A status message corresponding to the HTTP\r\n *                                 response code\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event httpData(chunk, response)\r\n *   Triggered when data is sent by the remote server\r\n *   @param chunk [Buffer] the buffer data containing the next data chunk\r\n *     from the server\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *   @see AWS.EventListeners.Core.HTTP_DATA\r\n *\r\n * @!event httpUploadProgress(progress, response)\r\n *   Triggered when the HTTP request has uploaded more data\r\n *   @param progress [map] An object containing the `loaded` and `total` bytes\r\n *     of the request.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *   @note This event will not be emitted in Node.js 0.8.x.\r\n *\r\n * @!event httpDownloadProgress(progress, response)\r\n *   Triggered when the HTTP request has downloaded more data\r\n *   @param progress [map] An object containing the `loaded` and `total` bytes\r\n *     of the request.\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *   @note This event will not be emitted in Node.js 0.8.x.\r\n *\r\n * @!event httpError(error, response)\r\n *   Triggered when the HTTP request failed\r\n *   @param error [Error] the error object that was thrown\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @!event httpDone(response)\r\n *   Triggered when the server is finished sending data\r\n *   @param (see AWS.Request~send)\r\n *   @context (see AWS.Request~send)\r\n *\r\n * @see AWS.Response\r\n */\r\nAWS.Request = inherit({\r\n\r\n  /**\r\n   * Creates a request for an operation on a given service with\r\n   * a set of input parameters.\r\n   *\r\n   * @param service [AWS.Service] the service to perform the operation on\r\n   * @param operation [String] the operation to perform on the service\r\n   * @param params [Object] parameters to send to the operation.\r\n   *   See the operation's documentation for the format of the\r\n   *   parameters.\r\n   */\r\n  constructor: function Request(service, operation, params) {\r\n    var endpoint = service.endpoint;\r\n    var region = service.config.region;\r\n    var customUserAgent = service.config.customUserAgent;\r\n\r\n    if (service.signingRegion) {\r\n      region = service.signingRegion;\r\n    } else if (service.isGlobalEndpoint) {\r\n      region = 'us-east-1';\r\n    }\r\n\r\n    this.domain = domain && domain.active;\r\n    this.service = service;\r\n    this.operation = operation;\r\n    this.params = params || {};\r\n    this.httpRequest = new AWS.HttpRequest(endpoint, region);\r\n    this.httpRequest.appendToUserAgent(customUserAgent);\r\n    this.startTime = service.getSkewCorrectedDate();\r\n\r\n    this.response = new AWS.Response(this);\r\n    this._asm = new AcceptorStateMachine(fsm.states, 'validate');\r\n    this._haltHandlersOnError = false;\r\n\r\n    AWS.SequentialExecutor.call(this);\r\n    this.emit = this.emitEvent;\r\n  },\r\n\r\n  /**\r\n   * @!group Sending a Request\r\n   */\r\n\r\n  /**\r\n   * @overload send(callback = null)\r\n   *   Sends the request object.\r\n   *\r\n   *   @callback callback function(err, data)\r\n   *     If a callback is supplied, it is called when a response is returned\r\n   *     from the service.\r\n   *     @context [AWS.Request] the request object being sent.\r\n   *     @param err [Error] the error object returned from the request.\r\n   *       Set to `null` if the request is successful.\r\n   *     @param data [Object] the de-serialized data returned from\r\n   *       the request. Set to `null` if a request error occurs.\r\n   *   @example Sending a request with a callback\r\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\r\n   *     request.send(function(err, data) { console.log(err, data); });\r\n   *   @example Sending a request with no callback (using event handlers)\r\n   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});\r\n   *     request.on('complete', function(response) { ... }); // register a callback\r\n   *     request.send();\r\n   */\r\n  send: function send(callback) {\r\n    if (callback) {\r\n      // append to user agent\r\n      this.httpRequest.appendToUserAgent('callback');\r\n      this.on('complete', function (resp) {\r\n        callback.call(resp, resp.error, resp.data);\r\n      });\r\n    }\r\n    this.runTo();\r\n\r\n    return this.response;\r\n  },\r\n\r\n  /**\r\n   * @!method  promise()\r\n   *   Sends the request and returns a 'thenable' promise.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @callback fulfilledCallback function(data)\r\n   *     Called if the promise is fulfilled.\r\n   *     @param data [Object] the de-serialized data returned from the request.\r\n   *   @callback rejectedCallback function(error)\r\n   *     Called if the promise is rejected.\r\n   *     @param error [Error] the error object returned from the request.\r\n   *   @return [Promise] A promise that represents the state of the request.\r\n   *   @example Sending a request using promises.\r\n   *     var request = s3.putObject({Bucket: 'bucket', Key: 'key'});\r\n   *     var result = request.promise();\r\n   *     result.then(function(data) { ... }, function(error) { ... });\r\n   */\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  build: function build(callback) {\r\n    return this.runTo('send', callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  runTo: function runTo(state, done) {\r\n    this._asm.runTo(state, done, this);\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Aborts a request, emitting the error and complete events.\r\n   *\r\n   * @!macro nobrowser\r\n   * @example Aborting a request after sending\r\n   *   var params = {\r\n   *     Bucket: 'bucket', Key: 'key',\r\n   *     Body: Buffer.alloc(1024 * 1024 * 5) // 5MB payload\r\n   *   };\r\n   *   var request = s3.putObject(params);\r\n   *   request.send(function (err, data) {\r\n   *     if (err) console.log(\"Error:\", err.code, err.message);\r\n   *     else console.log(data);\r\n   *   });\r\n   *\r\n   *   // abort request in 1 second\r\n   *   setTimeout(request.abort.bind(request), 1000);\r\n   *\r\n   *   // prints \"Error: RequestAbortedError Request aborted by user\"\r\n   * @return [AWS.Request] the same request object, for chaining.\r\n   * @since v1.4.0\r\n   */\r\n  abort: function abort() {\r\n    this.removeAllListeners('validateResponse');\r\n    this.removeAllListeners('extractError');\r\n    this.on('validateResponse', function addAbortedError(resp) {\r\n      resp.error = AWS.util.error(new Error('Request aborted by user'), {\r\n         code: 'RequestAbortedError', retryable: false\r\n      });\r\n    });\r\n\r\n    if (this.httpRequest.stream && !this.httpRequest.stream.didCallback) { // abort HTTP stream\r\n      this.httpRequest.stream.abort();\r\n      if (this.httpRequest._abortCallback) {\r\n         this.httpRequest._abortCallback();\r\n      } else {\r\n        this.removeAllListeners('send'); // haven't sent yet, so let's not\r\n      }\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Iterates over each page of results given a pageable request, calling\r\n   * the provided callback with each page of data. After all pages have been\r\n   * retrieved, the callback is called with `null` data.\r\n   *\r\n   * @note This operation can generate multiple requests to a service.\r\n   * @example Iterating over multiple pages of objects in an S3 bucket\r\n   *   var pages = 1;\r\n   *   s3.listObjects().eachPage(function(err, data) {\r\n   *     if (err) return;\r\n   *     console.log(\"Page\", pages++);\r\n   *     console.log(data);\r\n   *   });\r\n   * @example Iterating over multiple pages with an asynchronous callback\r\n   *   s3.listObjects(params).eachPage(function(err, data, done) {\r\n   *     doSomethingAsyncAndOrExpensive(function() {\r\n   *       // The next page of results isn't fetched until done is called\r\n   *       done();\r\n   *     });\r\n   *   });\r\n   * @callback callback function(err, data, [doneCallback])\r\n   *   Called with each page of resulting data from the request. If the\r\n   *   optional `doneCallback` is provided in the function, it must be called\r\n   *   when the callback is complete.\r\n   *\r\n   *   @param err [Error] an error object, if an error occurred.\r\n   *   @param data [Object] a single page of response data. If there is no\r\n   *     more data, this object will be `null`.\r\n   *   @param doneCallback [Function] an optional done callback. If this\r\n   *     argument is defined in the function declaration, it should be called\r\n   *     when the next page is ready to be retrieved. This is useful for\r\n   *     controlling serial pagination across asynchronous operations.\r\n   *   @return [Boolean] if the callback returns `false`, pagination will\r\n   *     stop.\r\n   *\r\n   * @see AWS.Request.eachItem\r\n   * @see AWS.Response.nextPage\r\n   * @since v1.4.0\r\n   */\r\n  eachPage: function eachPage(callback) {\r\n    // Make all callbacks async-ish\r\n    callback = AWS.util.fn.makeAsync(callback, 3);\r\n\r\n    function wrappedCallback(response) {\r\n      callback.call(response, response.error, response.data, function (result) {\r\n        if (result === false) return;\r\n\r\n        if (response.hasNextPage()) {\r\n          response.nextPage().on('complete', wrappedCallback).send();\r\n        } else {\r\n          callback.call(response, null, null, AWS.util.fn.noop);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.on('complete', wrappedCallback).send();\r\n  },\r\n\r\n  /**\r\n   * Enumerates over individual items of a request, paging the responses if\r\n   * necessary.\r\n   *\r\n   * @api experimental\r\n   * @since v1.4.0\r\n   */\r\n  eachItem: function eachItem(callback) {\r\n    var self = this;\r\n    function wrappedCallback(err, data) {\r\n      if (err) return callback(err, null);\r\n      if (data === null) return callback(null, null);\r\n\r\n      var config = self.service.paginationConfig(self.operation);\r\n      var resultKey = config.resultKey;\r\n      if (Array.isArray(resultKey)) resultKey = resultKey[0];\r\n      var items = jmespath.search(data, resultKey);\r\n      var continueIteration = true;\r\n      AWS.util.arrayEach(items, function(item) {\r\n        continueIteration = callback(null, item);\r\n        if (continueIteration === false) {\r\n          return AWS.util.abort;\r\n        }\r\n      });\r\n      return continueIteration;\r\n    }\r\n\r\n    this.eachPage(wrappedCallback);\r\n  },\r\n\r\n  /**\r\n   * @return [Boolean] whether the operation can return multiple pages of\r\n   *   response data.\r\n   * @see AWS.Response.eachPage\r\n   * @since v1.4.0\r\n   */\r\n  isPageable: function isPageable() {\r\n    return this.service.paginationConfig(this.operation) ? true : false;\r\n  },\r\n\r\n  /**\r\n   * Sends the request and converts the request object into a readable stream\r\n   * that can be read from or piped into a writable stream.\r\n   *\r\n   * @note The data read from a readable stream contains only\r\n   *   the raw HTTP body contents.\r\n   * @example Manually reading from a stream\r\n   *   request.createReadStream().on('data', function(data) {\r\n   *     console.log(\"Got data:\", data.toString());\r\n   *   });\r\n   * @example Piping a request body into a file\r\n   *   var out = fs.createWriteStream('/path/to/outfile.jpg');\r\n   *   s3.service.getObject(params).createReadStream().pipe(out);\r\n   * @return [Stream] the readable stream object that can be piped\r\n   *   or read from (by registering 'data' event listeners).\r\n   * @!macro nobrowser\r\n   */\r\n  createReadStream: function createReadStream() {\r\n    var streams = AWS.util.stream;\r\n    var req = this;\r\n    var stream = null;\r\n\r\n    if (AWS.HttpClient.streamsApiVersion === 2) {\r\n      stream = new streams.PassThrough();\r\n      process.nextTick(function() { req.send(); });\r\n    } else {\r\n      stream = new streams.Stream();\r\n      stream.readable = true;\r\n\r\n      stream.sent = false;\r\n      stream.on('newListener', function(event) {\r\n        if (!stream.sent && event === 'data') {\r\n          stream.sent = true;\r\n          process.nextTick(function() { req.send(); });\r\n        }\r\n      });\r\n    }\r\n\r\n    this.on('error', function(err) {\r\n      stream.emit('error', err);\r\n    });\r\n\r\n    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {\r\n      if (statusCode < 300) {\r\n        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);\r\n        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);\r\n        req.on('httpError', function streamHttpError(error) {\r\n          resp.error = error;\r\n          resp.error.retryable = false;\r\n        });\r\n\r\n        var shouldCheckContentLength = false;\r\n        var expectedLen;\r\n        if (req.httpRequest.method !== 'HEAD') {\r\n          expectedLen = parseInt(headers['content-length'], 10);\r\n        }\r\n        if (expectedLen !== undefined && !isNaN(expectedLen) && expectedLen >= 0) {\r\n          shouldCheckContentLength = true;\r\n          var receivedLen = 0;\r\n        }\r\n\r\n        var checkContentLengthAndEmit = function checkContentLengthAndEmit() {\r\n          if (shouldCheckContentLength && receivedLen !== expectedLen) {\r\n            stream.emit('error', AWS.util.error(\r\n              new Error('Stream content length mismatch. Received ' +\r\n                receivedLen + ' of ' + expectedLen + ' bytes.'),\r\n              { code: 'StreamContentLengthMismatch' }\r\n            ));\r\n          } else if (AWS.HttpClient.streamsApiVersion === 2) {\r\n            stream.end();\r\n          } else {\r\n            stream.emit('end');\r\n          }\r\n        };\r\n\r\n        var httpStream = resp.httpResponse.createUnbufferedStream();\r\n\r\n        if (AWS.HttpClient.streamsApiVersion === 2) {\r\n          if (shouldCheckContentLength) {\r\n            var lengthAccumulator = new streams.PassThrough();\r\n            lengthAccumulator._write = function(chunk) {\r\n              if (chunk && chunk.length) {\r\n                receivedLen += chunk.length;\r\n              }\r\n              return streams.PassThrough.prototype._write.apply(this, arguments);\r\n            };\r\n\r\n            lengthAccumulator.on('end', checkContentLengthAndEmit);\r\n            stream.on('error', function(err) {\r\n              shouldCheckContentLength = false;\r\n              httpStream.unpipe(lengthAccumulator);\r\n              lengthAccumulator.emit('end');\r\n              lengthAccumulator.end();\r\n            });\r\n            httpStream.pipe(lengthAccumulator).pipe(stream, { end: false });\r\n          } else {\r\n            httpStream.pipe(stream);\r\n          }\r\n        } else {\r\n\r\n          if (shouldCheckContentLength) {\r\n            httpStream.on('data', function(arg) {\r\n              if (arg && arg.length) {\r\n                receivedLen += arg.length;\r\n              }\r\n            });\r\n          }\r\n\r\n          httpStream.on('data', function(arg) {\r\n            stream.emit('data', arg);\r\n          });\r\n          httpStream.on('end', checkContentLengthAndEmit);\r\n        }\r\n\r\n        httpStream.on('error', function(err) {\r\n          shouldCheckContentLength = false;\r\n          stream.emit('error', err);\r\n        });\r\n      }\r\n    });\r\n\r\n    return stream;\r\n  },\r\n\r\n  /**\r\n   * @param [Array,Response] args This should be the response object,\r\n   *   or an array of args to send to the event.\r\n   * @api private\r\n   */\r\n  emitEvent: function emit(eventName, args, done) {\r\n    if (typeof args === 'function') { done = args; args = null; }\r\n    if (!done) done = function() { };\r\n    if (!args) args = this.eventParameters(eventName, this.response);\r\n\r\n    var origEmit = AWS.SequentialExecutor.prototype.emit;\r\n    origEmit.call(this, eventName, args, function (err) {\r\n      if (err) this.response.error = err;\r\n      done.call(this, err);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  eventParameters: function eventParameters(eventName) {\r\n    switch (eventName) {\r\n      case 'restart':\r\n      case 'validate':\r\n      case 'sign':\r\n      case 'build':\r\n      case 'afterValidate':\r\n      case 'afterBuild':\r\n        return [this];\r\n      case 'error':\r\n        return [this.response.error, this.response];\r\n      default:\r\n        return [this.response];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  presign: function presign(expires, callback) {\r\n    if (!callback && typeof expires === 'function') {\r\n      callback = expires;\r\n      expires = null;\r\n    }\r\n    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  isPresigned: function isPresigned() {\r\n    return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, 'presigned-expires');\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  toUnauthenticated: function toUnauthenticated() {\r\n    this._unAuthenticated = true;\r\n    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);\r\n    this.removeListener('sign', AWS.EventListeners.Core.SIGN);\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  toGet: function toGet() {\r\n    if (this.service.api.protocol === 'query' ||\r\n        this.service.api.protocol === 'ec2') {\r\n      this.removeListener('build', this.buildAsGet);\r\n      this.addListener('build', this.buildAsGet);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  buildAsGet: function buildAsGet(request) {\r\n    request.httpRequest.method = 'GET';\r\n    request.httpRequest.path = request.service.endpoint.path +\r\n                               '?' + request.httpRequest.body;\r\n    request.httpRequest.body = '';\r\n\r\n    // don't need these headers on a GET request\r\n    delete request.httpRequest.headers['Content-Length'];\r\n    delete request.httpRequest.headers['Content-Type'];\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  haltHandlersOnError: function haltHandlersOnError() {\r\n    this._haltHandlersOnError = true;\r\n  }\r\n});\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.Request.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\r\n  this.prototype.promise = function promise() {\r\n    var self = this;\r\n    // append to user agent\r\n    this.httpRequest.appendToUserAgent('promise');\r\n    return new PromiseDependency(function(resolve, reject) {\r\n      self.on('complete', function(resp) {\r\n        if (resp.error) {\r\n          reject(resp.error);\r\n        } else {\r\n          // define $response property so that it is not enumerable\r\n          // this prevents circular reference errors when stringifying the JSON object\r\n          resolve(Object.defineProperty(\r\n            resp.data || {},\r\n            '$response',\r\n            {value: resp}\r\n          ));\r\n        }\r\n      });\r\n      self.runTo();\r\n    });\r\n  };\r\n};\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.Request.deletePromisesFromClass = function deletePromisesFromClass() {\r\n  delete this.prototype.promise;\r\n};\r\n\r\nAWS.util.addPromises(AWS.Request);\r\n\r\nAWS.util.mixin(AWS.Request, AWS.SequentialExecutor);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}