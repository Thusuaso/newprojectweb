{"ast":null,"code":"var AWS = require('./core');\nvar inherit = AWS.util.inherit;\n\n/**\r\n * The endpoint that a service will talk to, for example,\r\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\r\n * you need to override an endpoint for a service, you can\r\n * set the endpoint on a service by passing the endpoint\r\n * object with the `endpoint` option key:\r\n *\r\n * ```javascript\r\n * var ep = new AWS.Endpoint('awsproxy.example.com');\r\n * var s3 = new AWS.S3({endpoint: ep});\r\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\r\n * ```\r\n *\r\n * Note that if you do not specify a protocol, the protocol will\r\n * be selected based on your current {AWS.config} configuration.\r\n *\r\n * @!attribute protocol\r\n *   @return [String] the protocol (http or https) of the endpoint\r\n *     URL\r\n * @!attribute hostname\r\n *   @return [String] the host portion of the endpoint, e.g.,\r\n *     example.com\r\n * @!attribute host\r\n *   @return [String] the host portion of the endpoint including\r\n *     the port, e.g., example.com:80\r\n * @!attribute port\r\n *   @return [Integer] the port of the endpoint\r\n * @!attribute href\r\n *   @return [String] the full URL of the endpoint\r\n */\nAWS.Endpoint = inherit({\n  /**\r\n   * @overload Endpoint(endpoint)\r\n   *   Constructs a new endpoint given an endpoint URL. If the\r\n   *   URL omits a protocol (http or https), the default protocol\r\n   *   set in the global {AWS.config} will be used.\r\n   *   @param endpoint [String] the URL to construct an endpoint from\r\n   */\n  constructor: function Endpoint(endpoint, config) {\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n    if (typeof endpoint === 'undefined' || endpoint === null) {\n      throw new Error('Invalid endpoint: ' + endpoint);\n    } else if (typeof endpoint !== 'string') {\n      return AWS.util.copy(endpoint);\n    }\n    if (!endpoint.match(/^http/)) {\n      var useSSL = config && config.sslEnabled !== undefined ? config.sslEnabled : AWS.config.sslEnabled;\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\n    }\n    AWS.util.update(this, AWS.util.urlParse(endpoint));\n\n    // Ensure the port property is set as an integer\n    if (this.port) {\n      this.port = parseInt(this.port, 10);\n    } else {\n      this.port = this.protocol === 'https:' ? 443 : 80;\n    }\n  }\n});\n\n/**\r\n * The low level HTTP request object, encapsulating all HTTP header\r\n * and body data sent by a service request.\r\n *\r\n * @!attribute method\r\n *   @return [String] the HTTP method of the request\r\n * @!attribute path\r\n *   @return [String] the path portion of the URI, e.g.,\r\n *     \"/list/?start=5&num=10\"\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *     a map of header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the request body payload\r\n * @!attribute endpoint\r\n *   @return [AWS.Endpoint] the endpoint for the request\r\n * @!attribute region\r\n *   @api private\r\n *   @return [String] the region, for signing purposes only.\r\n */\nAWS.HttpRequest = inherit({\n  /**\r\n   * @api private\r\n   */\n  constructor: function HttpRequest(endpoint, region) {\n    endpoint = new AWS.Endpoint(endpoint);\n    this.method = 'POST';\n    this.path = endpoint.path || '/';\n    this.headers = {};\n    this.body = '';\n    this.endpoint = endpoint;\n    this.region = region;\n    this._userAgent = '';\n    this.setUserAgent();\n  },\n  /**\r\n   * @api private\r\n   */\n  setUserAgent: function setUserAgent() {\n    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();\n  },\n  getUserAgentHeaderName: function getUserAgentHeaderName() {\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\n    return prefix + 'User-Agent';\n  },\n  /**\r\n   * @api private\r\n   */\n  appendToUserAgent: function appendToUserAgent(agentPartial) {\n    if (typeof agentPartial === 'string' && agentPartial) {\n      this._userAgent += ' ' + agentPartial;\n    }\n    this.headers[this.getUserAgentHeaderName()] = this._userAgent;\n  },\n  /**\r\n   * @api private\r\n   */\n  getUserAgent: function getUserAgent() {\n    return this._userAgent;\n  },\n  /**\r\n   * @return [String] the part of the {path} excluding the\r\n   *   query string\r\n   */\n  pathname: function pathname() {\n    return this.path.split('?', 1)[0];\n  },\n  /**\r\n   * @return [String] the query string portion of the {path}\r\n   */\n  search: function search() {\n    var query = this.path.split('?', 2)[1];\n    if (query) {\n      query = AWS.util.queryStringParse(query);\n      return AWS.util.queryParamsToString(query);\n    }\n    return '';\n  },\n  /**\r\n   * @api private\r\n   * update httpRequest endpoint with endpoint string\r\n   */\n  updateEndpoint: function updateEndpoint(endpointStr) {\n    var newEndpoint = new AWS.Endpoint(endpointStr);\n    this.endpoint = newEndpoint;\n    this.path = newEndpoint.path || '/';\n    if (this.headers['Host']) {\n      this.headers['Host'] = newEndpoint.host;\n    }\n  }\n});\n\n/**\r\n * The low level HTTP response object, encapsulating all HTTP header\r\n * and body data returned from the request.\r\n *\r\n * @!attribute statusCode\r\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *      a map of response header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the response body payload\r\n * @!attribute [r] streaming\r\n *   @return [Boolean] whether this response is being streamed at a low-level.\r\n *     Defaults to `false` (buffered reads). Do not modify this manually, use\r\n *     {createUnbufferedStream} to convert the stream to unbuffered mode\r\n *     instead.\r\n */\nAWS.HttpResponse = inherit({\n  /**\r\n   * @api private\r\n   */\n  constructor: function HttpResponse() {\n    this.statusCode = undefined;\n    this.headers = {};\n    this.body = undefined;\n    this.streaming = false;\n    this.stream = null;\n  },\n  /**\r\n   * Disables buffering on the HTTP response and returns the stream for reading.\r\n   * @return [Stream, XMLHttpRequest, null] the underlying stream object.\r\n   *   Use this object to directly read data off of the stream.\r\n   * @note This object is only available after the {AWS.Request~httpHeaders}\r\n   *   event has fired. This method must be called prior to\r\n   *   {AWS.Request~httpData}.\r\n   * @example Taking control of a stream\r\n   *   request.on('httpHeaders', function(statusCode, headers) {\r\n   *     if (statusCode < 300) {\r\n   *       if (headers.etag === 'xyz') {\r\n   *         // pipe the stream, disabling buffering\r\n   *         var stream = this.response.httpResponse.createUnbufferedStream();\r\n   *         stream.pipe(process.stdout);\r\n   *       } else { // abort this request and set a better error message\r\n   *         this.abort();\r\n   *         this.response.error = new Error('Invalid ETag');\r\n   *       }\r\n   *     }\r\n   *   }).send(console.log);\r\n   */\n  createUnbufferedStream: function createUnbufferedStream() {\n    this.streaming = true;\n    return this.stream;\n  }\n});\nAWS.HttpClient = inherit({});\n\n/**\r\n * @api private\r\n */\nAWS.HttpClient.getInstance = function getInstance() {\n  if (this.singleton === undefined) {\n    this.singleton = new this();\n  }\n  return this.singleton;\n};","map":{"version":3,"names":["AWS","require","inherit","util","Endpoint","constructor","endpoint","config","hideProperties","Error","copy","match","useSSL","sslEnabled","undefined","update","urlParse","port","parseInt","protocol","HttpRequest","region","method","path","headers","body","_userAgent","setUserAgent","getUserAgentHeaderName","userAgent","prefix","isBrowser","appendToUserAgent","agentPartial","getUserAgent","pathname","split","search","query","queryStringParse","queryParamsToString","updateEndpoint","endpointStr","newEndpoint","host","HttpResponse","statusCode","streaming","stream","createUnbufferedStream","HttpClient","getInstance","singleton"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/http.js"],"sourcesContent":["var AWS = require('./core');\r\nvar inherit = AWS.util.inherit;\r\n\r\n/**\r\n * The endpoint that a service will talk to, for example,\r\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\r\n * you need to override an endpoint for a service, you can\r\n * set the endpoint on a service by passing the endpoint\r\n * object with the `endpoint` option key:\r\n *\r\n * ```javascript\r\n * var ep = new AWS.Endpoint('awsproxy.example.com');\r\n * var s3 = new AWS.S3({endpoint: ep});\r\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\r\n * ```\r\n *\r\n * Note that if you do not specify a protocol, the protocol will\r\n * be selected based on your current {AWS.config} configuration.\r\n *\r\n * @!attribute protocol\r\n *   @return [String] the protocol (http or https) of the endpoint\r\n *     URL\r\n * @!attribute hostname\r\n *   @return [String] the host portion of the endpoint, e.g.,\r\n *     example.com\r\n * @!attribute host\r\n *   @return [String] the host portion of the endpoint including\r\n *     the port, e.g., example.com:80\r\n * @!attribute port\r\n *   @return [Integer] the port of the endpoint\r\n * @!attribute href\r\n *   @return [String] the full URL of the endpoint\r\n */\r\nAWS.Endpoint = inherit({\r\n\r\n  /**\r\n   * @overload Endpoint(endpoint)\r\n   *   Constructs a new endpoint given an endpoint URL. If the\r\n   *   URL omits a protocol (http or https), the default protocol\r\n   *   set in the global {AWS.config} will be used.\r\n   *   @param endpoint [String] the URL to construct an endpoint from\r\n   */\r\n  constructor: function Endpoint(endpoint, config) {\r\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\r\n\r\n    if (typeof endpoint === 'undefined' || endpoint === null) {\r\n      throw new Error('Invalid endpoint: ' + endpoint);\r\n    } else if (typeof endpoint !== 'string') {\r\n      return AWS.util.copy(endpoint);\r\n    }\r\n\r\n    if (!endpoint.match(/^http/)) {\r\n      var useSSL = config && config.sslEnabled !== undefined ?\r\n        config.sslEnabled : AWS.config.sslEnabled;\r\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\r\n    }\r\n\r\n    AWS.util.update(this, AWS.util.urlParse(endpoint));\r\n\r\n    // Ensure the port property is set as an integer\r\n    if (this.port) {\r\n      this.port = parseInt(this.port, 10);\r\n    } else {\r\n      this.port = this.protocol === 'https:' ? 443 : 80;\r\n    }\r\n  }\r\n\r\n});\r\n\r\n/**\r\n * The low level HTTP request object, encapsulating all HTTP header\r\n * and body data sent by a service request.\r\n *\r\n * @!attribute method\r\n *   @return [String] the HTTP method of the request\r\n * @!attribute path\r\n *   @return [String] the path portion of the URI, e.g.,\r\n *     \"/list/?start=5&num=10\"\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *     a map of header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the request body payload\r\n * @!attribute endpoint\r\n *   @return [AWS.Endpoint] the endpoint for the request\r\n * @!attribute region\r\n *   @api private\r\n *   @return [String] the region, for signing purposes only.\r\n */\r\nAWS.HttpRequest = inherit({\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  constructor: function HttpRequest(endpoint, region) {\r\n    endpoint = new AWS.Endpoint(endpoint);\r\n    this.method = 'POST';\r\n    this.path = endpoint.path || '/';\r\n    this.headers = {};\r\n    this.body = '';\r\n    this.endpoint = endpoint;\r\n    this.region = region;\r\n    this._userAgent = '';\r\n    this.setUserAgent();\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  setUserAgent: function setUserAgent() {\r\n    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();\r\n  },\r\n\r\n  getUserAgentHeaderName: function getUserAgentHeaderName() {\r\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\r\n    return prefix + 'User-Agent';\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  appendToUserAgent: function appendToUserAgent(agentPartial) {\r\n    if (typeof agentPartial === 'string' && agentPartial) {\r\n      this._userAgent += ' ' + agentPartial;\r\n    }\r\n    this.headers[this.getUserAgentHeaderName()] = this._userAgent;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getUserAgent: function getUserAgent() {\r\n    return this._userAgent;\r\n  },\r\n\r\n  /**\r\n   * @return [String] the part of the {path} excluding the\r\n   *   query string\r\n   */\r\n  pathname: function pathname() {\r\n    return this.path.split('?', 1)[0];\r\n  },\r\n\r\n  /**\r\n   * @return [String] the query string portion of the {path}\r\n   */\r\n  search: function search() {\r\n    var query = this.path.split('?', 2)[1];\r\n    if (query) {\r\n      query = AWS.util.queryStringParse(query);\r\n      return AWS.util.queryParamsToString(query);\r\n    }\r\n    return '';\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   * update httpRequest endpoint with endpoint string\r\n   */\r\n  updateEndpoint: function updateEndpoint(endpointStr) {\r\n    var newEndpoint = new AWS.Endpoint(endpointStr);\r\n    this.endpoint = newEndpoint;\r\n    this.path = newEndpoint.path || '/';\r\n    if (this.headers['Host']) {\r\n      this.headers['Host'] = newEndpoint.host;\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * The low level HTTP response object, encapsulating all HTTP header\r\n * and body data returned from the request.\r\n *\r\n * @!attribute statusCode\r\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\r\n * @!attribute headers\r\n *   @return [map<String,String>]\r\n *      a map of response header keys and their respective values\r\n * @!attribute body\r\n *   @return [String] the response body payload\r\n * @!attribute [r] streaming\r\n *   @return [Boolean] whether this response is being streamed at a low-level.\r\n *     Defaults to `false` (buffered reads). Do not modify this manually, use\r\n *     {createUnbufferedStream} to convert the stream to unbuffered mode\r\n *     instead.\r\n */\r\nAWS.HttpResponse = inherit({\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  constructor: function HttpResponse() {\r\n    this.statusCode = undefined;\r\n    this.headers = {};\r\n    this.body = undefined;\r\n    this.streaming = false;\r\n    this.stream = null;\r\n  },\r\n\r\n  /**\r\n   * Disables buffering on the HTTP response and returns the stream for reading.\r\n   * @return [Stream, XMLHttpRequest, null] the underlying stream object.\r\n   *   Use this object to directly read data off of the stream.\r\n   * @note This object is only available after the {AWS.Request~httpHeaders}\r\n   *   event has fired. This method must be called prior to\r\n   *   {AWS.Request~httpData}.\r\n   * @example Taking control of a stream\r\n   *   request.on('httpHeaders', function(statusCode, headers) {\r\n   *     if (statusCode < 300) {\r\n   *       if (headers.etag === 'xyz') {\r\n   *         // pipe the stream, disabling buffering\r\n   *         var stream = this.response.httpResponse.createUnbufferedStream();\r\n   *         stream.pipe(process.stdout);\r\n   *       } else { // abort this request and set a better error message\r\n   *         this.abort();\r\n   *         this.response.error = new Error('Invalid ETag');\r\n   *       }\r\n   *     }\r\n   *   }).send(console.log);\r\n   */\r\n  createUnbufferedStream: function createUnbufferedStream() {\r\n    this.streaming = true;\r\n    return this.stream;\r\n  }\r\n});\r\n\r\n\r\nAWS.HttpClient = inherit({});\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.HttpClient.getInstance = function getInstance() {\r\n  if (this.singleton === undefined) {\r\n    this.singleton = new this();\r\n  }\r\n  return this.singleton;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}