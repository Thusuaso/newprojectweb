{"ast":null,"code":"var AWS = require('../core');\nvar STS = require('../../clients/sts');\n\n/**\r\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\r\n * extra parameters, credentials will be fetched from the\r\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\r\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\r\n * role instead.\r\n *\r\n * AWS.ChainableTemporaryCredentials differs from AWS.TemporaryCredentials in\r\n * the way masterCredentials and refreshes are handled.\r\n * AWS.ChainableTemporaryCredentials refreshes expired credentials using the\r\n * masterCredentials passed by the user to support chaining of STS credentials.\r\n * However, AWS.TemporaryCredentials recursively collapses the masterCredentials\r\n * during instantiation, precluding the ability to refresh credentials which\r\n * require intermediate, temporary credentials.\r\n *\r\n * For example, if the application should use RoleA, which must be assumed from\r\n * RoleB, and the environment provides credentials which can assume RoleB, then\r\n * AWS.ChainableTemporaryCredentials must be used to support refreshing the\r\n * temporary credentials for RoleA:\r\n *\r\n * ```javascript\r\n * var roleACreds = new AWS.ChainableTemporaryCredentials({\r\n *   params: {RoleArn: 'RoleA'},\r\n *   masterCredentials: new AWS.ChainableTemporaryCredentials({\r\n *     params: {RoleArn: 'RoleB'},\r\n *     masterCredentials: new AWS.EnvironmentCredentials('AWS')\r\n *   })\r\n * });\r\n * ```\r\n *\r\n * If AWS.TemporaryCredentials had been used in the previous example,\r\n * `roleACreds` would fail to refresh because `roleACreds` would\r\n * use the environment credentials for the AssumeRole request.\r\n *\r\n * Another difference is that AWS.ChainableTemporaryCredentials creates the STS\r\n * service instance during instantiation while AWS.TemporaryCredentials creates\r\n * the STS service instance during the first refresh. Creating the service\r\n * instance during instantiation effectively captures the master credentials\r\n * from the global config, so that subsequent changes to the global config do\r\n * not affect the master credentials used to refresh the temporary credentials.\r\n *\r\n * This allows an instance of AWS.ChainableTemporaryCredentials to be assigned\r\n * to AWS.config.credentials:\r\n *\r\n * ```javascript\r\n * var envCreds = new AWS.EnvironmentCredentials('AWS');\r\n * AWS.config.credentials = envCreds;\r\n * // masterCredentials will be envCreds\r\n * AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\r\n *   params: {RoleArn: '...'}\r\n * });\r\n * ```\r\n *\r\n * Similarly, to use the CredentialProviderChain's default providers as the\r\n * master credentials, simply create a new instance of\r\n * AWS.ChainableTemporaryCredentials:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials = new ChainableTemporaryCredentials({\r\n *   params: {RoleArn: '...'}\r\n * });\r\n * ```\r\n *\r\n * @!attribute service\r\n *   @return [AWS.STS] the STS service instance used to\r\n *     get and refresh temporary credentials from AWS STS.\r\n * @note (see constructor)\r\n */\nAWS.ChainableTemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * Creates a new temporary credentials object.\r\n   *\r\n   * @param options [map] a set of options\r\n   * @option options params [map] ({}) a map of options that are passed to the\r\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\r\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\r\n   *   IAM role. If a `SerialNumber` parameter is passed in, {tokenCodeFn} must\r\n   *   also be passed in or an error will be thrown.\r\n   * @option options masterCredentials [AWS.Credentials] the master credentials\r\n   *   used to get and refresh temporary credentials from AWS STS. By default,\r\n   *   AWS.config.credentials or AWS.config.credentialProvider will be used.\r\n   * @option options tokenCodeFn [Function] (null) Function to provide\r\n   *   `TokenCode`, if `SerialNumber` is provided for profile in {params}. Function\r\n   *   is called with value of `SerialNumber` and `callback`, and should provide\r\n   *   the `TokenCode` or an error to the callback in the format\r\n   *   `callback(err, token)`.\r\n   * @example Creating a new credentials object for generic temporary credentials\r\n   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials();\r\n   * @example Creating a new credentials object for an IAM role\r\n   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\r\n   *     params: {\r\n   *       RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials'\r\n   *     }\r\n   *   });\r\n   * @see AWS.STS.assumeRole\r\n   * @see AWS.STS.getSessionToken\r\n   */\n  constructor: function ChainableTemporaryCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options || {};\n    this.errorCode = 'ChainableTemporaryCredentialsProviderFailure';\n    this.expired = true;\n    this.tokenCodeFn = null;\n    var params = AWS.util.copy(options.params) || {};\n    if (params.RoleArn) {\n      params.RoleSessionName = params.RoleSessionName || 'temporary-credentials';\n    }\n    if (params.SerialNumber) {\n      if (!options.tokenCodeFn || typeof options.tokenCodeFn !== 'function') {\n        throw new AWS.util.error(new Error('tokenCodeFn must be a function when params.SerialNumber is given'), {\n          code: this.errorCode\n        });\n      } else {\n        this.tokenCodeFn = options.tokenCodeFn;\n      }\n    }\n    var config = AWS.util.merge({\n      params: params,\n      credentials: options.masterCredentials || AWS.config.credentials\n    }, options.stsConfig || {});\n    this.service = new STS(config);\n  },\n  /**\r\n   * Refreshes credentials using {AWS.STS.assumeRole} or\r\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\r\n   * to the credentials {constructor}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see AWS.Credentials.get\r\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n  /**\r\n   * @api private\r\n   * @param callback\r\n   */\n  load: function load(callback) {\n    var self = this;\n    var operation = self.service.config.params.RoleArn ? 'assumeRole' : 'getSessionToken';\n    this.getTokenCode(function (err, tokenCode) {\n      var params = {};\n      if (err) {\n        callback(err);\n        return;\n      }\n      if (tokenCode) {\n        params.TokenCode = tokenCode;\n      }\n      self.service[operation](params, function (err, data) {\n        if (!err) {\n          self.service.credentialsFrom(data, self);\n        }\n        callback(err);\n      });\n    });\n  },\n  /**\r\n   * @api private\r\n   */\n  getTokenCode: function getTokenCode(callback) {\n    var self = this;\n    if (this.tokenCodeFn) {\n      this.tokenCodeFn(this.service.config.params.SerialNumber, function (err, token) {\n        if (err) {\n          var message = err;\n          if (err instanceof Error) {\n            message = err.message;\n          }\n          callback(AWS.util.error(new Error('Error fetching MFA token: ' + message), {\n            code: self.errorCode\n          }));\n          return;\n        }\n        callback(null, token);\n      });\n    } else {\n      callback(null);\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","STS","ChainableTemporaryCredentials","util","inherit","Credentials","constructor","options","call","errorCode","expired","tokenCodeFn","params","copy","RoleArn","RoleSessionName","SerialNumber","error","Error","code","config","merge","credentials","masterCredentials","stsConfig","service","refresh","callback","coalesceRefresh","fn","load","self","operation","getTokenCode","err","tokenCode","TokenCode","data","credentialsFrom","token","message"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/credentials/chainable_temporary_credentials.js"],"sourcesContent":["var AWS = require('../core');\r\nvar STS = require('../../clients/sts');\r\n\r\n/**\r\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\r\n * extra parameters, credentials will be fetched from the\r\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\r\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\r\n * role instead.\r\n *\r\n * AWS.ChainableTemporaryCredentials differs from AWS.TemporaryCredentials in\r\n * the way masterCredentials and refreshes are handled.\r\n * AWS.ChainableTemporaryCredentials refreshes expired credentials using the\r\n * masterCredentials passed by the user to support chaining of STS credentials.\r\n * However, AWS.TemporaryCredentials recursively collapses the masterCredentials\r\n * during instantiation, precluding the ability to refresh credentials which\r\n * require intermediate, temporary credentials.\r\n *\r\n * For example, if the application should use RoleA, which must be assumed from\r\n * RoleB, and the environment provides credentials which can assume RoleB, then\r\n * AWS.ChainableTemporaryCredentials must be used to support refreshing the\r\n * temporary credentials for RoleA:\r\n *\r\n * ```javascript\r\n * var roleACreds = new AWS.ChainableTemporaryCredentials({\r\n *   params: {RoleArn: 'RoleA'},\r\n *   masterCredentials: new AWS.ChainableTemporaryCredentials({\r\n *     params: {RoleArn: 'RoleB'},\r\n *     masterCredentials: new AWS.EnvironmentCredentials('AWS')\r\n *   })\r\n * });\r\n * ```\r\n *\r\n * If AWS.TemporaryCredentials had been used in the previous example,\r\n * `roleACreds` would fail to refresh because `roleACreds` would\r\n * use the environment credentials for the AssumeRole request.\r\n *\r\n * Another difference is that AWS.ChainableTemporaryCredentials creates the STS\r\n * service instance during instantiation while AWS.TemporaryCredentials creates\r\n * the STS service instance during the first refresh. Creating the service\r\n * instance during instantiation effectively captures the master credentials\r\n * from the global config, so that subsequent changes to the global config do\r\n * not affect the master credentials used to refresh the temporary credentials.\r\n *\r\n * This allows an instance of AWS.ChainableTemporaryCredentials to be assigned\r\n * to AWS.config.credentials:\r\n *\r\n * ```javascript\r\n * var envCreds = new AWS.EnvironmentCredentials('AWS');\r\n * AWS.config.credentials = envCreds;\r\n * // masterCredentials will be envCreds\r\n * AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\r\n *   params: {RoleArn: '...'}\r\n * });\r\n * ```\r\n *\r\n * Similarly, to use the CredentialProviderChain's default providers as the\r\n * master credentials, simply create a new instance of\r\n * AWS.ChainableTemporaryCredentials:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials = new ChainableTemporaryCredentials({\r\n *   params: {RoleArn: '...'}\r\n * });\r\n * ```\r\n *\r\n * @!attribute service\r\n *   @return [AWS.STS] the STS service instance used to\r\n *     get and refresh temporary credentials from AWS STS.\r\n * @note (see constructor)\r\n */\r\nAWS.ChainableTemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\r\n  /**\r\n   * Creates a new temporary credentials object.\r\n   *\r\n   * @param options [map] a set of options\r\n   * @option options params [map] ({}) a map of options that are passed to the\r\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\r\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\r\n   *   IAM role. If a `SerialNumber` parameter is passed in, {tokenCodeFn} must\r\n   *   also be passed in or an error will be thrown.\r\n   * @option options masterCredentials [AWS.Credentials] the master credentials\r\n   *   used to get and refresh temporary credentials from AWS STS. By default,\r\n   *   AWS.config.credentials or AWS.config.credentialProvider will be used.\r\n   * @option options tokenCodeFn [Function] (null) Function to provide\r\n   *   `TokenCode`, if `SerialNumber` is provided for profile in {params}. Function\r\n   *   is called with value of `SerialNumber` and `callback`, and should provide\r\n   *   the `TokenCode` or an error to the callback in the format\r\n   *   `callback(err, token)`.\r\n   * @example Creating a new credentials object for generic temporary credentials\r\n   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials();\r\n   * @example Creating a new credentials object for an IAM role\r\n   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\r\n   *     params: {\r\n   *       RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials'\r\n   *     }\r\n   *   });\r\n   * @see AWS.STS.assumeRole\r\n   * @see AWS.STS.getSessionToken\r\n   */\r\n  constructor: function ChainableTemporaryCredentials(options) {\r\n    AWS.Credentials.call(this);\r\n    options = options || {};\r\n    this.errorCode = 'ChainableTemporaryCredentialsProviderFailure';\r\n    this.expired = true;\r\n    this.tokenCodeFn = null;\r\n\r\n    var params = AWS.util.copy(options.params) || {};\r\n    if (params.RoleArn) {\r\n      params.RoleSessionName = params.RoleSessionName || 'temporary-credentials';\r\n    }\r\n    if (params.SerialNumber) {\r\n      if (!options.tokenCodeFn || (typeof options.tokenCodeFn !== 'function')) {\r\n        throw new AWS.util.error(\r\n          new Error('tokenCodeFn must be a function when params.SerialNumber is given'),\r\n          {code: this.errorCode}\r\n        );\r\n      } else {\r\n        this.tokenCodeFn = options.tokenCodeFn;\r\n      }\r\n    }\r\n    var config = AWS.util.merge(\r\n      {\r\n        params: params,\r\n        credentials: options.masterCredentials || AWS.config.credentials\r\n      },\r\n      options.stsConfig || {}\r\n    );\r\n    this.service = new STS(config);\r\n  },\r\n\r\n  /**\r\n   * Refreshes credentials using {AWS.STS.assumeRole} or\r\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\r\n   * to the credentials {constructor}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see AWS.Credentials.get\r\n   */\r\n  refresh: function refresh(callback) {\r\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   * @param callback\r\n   */\r\n  load: function load(callback) {\r\n    var self = this;\r\n    var operation = self.service.config.params.RoleArn ? 'assumeRole' : 'getSessionToken';\r\n    this.getTokenCode(function (err, tokenCode) {\r\n      var params = {};\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n      if (tokenCode) {\r\n        params.TokenCode = tokenCode;\r\n      }\r\n      self.service[operation](params, function (err, data) {\r\n        if (!err) {\r\n          self.service.credentialsFrom(data, self);\r\n        }\r\n        callback(err);\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getTokenCode: function getTokenCode(callback) {\r\n    var self = this;\r\n    if (this.tokenCodeFn) {\r\n      this.tokenCodeFn(this.service.config.params.SerialNumber, function (err, token) {\r\n        if (err) {\r\n          var message = err;\r\n          if (err instanceof Error) {\r\n            message = err.message;\r\n          }\r\n          callback(\r\n            AWS.util.error(\r\n              new Error('Error fetching MFA token: ' + message),\r\n              { code: self.errorCode}\r\n            )\r\n          );\r\n          return;\r\n        }\r\n        callback(null, token);\r\n      });\r\n    } else {\r\n      callback(null);\r\n    }\r\n  }\r\n});\r\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC5B,IAAIC,GAAG,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,GAAG,CAACG,6BAA6B,GAAGH,GAAG,CAACI,IAAI,CAACC,OAAO,CAACL,GAAG,CAACM,WAAW,EAAE;EACpE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASJ,6BAA6B,CAACK,OAAO,EAAE;IAC3DR,GAAG,CAACM,WAAW,CAACG,IAAI,CAAC,IAAI,CAAC;IAC1BD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAI,CAACE,SAAS,GAAG,8CAA8C;IAC/D,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,WAAW,GAAG,IAAI;IAEvB,IAAIC,MAAM,GAAGb,GAAG,CAACI,IAAI,CAACU,IAAI,CAACN,OAAO,CAACK,MAAM,CAAC,IAAI,CAAC,CAAC;IAChD,IAAIA,MAAM,CAACE,OAAO,EAAE;MAClBF,MAAM,CAACG,eAAe,GAAGH,MAAM,CAACG,eAAe,IAAI,uBAAuB;IAC5E;IACA,IAAIH,MAAM,CAACI,YAAY,EAAE;MACvB,IAAI,CAACT,OAAO,CAACI,WAAW,IAAK,OAAOJ,OAAO,CAACI,WAAW,KAAK,UAAW,EAAE;QACvE,MAAM,IAAIZ,GAAG,CAACI,IAAI,CAACc,KAAK,CACtB,IAAIC,KAAK,CAAC,kEAAkE,CAAC,EAC7E;UAACC,IAAI,EAAE,IAAI,CAACV;QAAS,CAAC,CACvB;MACH,CAAC,MAAM;QACL,IAAI,CAACE,WAAW,GAAGJ,OAAO,CAACI,WAAW;MACxC;IACF;IACA,IAAIS,MAAM,GAAGrB,GAAG,CAACI,IAAI,CAACkB,KAAK,CACzB;MACET,MAAM,EAAEA,MAAM;MACdU,WAAW,EAAEf,OAAO,CAACgB,iBAAiB,IAAIxB,GAAG,CAACqB,MAAM,CAACE;IACvD,CAAC,EACDf,OAAO,CAACiB,SAAS,IAAI,CAAC,CAAC,CACxB;IACD,IAAI,CAACC,OAAO,GAAG,IAAIxB,GAAG,CAACmB,MAAM,CAAC;EAChC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,OAAO,EAAE,SAASA,OAAO,CAACC,QAAQ,EAAE;IAClC,IAAI,CAACC,eAAe,CAACD,QAAQ,IAAI5B,GAAG,CAACI,IAAI,CAAC0B,EAAE,CAACF,QAAQ,CAAC;EACxD,CAAC;EAED;AACF;AACA;AACA;EACEG,IAAI,EAAE,SAASA,IAAI,CAACH,QAAQ,EAAE;IAC5B,IAAII,IAAI,GAAG,IAAI;IACf,IAAIC,SAAS,GAAGD,IAAI,CAACN,OAAO,CAACL,MAAM,CAACR,MAAM,CAACE,OAAO,GAAG,YAAY,GAAG,iBAAiB;IACrF,IAAI,CAACmB,YAAY,CAAC,UAAUC,GAAG,EAAEC,SAAS,EAAE;MAC1C,IAAIvB,MAAM,GAAG,CAAC,CAAC;MACf,IAAIsB,GAAG,EAAE;QACPP,QAAQ,CAACO,GAAG,CAAC;QACb;MACF;MACA,IAAIC,SAAS,EAAE;QACbvB,MAAM,CAACwB,SAAS,GAAGD,SAAS;MAC9B;MACAJ,IAAI,CAACN,OAAO,CAACO,SAAS,CAAC,CAACpB,MAAM,EAAE,UAAUsB,GAAG,EAAEG,IAAI,EAAE;QACnD,IAAI,CAACH,GAAG,EAAE;UACRH,IAAI,CAACN,OAAO,CAACa,eAAe,CAACD,IAAI,EAAEN,IAAI,CAAC;QAC1C;QACAJ,QAAQ,CAACO,GAAG,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;EACED,YAAY,EAAE,SAASA,YAAY,CAACN,QAAQ,EAAE;IAC5C,IAAII,IAAI,GAAG,IAAI;IACf,IAAI,IAAI,CAACpB,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAAC,IAAI,CAACc,OAAO,CAACL,MAAM,CAACR,MAAM,CAACI,YAAY,EAAE,UAAUkB,GAAG,EAAEK,KAAK,EAAE;QAC9E,IAAIL,GAAG,EAAE;UACP,IAAIM,OAAO,GAAGN,GAAG;UACjB,IAAIA,GAAG,YAAYhB,KAAK,EAAE;YACxBsB,OAAO,GAAGN,GAAG,CAACM,OAAO;UACvB;UACAb,QAAQ,CACN5B,GAAG,CAACI,IAAI,CAACc,KAAK,CACZ,IAAIC,KAAK,CAAC,4BAA4B,GAAGsB,OAAO,CAAC,EACjD;YAAErB,IAAI,EAAEY,IAAI,CAACtB;UAAS,CAAC,CACxB,CACF;UACD;QACF;QACAkB,QAAQ,CAAC,IAAI,EAAEY,KAAK,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLZ,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script"}