{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nvar AWS = require('../core');\nvar util = AWS.util;\nvar typeOf = require('./types').typeOf;\nvar DynamoDBSet = require('./set');\nvar NumberValue = require('./numberValue');\nAWS.DynamoDB.Converter = {\n  /**\r\n   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\r\n   *\r\n   * @param data [any] The data to convert to a DynamoDB AttributeValue\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   * @return [map] An object in the Amazon DynamoDB AttributeValue format\r\n   *\r\n   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to\r\n   *    convert entire records (rather than individual attributes)\r\n   */\n  input: function convertInput(data, options) {\n    options = options || {};\n    var type = typeOf(data);\n    if (type === 'Object') {\n      return formatMap(data, options);\n    } else if (type === 'Array') {\n      return formatList(data, options);\n    } else if (type === 'Set') {\n      return formatSet(data, options);\n    } else if (type === 'String') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n      return {\n        S: data\n      };\n    } else if (type === 'Number' || type === 'NumberValue') {\n      return {\n        N: data.toString()\n      };\n    } else if (type === 'Binary') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n      return {\n        B: data\n      };\n    } else if (type === 'Boolean') {\n      return {\n        BOOL: data\n      };\n    } else if (type === 'null') {\n      return {\n        NULL: true\n      };\n    } else if (type !== 'undefined' && type !== 'Function') {\n      // this value has a custom constructor\n      return formatMap(data, options);\n    }\n  },\n  /**\r\n   * Convert a JavaScript object into a DynamoDB record.\r\n   *\r\n   * @param data [any] The data to convert to a DynamoDB record\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [map] An object in the DynamoDB record format.\r\n   *\r\n   * @example Convert a JavaScript object into a DynamoDB record\r\n   *  var marshalled = AWS.DynamoDB.Converter.marshall({\r\n   *    string: 'foo',\r\n   *    list: ['fizz', 'buzz', 'pop'],\r\n   *    map: {\r\n   *      nestedMap: {\r\n   *        key: 'value',\r\n   *      }\r\n   *    },\r\n   *    number: 123,\r\n   *    nullValue: null,\r\n   *    boolValue: true,\r\n   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])\r\n   *  });\r\n   */\n  marshall: function marshallItem(data, options) {\n    return AWS.DynamoDB.Converter.input(data, options).M;\n  },\n  /**\r\n   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\r\n   *\r\n   * @param data [map] An object in the Amazon DynamoDB AttributeValue format\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [Object|Array|String|Number|Boolean|null]\r\n   *\r\n   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to\r\n   *    convert entire records (rather than individual attributes)\r\n   */\n  output: function convertOutput(data, options) {\n    options = options || {};\n    var list, map, i;\n    for (var type in data) {\n      var values = data[type];\n      if (type === 'M') {\n        map = {};\n        for (var key in values) {\n          map[key] = convertOutput(values[key], options);\n        }\n        return map;\n      } else if (type === 'L') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(convertOutput(values[i], options));\n        }\n        return list;\n      } else if (type === 'SS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(values[i] + '');\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'NS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(convertNumber(values[i], options.wrapNumbers));\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'BS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(AWS.util.buffer.toBuffer(values[i]));\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'S') {\n        return values + '';\n      } else if (type === 'N') {\n        return convertNumber(values, options.wrapNumbers);\n      } else if (type === 'B') {\n        return util.buffer.toBuffer(values);\n      } else if (type === 'BOOL') {\n        return values === 'true' || values === 'TRUE' || values === true;\n      } else if (type === 'NULL') {\n        return null;\n      }\n    }\n  },\n  /**\r\n   * Convert a DynamoDB record into a JavaScript object.\r\n   *\r\n   * @param data [any] The DynamoDB record\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [map] An object whose properties have been converted from\r\n   *    DynamoDB's AttributeValue format into their corresponding native\r\n   *    JavaScript types.\r\n   *\r\n   * @example Convert a record received from a DynamoDB stream\r\n   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({\r\n   *    string: {S: 'foo'},\r\n   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},\r\n   *    map: {\r\n   *      M: {\r\n   *        nestedMap: {\r\n   *          M: {\r\n   *            key: {S: 'value'}\r\n   *          }\r\n   *        }\r\n   *      }\r\n   *    },\r\n   *    number: {N: '123'},\r\n   *    nullValue: {NULL: true},\r\n   *    boolValue: {BOOL: true}\r\n   *  });\r\n   */\n  unmarshall: function unmarshall(data, options) {\n    return AWS.DynamoDB.Converter.output({\n      M: data\n    }, options);\n  }\n};\n\n/**\r\n * @api private\r\n * @param data [Array]\r\n * @param options [map]\r\n */\nfunction formatList(data, options) {\n  var list = {\n    L: []\n  };\n  for (var i = 0; i < data.length; i++) {\n    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));\n  }\n  return list;\n}\n\n/**\r\n * @api private\r\n * @param value [String]\r\n * @param wrapNumbers [Boolean]\r\n */\nfunction convertNumber(value, wrapNumbers) {\n  return wrapNumbers ? new NumberValue(value) : Number(value);\n}\n\n/**\r\n * @api private\r\n * @param data [map]\r\n * @param options [map]\r\n */\nfunction formatMap(data, options) {\n  var map = {\n    M: {}\n  };\n  for (var key in data) {\n    var formatted = AWS.DynamoDB.Converter.input(data[key], options);\n    if (formatted !== void 0) {\n      map['M'][key] = formatted;\n    }\n  }\n  return map;\n}\n\n/**\r\n * @api private\r\n */\nfunction formatSet(data, options) {\n  options = options || {};\n  var values = data.values;\n  if (options.convertEmptyValues) {\n    values = filterEmptySetValues(data);\n    if (values.length === 0) {\n      return AWS.DynamoDB.Converter.input(null);\n    }\n  }\n  var map = {};\n  switch (data.type) {\n    case 'String':\n      map['SS'] = values;\n      break;\n    case 'Binary':\n      map['BS'] = values;\n      break;\n    case 'Number':\n      map['NS'] = values.map(function (value) {\n        return value.toString();\n      });\n  }\n  return map;\n}\n\n/**\r\n * @api private\r\n */\nfunction filterEmptySetValues(set) {\n  var nonEmptyValues = [];\n  var potentiallyEmptyTypes = {\n    String: true,\n    Binary: true,\n    Number: false\n  };\n  if (potentiallyEmptyTypes[set.type]) {\n    for (var i = 0; i < set.values.length; i++) {\n      if (set.values[i].length === 0) {\n        continue;\n      }\n      nonEmptyValues.push(set.values[i]);\n    }\n    return nonEmptyValues;\n  }\n  return set.values;\n}\n\n/**\r\n * @api private\r\n */\nmodule.exports = AWS.DynamoDB.Converter;","map":{"version":3,"names":["AWS","require","util","typeOf","DynamoDBSet","NumberValue","DynamoDB","Converter","input","convertInput","data","options","type","formatMap","formatList","formatSet","length","convertEmptyValues","S","N","toString","B","BOOL","NULL","marshall","marshallItem","M","output","convertOutput","list","map","i","values","key","push","convertNumber","wrapNumbers","buffer","toBuffer","unmarshall","L","value","Number","formatted","filterEmptySetValues","set","nonEmptyValues","potentiallyEmptyTypes","String","Binary","module","exports"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/dynamodb/converter.js"],"sourcesContent":["var AWS = require('../core');\r\nvar util = AWS.util;\r\nvar typeOf = require('./types').typeOf;\r\nvar DynamoDBSet = require('./set');\r\nvar NumberValue = require('./numberValue');\r\n\r\nAWS.DynamoDB.Converter = {\r\n  /**\r\n   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\r\n   *\r\n   * @param data [any] The data to convert to a DynamoDB AttributeValue\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   * @return [map] An object in the Amazon DynamoDB AttributeValue format\r\n   *\r\n   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to\r\n   *    convert entire records (rather than individual attributes)\r\n   */\r\n  input: function convertInput(data, options) {\r\n    options = options || {};\r\n    var type = typeOf(data);\r\n    if (type === 'Object') {\r\n      return formatMap(data, options);\r\n    } else if (type === 'Array') {\r\n      return formatList(data, options);\r\n    } else if (type === 'Set') {\r\n      return formatSet(data, options);\r\n    } else if (type === 'String') {\r\n      if (data.length === 0 && options.convertEmptyValues) {\r\n        return convertInput(null);\r\n      }\r\n      return { S: data };\r\n    } else if (type === 'Number' || type === 'NumberValue') {\r\n      return { N: data.toString() };\r\n    } else if (type === 'Binary') {\r\n      if (data.length === 0 && options.convertEmptyValues) {\r\n        return convertInput(null);\r\n      }\r\n      return { B: data };\r\n    } else if (type === 'Boolean') {\r\n      return { BOOL: data };\r\n    } else if (type === 'null') {\r\n      return { NULL: true };\r\n    } else if (type !== 'undefined' && type !== 'Function') {\r\n      // this value has a custom constructor\r\n      return formatMap(data, options);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Convert a JavaScript object into a DynamoDB record.\r\n   *\r\n   * @param data [any] The data to convert to a DynamoDB record\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [map] An object in the DynamoDB record format.\r\n   *\r\n   * @example Convert a JavaScript object into a DynamoDB record\r\n   *  var marshalled = AWS.DynamoDB.Converter.marshall({\r\n   *    string: 'foo',\r\n   *    list: ['fizz', 'buzz', 'pop'],\r\n   *    map: {\r\n   *      nestedMap: {\r\n   *        key: 'value',\r\n   *      }\r\n   *    },\r\n   *    number: 123,\r\n   *    nullValue: null,\r\n   *    boolValue: true,\r\n   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])\r\n   *  });\r\n   */\r\n  marshall: function marshallItem(data, options) {\r\n    return AWS.DynamoDB.Converter.input(data, options).M;\r\n  },\r\n\r\n  /**\r\n   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\r\n   *\r\n   * @param data [map] An object in the Amazon DynamoDB AttributeValue format\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [Object|Array|String|Number|Boolean|null]\r\n   *\r\n   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to\r\n   *    convert entire records (rather than individual attributes)\r\n   */\r\n  output: function convertOutput(data, options) {\r\n    options = options || {};\r\n    var list, map, i;\r\n    for (var type in data) {\r\n      var values = data[type];\r\n      if (type === 'M') {\r\n        map = {};\r\n        for (var key in values) {\r\n          map[key] = convertOutput(values[key], options);\r\n        }\r\n        return map;\r\n      } else if (type === 'L') {\r\n        list = [];\r\n        for (i = 0; i < values.length; i++) {\r\n          list.push(convertOutput(values[i], options));\r\n        }\r\n        return list;\r\n      } else if (type === 'SS') {\r\n        list = [];\r\n        for (i = 0; i < values.length; i++) {\r\n          list.push(values[i] + '');\r\n        }\r\n        return new DynamoDBSet(list);\r\n      } else if (type === 'NS') {\r\n        list = [];\r\n        for (i = 0; i < values.length; i++) {\r\n          list.push(convertNumber(values[i], options.wrapNumbers));\r\n        }\r\n        return new DynamoDBSet(list);\r\n      } else if (type === 'BS') {\r\n        list = [];\r\n        for (i = 0; i < values.length; i++) {\r\n          list.push(AWS.util.buffer.toBuffer(values[i]));\r\n        }\r\n        return new DynamoDBSet(list);\r\n      } else if (type === 'S') {\r\n        return values + '';\r\n      } else if (type === 'N') {\r\n        return convertNumber(values, options.wrapNumbers);\r\n      } else if (type === 'B') {\r\n        return util.buffer.toBuffer(values);\r\n      } else if (type === 'BOOL') {\r\n        return (values === 'true' || values === 'TRUE' || values === true);\r\n      } else if (type === 'NULL') {\r\n        return null;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Convert a DynamoDB record into a JavaScript object.\r\n   *\r\n   * @param data [any] The DynamoDB record\r\n   * @param options [map]\r\n   * @option options convertEmptyValues [Boolean] Whether to automatically\r\n   *                                              convert empty strings, blobs,\r\n   *                                              and sets to `null`\r\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\r\n   *                                        NumberValue object instead of\r\n   *                                        converting them to native JavaScript\r\n   *                                        numbers. This allows for the safe\r\n   *                                        round-trip transport of numbers of\r\n   *                                        arbitrary size.\r\n   *\r\n   * @return [map] An object whose properties have been converted from\r\n   *    DynamoDB's AttributeValue format into their corresponding native\r\n   *    JavaScript types.\r\n   *\r\n   * @example Convert a record received from a DynamoDB stream\r\n   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({\r\n   *    string: {S: 'foo'},\r\n   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},\r\n   *    map: {\r\n   *      M: {\r\n   *        nestedMap: {\r\n   *          M: {\r\n   *            key: {S: 'value'}\r\n   *          }\r\n   *        }\r\n   *      }\r\n   *    },\r\n   *    number: {N: '123'},\r\n   *    nullValue: {NULL: true},\r\n   *    boolValue: {BOOL: true}\r\n   *  });\r\n   */\r\n  unmarshall: function unmarshall(data, options) {\r\n    return AWS.DynamoDB.Converter.output({M: data}, options);\r\n  }\r\n};\r\n\r\n/**\r\n * @api private\r\n * @param data [Array]\r\n * @param options [map]\r\n */\r\nfunction formatList(data, options) {\r\n  var list = {L: []};\r\n  for (var i = 0; i < data.length; i++) {\r\n    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));\r\n  }\r\n  return list;\r\n}\r\n\r\n/**\r\n * @api private\r\n * @param value [String]\r\n * @param wrapNumbers [Boolean]\r\n */\r\nfunction convertNumber(value, wrapNumbers) {\r\n  return wrapNumbers ? new NumberValue(value) : Number(value);\r\n}\r\n\r\n/**\r\n * @api private\r\n * @param data [map]\r\n * @param options [map]\r\n */\r\nfunction formatMap(data, options) {\r\n  var map = {M: {}};\r\n  for (var key in data) {\r\n    var formatted = AWS.DynamoDB.Converter.input(data[key], options);\r\n    if (formatted !== void 0) {\r\n      map['M'][key] = formatted;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nfunction formatSet(data, options) {\r\n  options = options || {};\r\n  var values = data.values;\r\n  if (options.convertEmptyValues) {\r\n    values = filterEmptySetValues(data);\r\n    if (values.length === 0) {\r\n      return AWS.DynamoDB.Converter.input(null);\r\n    }\r\n  }\r\n\r\n  var map = {};\r\n  switch (data.type) {\r\n    case 'String': map['SS'] = values; break;\r\n    case 'Binary': map['BS'] = values; break;\r\n    case 'Number': map['NS'] = values.map(function (value) {\r\n      return value.toString();\r\n    });\r\n  }\r\n  return map;\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nfunction filterEmptySetValues(set) {\r\n    var nonEmptyValues = [];\r\n    var potentiallyEmptyTypes = {\r\n        String: true,\r\n        Binary: true,\r\n        Number: false\r\n    };\r\n    if (potentiallyEmptyTypes[set.type]) {\r\n        for (var i = 0; i < set.values.length; i++) {\r\n            if (set.values[i].length === 0) {\r\n                continue;\r\n            }\r\n            nonEmptyValues.push(set.values[i]);\r\n        }\r\n\r\n        return nonEmptyValues;\r\n    }\r\n\r\n    return set.values;\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nmodule.exports = AWS.DynamoDB.Converter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}