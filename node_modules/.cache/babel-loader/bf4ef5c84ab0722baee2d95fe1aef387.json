{"ast":null,"code":"require(\"core-js/modules/es.typed-array.find-last.js\");\nrequire(\"core-js/modules/es.typed-array.find-last-index.js\");\nvar util = require('../core').util;\nvar toBuffer = util.buffer.toBuffer;\n\n/**\r\n * A lossless representation of a signed, 64-bit integer. Instances of this\r\n * class may be used in arithmetic expressions as if they were numeric\r\n * primitives, but the binary representation will be preserved unchanged as the\r\n * `bytes` property of the object. The bytes should be encoded as big-endian,\r\n * two's complement integers.\r\n * @param {Buffer} bytes\r\n *\r\n * @api private\r\n */\nfunction Int64(bytes) {\n  if (bytes.length !== 8) {\n    throw new Error('Int64 buffers must be exactly 8 bytes');\n  }\n  if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);\n  this.bytes = bytes;\n}\n\n/**\r\n * @param {number} number\r\n * @returns {Int64}\r\n *\r\n * @api private\r\n */\nInt64.fromNumber = function (number) {\n  if (number > 9223372036854775807 || number < -9223372036854775808) {\n    throw new Error(number + ' is too large (or, if negative, too small) to represent as an Int64');\n  }\n  var bytes = new Uint8Array(8);\n  for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n    bytes[i] = remaining;\n  }\n  if (number < 0) {\n    negate(bytes);\n  }\n  return new Int64(bytes);\n};\n\n/**\r\n * @returns {number}\r\n *\r\n * @api private\r\n */\nInt64.prototype.valueOf = function () {\n  var bytes = this.bytes.slice(0);\n  var negative = bytes[0] & 128;\n  if (negative) {\n    negate(bytes);\n  }\n  return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);\n};\nInt64.prototype.toString = function () {\n  return String(this.valueOf());\n};\n\n/**\r\n * @param {Buffer} bytes\r\n *\r\n * @api private\r\n */\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xFF;\n  }\n  for (var i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) {\n      break;\n    }\n  }\n}\n\n/**\r\n * @api private\r\n */\nmodule.exports = {\n  Int64: Int64\n};","map":{"version":3,"names":["util","require","toBuffer","buffer","Int64","bytes","length","Error","Buffer","isBuffer","fromNumber","number","Uint8Array","i","remaining","Math","abs","round","negate","prototype","valueOf","slice","negative","parseInt","toString","String","module","exports"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/event-stream/int64.js"],"sourcesContent":["var util = require('../core').util;\r\nvar toBuffer = util.buffer.toBuffer;\r\n\r\n/**\r\n * A lossless representation of a signed, 64-bit integer. Instances of this\r\n * class may be used in arithmetic expressions as if they were numeric\r\n * primitives, but the binary representation will be preserved unchanged as the\r\n * `bytes` property of the object. The bytes should be encoded as big-endian,\r\n * two's complement integers.\r\n * @param {Buffer} bytes\r\n *\r\n * @api private\r\n */\r\nfunction Int64(bytes) {\r\n    if (bytes.length !== 8) {\r\n        throw new Error('Int64 buffers must be exactly 8 bytes');\r\n    }\r\n    if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);\r\n\r\n    this.bytes = bytes;\r\n}\r\n\r\n/**\r\n * @param {number} number\r\n * @returns {Int64}\r\n *\r\n * @api private\r\n */\r\nInt64.fromNumber = function(number) {\r\n    if (number > 9223372036854775807 || number < -9223372036854775808) {\r\n        throw new Error(\r\n            number + ' is too large (or, if negative, too small) to represent as an Int64'\r\n        );\r\n    }\r\n\r\n    var bytes = new Uint8Array(8);\r\n    for (\r\n        var i = 7, remaining = Math.abs(Math.round(number));\r\n        i > -1 && remaining > 0;\r\n        i--, remaining /= 256\r\n    ) {\r\n        bytes[i] = remaining;\r\n    }\r\n\r\n    if (number < 0) {\r\n        negate(bytes);\r\n    }\r\n\r\n    return new Int64(bytes);\r\n};\r\n\r\n/**\r\n * @returns {number}\r\n *\r\n * @api private\r\n */\r\nInt64.prototype.valueOf = function() {\r\n    var bytes = this.bytes.slice(0);\r\n    var negative = bytes[0] & 128;\r\n    if (negative) {\r\n        negate(bytes);\r\n    }\r\n\r\n    return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);\r\n};\r\n\r\nInt64.prototype.toString = function() {\r\n    return String(this.valueOf());\r\n};\r\n\r\n/**\r\n * @param {Buffer} bytes\r\n *\r\n * @api private\r\n */\r\nfunction negate(bytes) {\r\n    for (var i = 0; i < 8; i++) {\r\n        bytes[i] ^= 0xFF;\r\n    }\r\n    for (var i = 7; i > -1; i--) {\r\n        bytes[i]++;\r\n        if (bytes[i] !== 0) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @api private\r\n */\r\nmodule.exports = {\r\n    Int64: Int64\r\n};\r\n"],"mappings":";;AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACD,IAAI;AAClC,IAAIE,QAAQ,GAAGF,IAAI,CAACG,MAAM,CAACD,QAAQ;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,KAAK,CAACC,KAAK,EAAE;EAClB,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;EAC5D;EACA,IAAI,CAACP,IAAI,CAACQ,MAAM,CAACC,QAAQ,CAACJ,KAAK,CAAC,EAAEA,KAAK,GAAGH,QAAQ,CAACG,KAAK,CAAC;EAEzD,IAAI,CAACA,KAAK,GAAGA,KAAK;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAD,KAAK,CAACM,UAAU,GAAG,UAASC,MAAM,EAAE;EAChC,IAAIA,MAAM,GAAG,mBAAmB,IAAIA,MAAM,GAAG,CAAC,mBAAmB,EAAE;IAC/D,MAAM,IAAIJ,KAAK,CACXI,MAAM,GAAG,qEAAqE,CACjF;EACL;EAEA,IAAIN,KAAK,GAAG,IAAIO,UAAU,CAAC,CAAC,CAAC;EAC7B,KACI,IAAIC,CAAC,GAAG,CAAC,EAAEC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAACN,MAAM,CAAC,CAAC,EACnDE,CAAC,GAAG,CAAC,CAAC,IAAIC,SAAS,GAAG,CAAC,EACvBD,CAAC,EAAE,EAAEC,SAAS,IAAI,GAAG,EACvB;IACET,KAAK,CAACQ,CAAC,CAAC,GAAGC,SAAS;EACxB;EAEA,IAAIH,MAAM,GAAG,CAAC,EAAE;IACZO,MAAM,CAACb,KAAK,CAAC;EACjB;EAEA,OAAO,IAAID,KAAK,CAACC,KAAK,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAD,KAAK,CAACe,SAAS,CAACC,OAAO,GAAG,YAAW;EACjC,IAAIf,KAAK,GAAG,IAAI,CAACA,KAAK,CAACgB,KAAK,CAAC,CAAC,CAAC;EAC/B,IAAIC,QAAQ,GAAGjB,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;EAC7B,IAAIiB,QAAQ,EAAE;IACVJ,MAAM,CAACb,KAAK,CAAC;EACjB;EAEA,OAAOkB,QAAQ,CAAClB,KAAK,CAACmB,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,IAAIF,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACpE,CAAC;AAEDlB,KAAK,CAACe,SAAS,CAACK,QAAQ,GAAG,YAAW;EAClC,OAAOC,MAAM,CAAC,IAAI,CAACL,OAAO,EAAE,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASF,MAAM,CAACb,KAAK,EAAE;EACnB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxBR,KAAK,CAACQ,CAAC,CAAC,IAAI,IAAI;EACpB;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzBR,KAAK,CAACQ,CAAC,CAAC,EAAE;IACV,IAAIR,KAAK,CAACQ,CAAC,CAAC,KAAK,CAAC,EAAE;MAChB;IACJ;EACJ;AACJ;;AAEA;AACA;AACA;AACAa,MAAM,CAACC,OAAO,GAAG;EACbvB,KAAK,EAAEA;AACX,CAAC"},"metadata":{},"sourceType":"script"}