{"ast":null,"code":"import { defineComponent, h } from 'vue';\nimport { Calendar } from '@fullcalendar/core';\nimport { OPTION_IS_COMPLEX } from './options';\nimport { shallowCopy, mapHash } from './utils';\nimport { wrapVDomGenerator, createVueContentTypePlugin } from './custom-content-type';\nconst FullCalendar = defineComponent({\n  props: {\n    options: Object\n  },\n  data: initData,\n  render() {\n    return h('div', {\n      // when renderId is changed, Vue will trigger a real-DOM async rerender, calling beforeUpdate/updated\n      attrs: {\n        'data-fc-render-id': this.renderId\n      }\n    });\n  },\n  mounted() {\n    // store internal data (slotOptions, calendar)\n    // https://github.com/vuejs/vue/issues/1988#issuecomment-163013818\n    this.slotOptions = mapHash(this.$slots, wrapVDomGenerator); // needed for buildOptions\n    let calendarOptions = this.buildOptions(this.options, this.$.appContext);\n    let calendar = new Calendar(this.$el, calendarOptions);\n    this.calendar = calendar;\n    calendar.render();\n  },\n  methods: {\n    getApi,\n    buildOptions\n  },\n  beforeUpdate() {\n    this.getApi().resumeRendering(); // the watcher handlers paused it\n  },\n\n  beforeUnmount() {\n    this.getApi().destroy();\n  },\n  watch: buildWatchers()\n});\nexport default FullCalendar;\nfunction initData() {\n  return {\n    renderId: 0\n  };\n}\nfunction buildOptions(suppliedOptions, appContext) {\n  suppliedOptions = suppliedOptions || {};\n  return {\n    ...this.slotOptions,\n    ...suppliedOptions,\n    plugins: (suppliedOptions.plugins || []).concat([createVueContentTypePlugin(appContext)])\n  };\n}\nfunction getApi() {\n  return this.calendar;\n}\nfunction buildWatchers() {\n  let watchers = {\n    // watches changes of ALL options and their nested objects,\n    // but this is only a means to be notified of top-level non-complex options changes.\n    options: {\n      deep: true,\n      handler(options) {\n        let calendar = this.getApi();\n        calendar.pauseRendering();\n        let calendarOptions = this.buildOptions(options, this.$.appContext);\n        calendar.resetOptions(calendarOptions);\n        this.renderId++; // will queue a rerender\n      }\n    }\n  };\n\n  for (let complexOptionName in OPTION_IS_COMPLEX) {\n    // handlers called when nested objects change\n    watchers[`options.${complexOptionName}`] = {\n      deep: true,\n      handler(val) {\n        // unfortunately the handler is called with undefined if new props were set, but the complex one wasn't ever set\n        if (val !== undefined) {\n          let calendar = this.getApi();\n          calendar.pauseRendering();\n          calendar.resetOptions({\n            // the only reason we shallow-copy is to trick FC into knowing there's a nested change.\n            // TODO: future versions of FC will more gracefully handle event option-changes that are same-reference.\n            [complexOptionName]: shallowCopy(val)\n          }, true);\n          this.renderId++; // will queue a rerender\n        }\n      }\n    };\n  }\n\n  return watchers;\n}","map":{"version":3,"mappings":"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","names":["defineComponent","h","Calendar","OPTION_IS_COMPLEX","shallowCopy","mapHash","wrapVDomGenerator","createVueContentTypePlugin","FullCalendar","props","options","Object","data","initData","render","attrs","renderId","mounted","slotOptions","$slots","calendarOptions","buildOptions","$","appContext","calendar","$el","methods","getApi","beforeUpdate","resumeRendering","beforeUnmount","destroy","watch","buildWatchers","suppliedOptions","plugins","concat","watchers","deep","handler","pauseRendering","resetOptions","complexOptionName","val","undefined"],"sourceRoot":"","sources":["../src/FullCalendar.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}