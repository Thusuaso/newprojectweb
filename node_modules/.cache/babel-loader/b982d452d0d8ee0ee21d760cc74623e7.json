{"ast":null,"code":"var AWS = require('../core');\nvar CognitoIdentity = require('../../clients/cognitoidentity');\nvar STS = require('../../clients/sts');\n\n/**\r\n * Represents credentials retrieved from STS Web Identity Federation using\r\n * the Amazon Cognito Identity service.\r\n *\r\n * By default this provider gets credentials using the\r\n * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which\r\n * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito\r\n * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to\r\n * obtain an `IdentityId`. If the identity or identity pool is not configured in\r\n * the Amazon Cognito Console to use IAM roles with the appropriate permissions,\r\n * then additionally a `RoleArn` is required containing the ARN of the IAM trust\r\n * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`\r\n * is provided, then this provider gets credentials using the\r\n * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an\r\n * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.\r\n *\r\n * In addition, if this credential provider is used to provide authenticated\r\n * login, the `Logins` map may be set to the tokens provided by the respective\r\n * identity providers. See {constructor} for an example on creating a credentials\r\n * object with proper property values.\r\n *\r\n * ## Refreshing Credentials from Identity Service\r\n *\r\n * In addition to AWS credentials expiring after a given amount of time, the\r\n * login token from the identity provider will also expire. Once this token\r\n * expires, it will not be usable to refresh AWS credentials, and another\r\n * token will be needed. The SDK does not manage refreshing of the token value,\r\n * but this can be done through a \"refresh token\" supported by most identity\r\n * providers. Consult the documentation for the identity provider for refreshing\r\n * tokens. Once the refreshed token is acquired, you should make sure to update\r\n * this new token in the credentials object's {params} property. The following\r\n * code will update the WebIdentityToken, assuming you have retrieved an updated\r\n * token from the identity provider:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;\r\n * ```\r\n *\r\n * Future calls to `credentials.refresh()` will now use the new token.\r\n *\r\n * @!attribute params\r\n *   @return [map] the map of params passed to\r\n *     {AWS.CognitoIdentity.getId},\r\n *     {AWS.CognitoIdentity.getOpenIdToken}, and\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the\r\n *     `params.WebIdentityToken` property.\r\n * @!attribute data\r\n *   @return [map] the raw data response from the call to\r\n *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get\r\n *     access to other properties from the response.\r\n * @!attribute identityId\r\n *   @return [String] the Cognito ID returned by the last call to\r\n *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual\r\n *     final resolved identity ID from Amazon Cognito.\r\n */\nAWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * @api private\r\n   */\n  localStorageKey: {\n    id: 'aws.cognito.identity-id.',\n    providers: 'aws.cognito.identity-providers.'\n  },\n  /**\r\n   * Creates a new credentials object.\r\n   * @example Creating a new credentials object\r\n   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n   *\r\n   *     // either IdentityPoolId or IdentityId is required\r\n   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)\r\n   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity\r\n   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)\r\n   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',\r\n   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'\r\n   *\r\n   *     // optional, only necessary when the identity pool is not configured\r\n   *     // to use IAM roles in the Amazon Cognito Console\r\n   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',\r\n   *\r\n   *     // optional tokens, used for authenticated login\r\n   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)\r\n   *     Logins: {\r\n   *       'graph.facebook.com': 'FBTOKEN',\r\n   *       'www.amazon.com': 'AMAZONTOKEN',\r\n   *       'accounts.google.com': 'GOOGLETOKEN',\r\n   *       'api.twitter.com': 'TWITTERTOKEN',\r\n   *       'www.digits.com': 'DIGITSTOKEN'\r\n   *     },\r\n   *\r\n   *     // optional name, defaults to web-identity\r\n   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleSessionName: 'web',\r\n   *\r\n   *     // optional, only necessary when application runs in a browser\r\n   *     // and multiple users are signed in at once, used for caching\r\n   *     LoginId: 'example@gmail.com'\r\n   *\r\n   *   }, {\r\n   *      // optionally provide configuration to apply to the underlying service clients\r\n   *      // if configuration is not provided, then configuration will be pulled from AWS.config\r\n   *\r\n   *      // region should match the region your identity pool is located in\r\n   *      region: 'us-east-1',\r\n   *\r\n   *      // specify timeout options\r\n   *      httpOptions: {\r\n   *        timeout: 100\r\n   *      }\r\n   *   });\r\n   * @see AWS.CognitoIdentity.getId\r\n   * @see AWS.CognitoIdentity.getCredentialsForIdentity\r\n   * @see AWS.STS.assumeRoleWithWebIdentity\r\n   * @see AWS.CognitoIdentity.getOpenIdToken\r\n   * @see AWS.Config\r\n   * @note If a region is not provided in the global AWS.config, or\r\n   *   specified in the `clientConfig` to the CognitoIdentityCredentials\r\n   *   constructor, you may encounter a 'Missing credentials in config' error\r\n   *   when calling making a service call.\r\n   */\n  constructor: function CognitoIdentityCredentials(params, clientConfig) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.params = params;\n    this.data = null;\n    this._identityId = null;\n    this._clientConfig = AWS.util.copy(clientConfig || {});\n    this.loadCachedId();\n    var self = this;\n    Object.defineProperty(this, 'identityId', {\n      get: function () {\n        self.loadCachedId();\n        return self._identityId || self.params.IdentityId;\n      },\n      set: function (identityId) {\n        self._identityId = identityId;\n      }\n    });\n  },\n  /**\r\n   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},\r\n   * or {AWS.STS.assumeRoleWithWebIdentity}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see AWS.Credentials.get\r\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n  /**\r\n   * @api private\r\n   * @param callback\r\n   */\n  load: function load(callback) {\n    var self = this;\n    self.createClients();\n    self.data = null;\n    self._identityId = null;\n    self.getId(function (err) {\n      if (!err) {\n        if (!self.params.RoleArn) {\n          self.getCredentialsForIdentity(callback);\n        } else {\n          self.getCredentialsFromSTS(callback);\n        }\n      } else {\n        self.clearIdOnNotAuthorized(err);\n        callback(err);\n      }\n    });\n  },\n  /**\r\n   * Clears the cached Cognito ID associated with the currently configured\r\n   * identity pool ID. Use this to manually invalidate your cache if\r\n   * the identity pool ID was deleted.\r\n   */\n  clearCachedId: function clearCache() {\n    this._identityId = null;\n    delete this.params.IdentityId;\n    var poolId = this.params.IdentityPoolId;\n    var loginId = this.params.LoginId || '';\n    delete this.storage[this.localStorageKey.id + poolId + loginId];\n    delete this.storage[this.localStorageKey.providers + poolId + loginId];\n  },\n  /**\r\n   * @api private\r\n   */\n  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {\n    var self = this;\n    if (err.code == 'NotAuthorizedException') {\n      self.clearCachedId();\n    }\n  },\n  /**\r\n   * Retrieves a Cognito ID, loading from cache if it was already retrieved\r\n   * on this device.\r\n   *\r\n   * @callback callback function(err, identityId)\r\n   *   @param err [Error, null] an error object if the call failed or null if\r\n   *     it succeeded.\r\n   *   @param identityId [String, null] if successful, the callback will return\r\n   *     the Cognito ID.\r\n   * @note If not loaded explicitly, the Cognito ID is loaded and stored in\r\n   *   localStorage in the browser environment of a device.\r\n   * @api private\r\n   */\n  getId: function getId(callback) {\n    var self = this;\n    if (typeof self.params.IdentityId === 'string') {\n      return callback(null, self.params.IdentityId);\n    }\n    self.cognito.getId(function (err, data) {\n      if (!err && data.IdentityId) {\n        self.params.IdentityId = data.IdentityId;\n        callback(null, data.IdentityId);\n      } else {\n        callback(err);\n      }\n    });\n  },\n  /**\r\n   * @api private\r\n   */\n  loadCredentials: function loadCredentials(data, credentials) {\n    if (!data || !credentials) return;\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n  },\n  /**\r\n   * @api private\r\n   */\n  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {\n    var self = this;\n    self.cognito.getCredentialsForIdentity(function (err, data) {\n      if (!err) {\n        self.cacheId(data);\n        self.data = data;\n        self.loadCredentials(self.data, self);\n      } else {\n        self.clearIdOnNotAuthorized(err);\n      }\n      callback(err);\n    });\n  },\n  /**\r\n   * @api private\r\n   */\n  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {\n    var self = this;\n    self.cognito.getOpenIdToken(function (err, data) {\n      if (!err) {\n        self.cacheId(data);\n        self.params.WebIdentityToken = data.Token;\n        self.webIdentityCredentials.refresh(function (webErr) {\n          if (!webErr) {\n            self.data = self.webIdentityCredentials.data;\n            self.sts.credentialsFrom(self.data, self);\n          }\n          callback(webErr);\n        });\n      } else {\n        self.clearIdOnNotAuthorized(err);\n        callback(err);\n      }\n    });\n  },\n  /**\r\n   * @api private\r\n   */\n  loadCachedId: function loadCachedId() {\n    var self = this;\n\n    // in the browser we source default IdentityId from localStorage\n    if (AWS.util.isBrowser() && !self.params.IdentityId) {\n      var id = self.getStorage('id');\n      if (id && self.params.Logins) {\n        var actualProviders = Object.keys(self.params.Logins);\n        var cachedProviders = (self.getStorage('providers') || '').split(',');\n\n        // only load ID if at least one provider used this ID before\n        var intersect = cachedProviders.filter(function (n) {\n          return actualProviders.indexOf(n) !== -1;\n        });\n        if (intersect.length !== 0) {\n          self.params.IdentityId = id;\n        }\n      } else if (id) {\n        self.params.IdentityId = id;\n      }\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  createClients: function () {\n    var clientConfig = this._clientConfig;\n    this.webIdentityCredentials = this.webIdentityCredentials || new AWS.WebIdentityCredentials(this.params, clientConfig);\n    if (!this.cognito) {\n      var cognitoConfig = AWS.util.merge({}, clientConfig);\n      cognitoConfig.params = this.params;\n      this.cognito = new CognitoIdentity(cognitoConfig);\n    }\n    this.sts = this.sts || new STS(clientConfig);\n  },\n  /**\r\n   * @api private\r\n   */\n  cacheId: function cacheId(data) {\n    this._identityId = data.IdentityId;\n    this.params.IdentityId = this._identityId;\n\n    // cache this IdentityId in browser localStorage if possible\n    if (AWS.util.isBrowser()) {\n      this.setStorage('id', data.IdentityId);\n      if (this.params.Logins) {\n        this.setStorage('providers', Object.keys(this.params.Logins).join(','));\n      }\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  getStorage: function getStorage(key) {\n    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];\n  },\n  /**\r\n   * @api private\r\n   */\n  setStorage: function setStorage(key, val) {\n    try {\n      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;\n    } catch (_) {}\n  },\n  /**\r\n   * @api private\r\n   */\n  storage: function () {\n    try {\n      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ? window.localStorage : {};\n\n      // Test set/remove which would throw an error in Safari's private browsing\n      storage['aws.test-storage'] = 'foobar';\n      delete storage['aws.test-storage'];\n      return storage;\n    } catch (_) {\n      return {};\n    }\n  }()\n});","map":{"version":3,"names":["AWS","require","CognitoIdentity","STS","CognitoIdentityCredentials","util","inherit","Credentials","localStorageKey","id","providers","constructor","params","clientConfig","call","expired","data","_identityId","_clientConfig","copy","loadCachedId","self","Object","defineProperty","get","IdentityId","set","identityId","refresh","callback","coalesceRefresh","fn","load","createClients","getId","err","RoleArn","getCredentialsForIdentity","getCredentialsFromSTS","clearIdOnNotAuthorized","clearCachedId","clearCache","poolId","IdentityPoolId","loginId","LoginId","storage","code","cognito","loadCredentials","credentials","accessKeyId","AccessKeyId","secretAccessKey","SecretKey","sessionToken","SessionToken","expireTime","Expiration","cacheId","getOpenIdToken","WebIdentityToken","Token","webIdentityCredentials","webErr","sts","credentialsFrom","isBrowser","getStorage","Logins","actualProviders","keys","cachedProviders","split","intersect","filter","n","indexOf","length","WebIdentityCredentials","cognitoConfig","merge","setStorage","join","key","val","_","window","localStorage"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/credentials/cognito_identity_credentials.js"],"sourcesContent":["var AWS = require('../core');\r\nvar CognitoIdentity = require('../../clients/cognitoidentity');\r\nvar STS = require('../../clients/sts');\r\n\r\n/**\r\n * Represents credentials retrieved from STS Web Identity Federation using\r\n * the Amazon Cognito Identity service.\r\n *\r\n * By default this provider gets credentials using the\r\n * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which\r\n * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito\r\n * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to\r\n * obtain an `IdentityId`. If the identity or identity pool is not configured in\r\n * the Amazon Cognito Console to use IAM roles with the appropriate permissions,\r\n * then additionally a `RoleArn` is required containing the ARN of the IAM trust\r\n * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`\r\n * is provided, then this provider gets credentials using the\r\n * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an\r\n * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.\r\n *\r\n * In addition, if this credential provider is used to provide authenticated\r\n * login, the `Logins` map may be set to the tokens provided by the respective\r\n * identity providers. See {constructor} for an example on creating a credentials\r\n * object with proper property values.\r\n *\r\n * ## Refreshing Credentials from Identity Service\r\n *\r\n * In addition to AWS credentials expiring after a given amount of time, the\r\n * login token from the identity provider will also expire. Once this token\r\n * expires, it will not be usable to refresh AWS credentials, and another\r\n * token will be needed. The SDK does not manage refreshing of the token value,\r\n * but this can be done through a \"refresh token\" supported by most identity\r\n * providers. Consult the documentation for the identity provider for refreshing\r\n * tokens. Once the refreshed token is acquired, you should make sure to update\r\n * this new token in the credentials object's {params} property. The following\r\n * code will update the WebIdentityToken, assuming you have retrieved an updated\r\n * token from the identity provider:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;\r\n * ```\r\n *\r\n * Future calls to `credentials.refresh()` will now use the new token.\r\n *\r\n * @!attribute params\r\n *   @return [map] the map of params passed to\r\n *     {AWS.CognitoIdentity.getId},\r\n *     {AWS.CognitoIdentity.getOpenIdToken}, and\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the\r\n *     `params.WebIdentityToken` property.\r\n * @!attribute data\r\n *   @return [map] the raw data response from the call to\r\n *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or\r\n *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get\r\n *     access to other properties from the response.\r\n * @!attribute identityId\r\n *   @return [String] the Cognito ID returned by the last call to\r\n *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual\r\n *     final resolved identity ID from Amazon Cognito.\r\n */\r\nAWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {\r\n  /**\r\n   * @api private\r\n   */\r\n  localStorageKey: {\r\n    id: 'aws.cognito.identity-id.',\r\n    providers: 'aws.cognito.identity-providers.'\r\n  },\r\n\r\n  /**\r\n   * Creates a new credentials object.\r\n   * @example Creating a new credentials object\r\n   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n   *\r\n   *     // either IdentityPoolId or IdentityId is required\r\n   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)\r\n   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity\r\n   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)\r\n   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',\r\n   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'\r\n   *\r\n   *     // optional, only necessary when the identity pool is not configured\r\n   *     // to use IAM roles in the Amazon Cognito Console\r\n   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',\r\n   *\r\n   *     // optional tokens, used for authenticated login\r\n   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)\r\n   *     Logins: {\r\n   *       'graph.facebook.com': 'FBTOKEN',\r\n   *       'www.amazon.com': 'AMAZONTOKEN',\r\n   *       'accounts.google.com': 'GOOGLETOKEN',\r\n   *       'api.twitter.com': 'TWITTERTOKEN',\r\n   *       'www.digits.com': 'DIGITSTOKEN'\r\n   *     },\r\n   *\r\n   *     // optional name, defaults to web-identity\r\n   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)\r\n   *     RoleSessionName: 'web',\r\n   *\r\n   *     // optional, only necessary when application runs in a browser\r\n   *     // and multiple users are signed in at once, used for caching\r\n   *     LoginId: 'example@gmail.com'\r\n   *\r\n   *   }, {\r\n   *      // optionally provide configuration to apply to the underlying service clients\r\n   *      // if configuration is not provided, then configuration will be pulled from AWS.config\r\n   *\r\n   *      // region should match the region your identity pool is located in\r\n   *      region: 'us-east-1',\r\n   *\r\n   *      // specify timeout options\r\n   *      httpOptions: {\r\n   *        timeout: 100\r\n   *      }\r\n   *   });\r\n   * @see AWS.CognitoIdentity.getId\r\n   * @see AWS.CognitoIdentity.getCredentialsForIdentity\r\n   * @see AWS.STS.assumeRoleWithWebIdentity\r\n   * @see AWS.CognitoIdentity.getOpenIdToken\r\n   * @see AWS.Config\r\n   * @note If a region is not provided in the global AWS.config, or\r\n   *   specified in the `clientConfig` to the CognitoIdentityCredentials\r\n   *   constructor, you may encounter a 'Missing credentials in config' error\r\n   *   when calling making a service call.\r\n   */\r\n  constructor: function CognitoIdentityCredentials(params, clientConfig) {\r\n    AWS.Credentials.call(this);\r\n    this.expired = true;\r\n    this.params = params;\r\n    this.data = null;\r\n    this._identityId = null;\r\n    this._clientConfig = AWS.util.copy(clientConfig || {});\r\n    this.loadCachedId();\r\n    var self = this;\r\n    Object.defineProperty(this, 'identityId', {\r\n      get: function() {\r\n        self.loadCachedId();\r\n        return self._identityId || self.params.IdentityId;\r\n      },\r\n      set: function(identityId) {\r\n        self._identityId = identityId;\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},\r\n   * or {AWS.STS.assumeRoleWithWebIdentity}.\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see AWS.Credentials.get\r\n   */\r\n  refresh: function refresh(callback) {\r\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   * @param callback\r\n   */\r\n  load: function load(callback) {\r\n    var self = this;\r\n    self.createClients();\r\n    self.data = null;\r\n    self._identityId = null;\r\n    self.getId(function(err) {\r\n      if (!err) {\r\n        if (!self.params.RoleArn) {\r\n          self.getCredentialsForIdentity(callback);\r\n        } else {\r\n          self.getCredentialsFromSTS(callback);\r\n        }\r\n      } else {\r\n        self.clearIdOnNotAuthorized(err);\r\n        callback(err);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Clears the cached Cognito ID associated with the currently configured\r\n   * identity pool ID. Use this to manually invalidate your cache if\r\n   * the identity pool ID was deleted.\r\n   */\r\n  clearCachedId: function clearCache() {\r\n    this._identityId = null;\r\n    delete this.params.IdentityId;\r\n\r\n    var poolId = this.params.IdentityPoolId;\r\n    var loginId = this.params.LoginId || '';\r\n    delete this.storage[this.localStorageKey.id + poolId + loginId];\r\n    delete this.storage[this.localStorageKey.providers + poolId + loginId];\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {\r\n    var self = this;\r\n    if (err.code == 'NotAuthorizedException') {\r\n      self.clearCachedId();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Retrieves a Cognito ID, loading from cache if it was already retrieved\r\n   * on this device.\r\n   *\r\n   * @callback callback function(err, identityId)\r\n   *   @param err [Error, null] an error object if the call failed or null if\r\n   *     it succeeded.\r\n   *   @param identityId [String, null] if successful, the callback will return\r\n   *     the Cognito ID.\r\n   * @note If not loaded explicitly, the Cognito ID is loaded and stored in\r\n   *   localStorage in the browser environment of a device.\r\n   * @api private\r\n   */\r\n  getId: function getId(callback) {\r\n    var self = this;\r\n    if (typeof self.params.IdentityId === 'string') {\r\n      return callback(null, self.params.IdentityId);\r\n    }\r\n\r\n    self.cognito.getId(function(err, data) {\r\n      if (!err && data.IdentityId) {\r\n        self.params.IdentityId = data.IdentityId;\r\n        callback(null, data.IdentityId);\r\n      } else {\r\n        callback(err);\r\n      }\r\n    });\r\n  },\r\n\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  loadCredentials: function loadCredentials(data, credentials) {\r\n    if (!data || !credentials) return;\r\n    credentials.expired = false;\r\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\r\n    credentials.secretAccessKey = data.Credentials.SecretKey;\r\n    credentials.sessionToken = data.Credentials.SessionToken;\r\n    credentials.expireTime = data.Credentials.Expiration;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {\r\n    var self = this;\r\n    self.cognito.getCredentialsForIdentity(function(err, data) {\r\n      if (!err) {\r\n        self.cacheId(data);\r\n        self.data = data;\r\n        self.loadCredentials(self.data, self);\r\n      } else {\r\n        self.clearIdOnNotAuthorized(err);\r\n      }\r\n      callback(err);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {\r\n    var self = this;\r\n    self.cognito.getOpenIdToken(function(err, data) {\r\n      if (!err) {\r\n        self.cacheId(data);\r\n        self.params.WebIdentityToken = data.Token;\r\n        self.webIdentityCredentials.refresh(function(webErr) {\r\n          if (!webErr) {\r\n            self.data = self.webIdentityCredentials.data;\r\n            self.sts.credentialsFrom(self.data, self);\r\n          }\r\n          callback(webErr);\r\n        });\r\n      } else {\r\n        self.clearIdOnNotAuthorized(err);\r\n        callback(err);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  loadCachedId: function loadCachedId() {\r\n    var self = this;\r\n\r\n    // in the browser we source default IdentityId from localStorage\r\n    if (AWS.util.isBrowser() && !self.params.IdentityId) {\r\n      var id = self.getStorage('id');\r\n      if (id && self.params.Logins) {\r\n        var actualProviders = Object.keys(self.params.Logins);\r\n        var cachedProviders =\r\n          (self.getStorage('providers') || '').split(',');\r\n\r\n        // only load ID if at least one provider used this ID before\r\n        var intersect = cachedProviders.filter(function(n) {\r\n          return actualProviders.indexOf(n) !== -1;\r\n        });\r\n        if (intersect.length !== 0) {\r\n          self.params.IdentityId = id;\r\n        }\r\n      } else if (id) {\r\n        self.params.IdentityId = id;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  createClients: function() {\r\n    var clientConfig = this._clientConfig;\r\n    this.webIdentityCredentials = this.webIdentityCredentials ||\r\n      new AWS.WebIdentityCredentials(this.params, clientConfig);\r\n    if (!this.cognito) {\r\n      var cognitoConfig = AWS.util.merge({}, clientConfig);\r\n      cognitoConfig.params = this.params;\r\n      this.cognito = new CognitoIdentity(cognitoConfig);\r\n    }\r\n    this.sts = this.sts || new STS(clientConfig);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  cacheId: function cacheId(data) {\r\n    this._identityId = data.IdentityId;\r\n    this.params.IdentityId = this._identityId;\r\n\r\n    // cache this IdentityId in browser localStorage if possible\r\n    if (AWS.util.isBrowser()) {\r\n      this.setStorage('id', data.IdentityId);\r\n\r\n      if (this.params.Logins) {\r\n        this.setStorage('providers', Object.keys(this.params.Logins).join(','));\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getStorage: function getStorage(key) {\r\n    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  setStorage: function setStorage(key, val) {\r\n    try {\r\n      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;\r\n    } catch (_) {}\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  storage: (function() {\r\n    try {\r\n      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?\r\n          window.localStorage : {};\r\n\r\n      // Test set/remove which would throw an error in Safari's private browsing\r\n      storage['aws.test-storage'] = 'foobar';\r\n      delete storage['aws.test-storage'];\r\n\r\n      return storage;\r\n    } catch (_) {\r\n      return {};\r\n    }\r\n  })()\r\n});\r\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC5B,IAAIC,eAAe,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AAC9D,IAAIE,GAAG,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,GAAG,CAACI,0BAA0B,GAAGJ,GAAG,CAACK,IAAI,CAACC,OAAO,CAACN,GAAG,CAACO,WAAW,EAAE;EACjE;AACF;AACA;EACEC,eAAe,EAAE;IACfC,EAAE,EAAE,0BAA0B;IAC9BC,SAAS,EAAE;EACb,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASP,0BAA0B,CAACQ,MAAM,EAAEC,YAAY,EAAE;IACrEb,GAAG,CAACO,WAAW,CAACO,IAAI,CAAC,IAAI,CAAC;IAC1B,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,aAAa,GAAGlB,GAAG,CAACK,IAAI,CAACc,IAAI,CAACN,YAAY,IAAI,CAAC,CAAC,CAAC;IACtD,IAAI,CAA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"},"metadata":{},"sourceType":"script"}