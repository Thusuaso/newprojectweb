{"ast":null,"code":"var util = require('../core').util;\nvar typeOf = require('./types').typeOf;\n\n/**\r\n * @api private\r\n */\nvar memberTypeToSetType = {\n  'String': 'String',\n  'Number': 'Number',\n  'NumberValue': 'Number',\n  'Binary': 'Binary'\n};\n\n/**\r\n * @api private\r\n */\nvar DynamoDBSet = util.inherit({\n  constructor: function Set(list, options) {\n    options = options || {};\n    this.wrapperName = 'Set';\n    this.initialize(list, options.validate);\n  },\n  initialize: function (list, validate) {\n    var self = this;\n    self.values = [].concat(list);\n    self.detectType();\n    if (validate) {\n      self.validate();\n    }\n  },\n  detectType: function () {\n    this.type = memberTypeToSetType[typeOf(this.values[0])];\n    if (!this.type) {\n      throw util.error(new Error(), {\n        code: 'InvalidSetType',\n        message: 'Sets can contain string, number, or binary values'\n      });\n    }\n  },\n  validate: function () {\n    var self = this;\n    var length = self.values.length;\n    var values = self.values;\n    for (var i = 0; i < length; i++) {\n      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {\n        throw util.error(new Error(), {\n          code: 'InvalidType',\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\n        });\n      }\n    }\n  },\n  /**\r\n   * Render the underlying values only when converting to JSON.\r\n   */\n  toJSON: function () {\n    var self = this;\n    return self.values;\n  }\n});\n\n/**\r\n * @api private\r\n */\nmodule.exports = DynamoDBSet;","map":{"version":3,"names":["util","require","typeOf","memberTypeToSetType","DynamoDBSet","inherit","constructor","Set","list","options","wrapperName","initialize","validate","self","values","concat","detectType","type","error","Error","code","message","length","i","toJSON","module","exports"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/dynamodb/set.js"],"sourcesContent":["var util = require('../core').util;\r\nvar typeOf = require('./types').typeOf;\r\n\r\n/**\r\n * @api private\r\n */\r\nvar memberTypeToSetType = {\r\n  'String': 'String',\r\n  'Number': 'Number',\r\n  'NumberValue': 'Number',\r\n  'Binary': 'Binary'\r\n};\r\n\r\n/**\r\n * @api private\r\n */\r\nvar DynamoDBSet = util.inherit({\r\n\r\n  constructor: function Set(list, options) {\r\n    options = options || {};\r\n    this.wrapperName = 'Set';\r\n    this.initialize(list, options.validate);\r\n  },\r\n\r\n  initialize: function(list, validate) {\r\n    var self = this;\r\n    self.values = [].concat(list);\r\n    self.detectType();\r\n    if (validate) {\r\n      self.validate();\r\n    }\r\n  },\r\n\r\n  detectType: function() {\r\n    this.type = memberTypeToSetType[typeOf(this.values[0])];\r\n    if (!this.type) {\r\n      throw util.error(new Error(), {\r\n        code: 'InvalidSetType',\r\n        message: 'Sets can contain string, number, or binary values'\r\n      });\r\n    }\r\n  },\r\n\r\n  validate: function() {\r\n    var self = this;\r\n    var length = self.values.length;\r\n    var values = self.values;\r\n    for (var i = 0; i < length; i++) {\r\n      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {\r\n        throw util.error(new Error(), {\r\n          code: 'InvalidType',\r\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\r\n        });\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Render the underlying values only when converting to JSON.\r\n   */\r\n  toJSON: function() {\r\n    var self = this;\r\n    return self.values;\r\n  }\r\n\r\n});\r\n\r\n/**\r\n * @api private\r\n */\r\nmodule.exports = DynamoDBSet;\r\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACD,IAAI;AAClC,IAAIE,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACC,MAAM;;AAEtC;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG;EACxB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,aAAa,EAAE,QAAQ;EACvB,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA,IAAIC,WAAW,GAAGJ,IAAI,CAACK,OAAO,CAAC;EAE7BC,WAAW,EAAE,SAASC,GAAG,CAACC,IAAI,EAAEC,OAAO,EAAE;IACvCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,UAAU,CAACH,IAAI,EAAEC,OAAO,CAACG,QAAQ,CAAC;EACzC,CAAC;EAEDD,UAAU,EAAE,UAASH,IAAI,EAAEI,QAAQ,EAAE;IACnC,IAAIC,IAAI,GAAG,IAAI;IACfA,IAAI,CAACC,MAAM,GAAG,EAAE,CAACC,MAAM,CAACP,IAAI,CAAC;IAC7BK,IAAI,CAACG,UAAU,EAAE;IACjB,IAAIJ,QAAQ,EAAE;MACZC,IAAI,CAACD,QAAQ,EAAE;IACjB;EACF,CAAC;EAEDI,UAAU,EAAE,YAAW;IACrB,IAAI,CAACC,IAAI,GAAGd,mBAAmB,CAACD,MAAM,CAAC,IAAI,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,IAAI,CAAC,IAAI,CAACG,IAAI,EAAE;MACd,MAAMjB,IAAI,CAACkB,KAAK,CAAC,IAAIC,KAAK,EAAE,EAAE;QAC5BC,IAAI,EAAE,gBAAgB;QACtBC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAEDT,QAAQ,EAAE,YAAW;IACnB,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIS,MAAM,GAAGT,IAAI,CAACC,MAAM,CAACQ,MAAM;IAC/B,IAAIR,MAAM,GAAGD,IAAI,CAACC,MAAM;IACxB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/B,IAAIpB,mBAAmB,CAACD,MAAM,CAACY,MAAM,CAACS,CAAC,CAAC,CAAC,CAAC,KAAKV,IAAI,CAACI,IAAI,EAAE;QACxD,MAAMjB,IAAI,CAACkB,KAAK,CAAC,IAAIC,KAAK,EAAE,EAAE;UAC5BC,IAAI,EAAE,aAAa;UACnBC,OAAO,EAAER,IAAI,CAACI,IAAI,GAAG,gBAAgB,GAAGf,MAAM,CAACY,MAAM,CAACS,CAAC,CAAC,CAAC,GAAG;QAC9D,CAAC,CAAC;MACJ;IACF;EACF,CAAC;EAED;AACF;AACA;EACEC,MAAM,EAAE,YAAW;IACjB,IAAIX,IAAI,GAAG,IAAI;IACf,OAAOA,IAAI,CAACC,MAAM;EACpB;AAEF,CAAC,CAAC;;AAEF;AACA;AACA;AACAW,MAAM,CAACC,OAAO,GAAGtB,WAAW"},"metadata":{},"sourceType":"script"}