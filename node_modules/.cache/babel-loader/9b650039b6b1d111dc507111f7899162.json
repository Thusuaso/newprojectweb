{"ast":null,"code":"import bgpService from \"@/service/BgpProjectService\";\nimport { mapGetters } from \"vuex\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport { required } from \"@vuelidate/validators\";\nexport default {\n  setup() {\n    return {\n      v$: useVuelidate()\n    };\n  },\n  validations() {\n    return {\n      bpgProjeAdi: {\n        required\n      },\n      bgpUlkeAdi: {\n        required\n      }\n    };\n  },\n  computed: {\n    ...mapGetters([\"bgpUlkeler\"])\n  },\n  props: [\"username\"],\n  data() {\n    return {\n      submitted: false,\n      bpgProjeAdi: \"\",\n      bgpUlkeAdi: \"\",\n      filter_ulke_list: {},\n      is_save_disabled: false\n    };\n  },\n  created() {},\n  methods: {\n    bgpProjeKayit() {\n      this.submitted = true;\n      if (this.v$.$invalid) {\n        this.$toast.add({\n          severity: 'error',\n          summary: 'Zorunlu Alanlar',\n          detail: 'Zorunlu alanları doldurunuz!',\n          life: 3000\n        });\n      } else {\n        this.is_save_disabled = true;\n        bgpService.setBgpProjectName(this.bpgProjeAdi, this.username, this.bgpUlkeAdi.ulke_adi, this.bgpUlkeAdi.logo).then(data => {\n          if (data.status) {\n            this.$toast.add({\n              severity: \"success\",\n              summary: \"Proje İsmi\",\n              detail: \"Proje ismi başarıyla kaydedildi.\",\n              life: 3500\n            });\n            this.$store.dispatch(\"bgp_projects_list_load\", data.result);\n            this.emitter.emit(\"isProjectSave\", false);\n            this.is_save_disabled = true;\n          } else {\n            this.$toast.add({\n              severity: \"error\",\n              summary: \"Proje İsmi\",\n              detail: \"Proje ismi kaydetme başarısız.Lütfen proje isminizi kontrol ediniz.\",\n              life: 3500\n            });\n            this.$store.dispatch(\"bgp_projects_list_load\", data.result);\n            this.is_save_disabled = true;\n          }\n        });\n      }\n    },\n    ulke_complete_event(event) {\n      this.filter_ulke_list = this.bgpUlkeler.filter(x => {\n        return x.ulke_adi.toString().toLowerCase().indexOf(event.query.toString().toLowerCase()) >= 0;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAmCA,OAAOA,UAAS,MAAO,6BAA6B;AACpD,SAASC,UAAS,QAAS,MAAM;AACjC,SAASC,YAAW,QAAS,iBAAiB;AAC9C,SAASC,QAAO,QAAS,uBAAuB;AAChD,eAAe;EACbC,KAAK,GAAG;IACN,OAAO;MAAEC,EAAE,EAAEH,YAAY;IAAG,CAAC;EAC/B,CAAC;EACDI,WAAW,GAAG;IACZ,OAAO;MACLC,WAAW,EAAE;QAAEJ;MAAS,CAAC;MACzBK,UAAU,EAAE;QAAEL;MAAS;IACzB,CAAC;EACH,CAAC;EACDM,QAAQ,EAAE;IACR,GAAGR,UAAU,CAAC,CAAC,YAAY,CAAC;EAC9B,CAAC;EACDS,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,IAAI,GAAG;IACL,OAAO;MACLC,SAAS,EAAE,KAAK;MAChBL,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,EAAE;MACdK,gBAAgB,EAAE,CAAC,CAAC;MACpBC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,GAAG,CAAC,CAAC;EACZC,OAAO,EAAE;IACPC,aAAa,GAAG;MACd,IAAI,CAACL,SAAQ,GAAI,IAAI;MACrB,IAAI,IAAI,CAACP,EAAE,CAACa,QAAQ,EAAE;QACpB,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC;UAAEC,QAAQ,EAAE,OAAO;UAAEC,OAAO,EAAE,iBAAiB;UAAEC,MAAM,EAAE,8BAA8B;UAAEC,IAAI,EAAE;QAAK,CAAC,CAAC;MACxH,OAAO;QACL,IAAI,CAACV,gBAAe,GAAI,IAAI;QAC5Bd,UAAS,CACNyB,iBAAiB,CAChB,IAAI,CAAClB,WAAW,EAChB,IAAI,CAACmB,QAAQ,EACb,IAAI,CAAClB,UAAU,CAACmB,QAAQ,EACxB,IAAI,CAACnB,UAAU,CAACoB,IAAG,CACrB,CACCC,IAAI,CAAElB,IAAI,IAAK;UACd,IAAIA,IAAI,CAACmB,MAAM,EAAE;YACf,IAAI,CAACX,MAAM,CAACC,GAAG,CAAC;cACdC,QAAQ,EAAE,SAAS;cACnBC,OAAO,EAAE,YAAY;cACrBC,MAAM,EAAE,kCAAkC;cAC1CC,IAAI,EAAE;YACR,CAAC,CAAC;YACF,IAAI,CAACO,MAAM,CAACC,QAAQ,CAAC,wBAAwB,EAAErB,IAAI,CAACsB,MAAM,CAAC;YAC3D,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC;YACzC,IAAI,CAACrB,gBAAe,GAAI,IAAI;UAC9B,OAAO;YACL,IAAI,CAACK,MAAM,CAACC,GAAG,CAAC;cACdC,QAAQ,EAAE,OAAO;cACjBC,OAAO,EAAE,YAAY;cACrBC,MAAM,EACJ,qEAAqE;cACvEC,IAAI,EAAE;YACR,CAAC,CAAC;YACF,IAAI,CAACO,MAAM,CAACC,QAAQ,CAAC,wBAAwB,EAAErB,IAAI,CAACsB,MAAM,CAAC;YAC3D,IAAI,CAACnB,gBAAe,GAAI,IAAI;UAC9B;QACF,CAAC,CAAC;MACN;IAEF,CAAC;IACDsB,mBAAmB,CAACC,KAAK,EAAE;MACzB,IAAI,CAACxB,gBAAe,GAAI,IAAI,CAACyB,UAAU,CAACC,MAAM,CAAEC,CAAC,IAAK;QACpD,OACEA,CAAC,CAACb,QAAO,CACNc,QAAQ,EAAC,CACTC,WAAW,EAAC,CACZC,OAAO,CAACN,KAAK,CAACO,KAAK,CAACH,QAAQ,EAAE,CAACC,WAAW,EAAE,KAAK;MAExD,CAAC,CAAC;IACJ;EACF;AACF,CAAC","names":["bgpService","mapGetters","useVuelidate","required","setup","v$","validations","bpgProjeAdi","bgpUlkeAdi","computed","props","data","submitted","filter_ulke_list","is_save_disabled","created","methods","bgpProjeKayit","$invalid","$toast","add","severity","summary","detail","life","setBgpProjectName","username","ulke_adi","logo","then","status","$store","dispatch","result","emitter","emit","ulke_complete_event","event","bgpUlkeler","filter","x","toString","toLowerCase","indexOf","query"],"sourceRoot":"","sources":["C:\\PROJELER\\NewProjects\\gitPull\\newprojectweb\\src\\components\\bgpproject\\bgpNetworkForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container\" style=\"padding: 45px\">\r\n      <div class=\"columns\">\r\n        <div class=\"column\">\r\n          <b-field label=\"Bgp Proje Adı\" label-position=\"on-border\">\r\n            <InputText\r\n              type=\"text\"\r\n              v-model=\"bpgProjeAdi\"\r\n              :class=\"{ 'p-invalid': v$.bpgProjeAdi.$invalid && submitted }\"\r\n            ></InputText>\r\n          </b-field>\r\n        </div>\r\n        <div class=\"column\">\r\n          <b-field label=\"ÜLKE\" label-position=\"on-border\">\r\n            <AutoComplete\r\n              v-model=\"bgpUlkeAdi\"\r\n              :suggestions=\"filter_ulke_list\"\r\n              @complete=\"ulke_complete_event($event)\"\r\n              field=\"ulke_adi\"\r\n              :class=\"{ 'p-invalid': v$.bgpUlkeAdi.$invalid && submitted }\"\r\n            />\r\n          </b-field>\r\n        </div>\r\n      </div>\r\n\r\n      <Button\r\n        @click=\"bgpProjeKayit\"\r\n        label=\"Kaydet\"\r\n        :disabled=\"is_save_disabled\"\r\n      ></Button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport bgpService from \"@/service/BgpProjectService\";\r\nimport { mapGetters } from \"vuex\";\r\nimport { useVuelidate } from \"@vuelidate/core\";\r\nimport { required } from \"@vuelidate/validators\";\r\nexport default {\r\n  setup() {\r\n    return { v$: useVuelidate() };\r\n  },\r\n  validations() {\r\n    return {\r\n      bpgProjeAdi: { required },\r\n      bgpUlkeAdi: { required },\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapGetters([\"bgpUlkeler\"]),\r\n  },\r\n  props: [\"username\"],\r\n  data() {\r\n    return {\r\n      submitted: false,\r\n      bpgProjeAdi: \"\",\r\n      bgpUlkeAdi: \"\",\r\n      filter_ulke_list: {},\r\n      is_save_disabled: false,\r\n    };\r\n  },\r\n  created() {},\r\n  methods: {\r\n    bgpProjeKayit() {\r\n      this.submitted = true;\r\n      if (this.v$.$invalid) {\r\n        this.$toast.add({ severity: 'error', summary: 'Zorunlu Alanlar', detail: 'Zorunlu alanları doldurunuz!', life: 3000 });\r\n      } else {\r\n        this.is_save_disabled = true;\r\n        bgpService\r\n          .setBgpProjectName(\r\n            this.bpgProjeAdi,\r\n            this.username,\r\n            this.bgpUlkeAdi.ulke_adi,\r\n            this.bgpUlkeAdi.logo\r\n          )\r\n          .then((data) => {\r\n            if (data.status) {\r\n              this.$toast.add({\r\n                severity: \"success\",\r\n                summary: \"Proje İsmi\",\r\n                detail: \"Proje ismi başarıyla kaydedildi.\",\r\n                life: 3500,\r\n              });\r\n              this.$store.dispatch(\"bgp_projects_list_load\", data.result);\r\n              this.emitter.emit(\"isProjectSave\", false);\r\n              this.is_save_disabled = true;\r\n            } else {\r\n              this.$toast.add({\r\n                severity: \"error\",\r\n                summary: \"Proje İsmi\",\r\n                detail:\r\n                  \"Proje ismi kaydetme başarısız.Lütfen proje isminizi kontrol ediniz.\",\r\n                life: 3500,\r\n              });\r\n              this.$store.dispatch(\"bgp_projects_list_load\", data.result);\r\n              this.is_save_disabled = true;\r\n            }\r\n          });\r\n      }\r\n      \r\n    },\r\n    ulke_complete_event(event) {\r\n      this.filter_ulke_list = this.bgpUlkeler.filter((x) => {\r\n        return (\r\n          x.ulke_adi\r\n            .toString()\r\n            .toLowerCase()\r\n            .indexOf(event.query.toString().toLowerCase()) >= 0\r\n        );\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped></style>\r\n"]},"metadata":{},"sourceType":"module"}