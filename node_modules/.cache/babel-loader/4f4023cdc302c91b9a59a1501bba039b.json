{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.unshift.js\");\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar punycode = require('punycode');\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\nexports.Url = Url;\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n  portPattern = /:[0-9]*$/,\n  // RFC 2396: characters reserved for delimiting URLs.\n  // We actually just auto-escape these.\n  delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n  // RFC 2396: characters not allowed for various reasons.\n  unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n  autoEscape = ['\\''].concat(unwise),\n  // Characters that are never ever allowed in a hostname.\n  // Note that any invalid chars are also handled, but these\n  // are the ones that are *expected* to be seen, so we fast-path\n  // them.\n  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n  hostEndingChars = ['/', '?', '#'],\n  hostnameMaxLen = 255,\n  hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\n  hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\n  // protocols that can allow \"unsafe\" and \"unwise\" chars.\n  unsafeProtocol = {\n    'javascript': true,\n    'javascript:': true\n  },\n  // protocols that never have a hostname.\n  hostlessProtocol = {\n    'javascript': true,\n    'javascript:': true\n  },\n  // protocols that always contain a // bit.\n  slashedProtocol = {\n    'http': true,\n    'https': true,\n    'ftp': true,\n    'gopher': true,\n    'file': true,\n    'http:': true,\n    'https:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'file:': true\n  },\n  querystring = require('querystring');\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) hostEnd = rest.length;\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a puny coded representation of \"domain\".\n      // It only converts the part of the domain name that\n      // has non ASCII characters. I.e. it dosent matter if\n      // you call it with a domain that already is in ASCII.\n      var domainArray = this.hostname.split('.');\n      var newOut = [];\n      for (var i = 0; i < domainArray.length; ++i) {\n        var s = domainArray[i];\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ? 'xn--' + punycode.encode(s) : s);\n      }\n      this.hostname = newOut.join('.');\n    }\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n  var protocol = this.protocol || '',\n    pathname = this.pathname || '',\n    hash = this.hash || '',\n    host = false,\n    query = '';\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n  if (this.query && isObject(this.query) && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n  var search = this.search || query && '?' + query || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n  return protocol + host + pathname + search + hash;\n};\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\nUrl.prototype.resolveObject = function (relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n  var result = new Url();\n  Object.keys(this).forEach(function (k) {\n    result[k] = this[k];\n  }, this);\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    Object.keys(relative).forEach(function (k) {\n      if (k !== 'protocol') result[k] = relative[k];\n    });\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n    result.href = result.format();\n    return result;\n  }\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      Object.keys(relative).forEach(function (k) {\n        result[k] = relative[k];\n      });\n      result.href = result.format();\n      return result;\n    }\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n    mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n    removeAllDots = mustEndAbs,\n    srcPath = result.pathname && result.pathname.split('/') || [],\n    relPath = relative.pathname && relative.pathname.split('/') || [],\n    psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host) && (last === '.' || last === '..') || last === '';\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last == '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n    srcPath.push('');\n  }\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especialy happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\nfunction isString(arg) {\n  return typeof arg === \"string\";\n}\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nfunction isNull(arg) {\n  return arg === null;\n}\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}","map":{"version":3,"names":["punycode","require","exports","parse","urlParse","resolve","urlResolve","resolveObject","urlResolveObject","format","urlFormat","Url","protocol","slashes","auth","host","port","hostname","hash","search","query","pathname","path","href","protocolPattern","portPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","hostlessProtocol","slashedProtocol","querystring","url","parseQueryString","slashesDenoteHost","isObject","u","prototype","isString","TypeError","rest","trim","proto","exec","lowerProto","toLowerCase","substr","length","match","hostEnd","i","hec","indexOf","atSign","lastIndexOf","slice","decodeURIComponent","parseHost","ipv6Hostname","hostparts","split","l","part","newpart","j","k","charCodeAt","validParts","notHost","bit","push","unshift","join","domainArray","newOut","s","encode","p","h","ae","esc","encodeURIComponent","escape","qm","obj","call","replace","Object","keys","stringify","charAt","source","relative","rel","result","forEach","relPath","shift","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","isNullOrUndefined","authInHost","isNull","last","hasTrailingSlash","up","splice","isAbsolute","arg"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/url/url.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nvar punycode = require('punycode');\r\n\r\nexports.parse = urlParse;\r\nexports.resolve = urlResolve;\r\nexports.resolveObject = urlResolveObject;\r\nexports.format = urlFormat;\r\n\r\nexports.Url = Url;\r\n\r\nfunction Url() {\r\n  this.protocol = null;\r\n  this.slashes = null;\r\n  this.auth = null;\r\n  this.host = null;\r\n  this.port = null;\r\n  this.hostname = null;\r\n  this.hash = null;\r\n  this.search = null;\r\n  this.query = null;\r\n  this.pathname = null;\r\n  this.path = null;\r\n  this.href = null;\r\n}\r\n\r\n// Reference: RFC 3986, RFC 1808, RFC 2396\r\n\r\n// define these here so at least they only have to be\r\n// compiled once on the first module load.\r\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\r\n    portPattern = /:[0-9]*$/,\r\n\r\n    // RFC 2396: characters reserved for delimiting URLs.\r\n    // We actually just auto-escape these.\r\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\r\n\r\n    // RFC 2396: characters not allowed for various reasons.\r\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\r\n\r\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\r\n    autoEscape = ['\\''].concat(unwise),\r\n    // Characters that are never ever allowed in a hostname.\r\n    // Note that any invalid chars are also handled, but these\r\n    // are the ones that are *expected* to be seen, so we fast-path\r\n    // them.\r\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\r\n    hostEndingChars = ['/', '?', '#'],\r\n    hostnameMaxLen = 255,\r\n    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\r\n    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\r\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\r\n    unsafeProtocol = {\r\n      'javascript': true,\r\n      'javascript:': true\r\n    },\r\n    // protocols that never have a hostname.\r\n    hostlessProtocol = {\r\n      'javascript': true,\r\n      'javascript:': true\r\n    },\r\n    // protocols that always contain a // bit.\r\n    slashedProtocol = {\r\n      'http': true,\r\n      'https': true,\r\n      'ftp': true,\r\n      'gopher': true,\r\n      'file': true,\r\n      'http:': true,\r\n      'https:': true,\r\n      'ftp:': true,\r\n      'gopher:': true,\r\n      'file:': true\r\n    },\r\n    querystring = require('querystring');\r\n\r\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\r\n  if (url && isObject(url) && url instanceof Url) return url;\r\n\r\n  var u = new Url;\r\n  u.parse(url, parseQueryString, slashesDenoteHost);\r\n  return u;\r\n}\r\n\r\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\r\n  if (!isString(url)) {\r\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\r\n  }\r\n\r\n  var rest = url;\r\n\r\n  // trim before proceeding.\r\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\r\n  rest = rest.trim();\r\n\r\n  var proto = protocolPattern.exec(rest);\r\n  if (proto) {\r\n    proto = proto[0];\r\n    var lowerProto = proto.toLowerCase();\r\n    this.protocol = lowerProto;\r\n    rest = rest.substr(proto.length);\r\n  }\r\n\r\n  // figure out if it's got a host\r\n  // user@server is *always* interpreted as a hostname, and url\r\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\r\n  // how the browser resolves relative URLs.\r\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\r\n    var slashes = rest.substr(0, 2) === '//';\r\n    if (slashes && !(proto && hostlessProtocol[proto])) {\r\n      rest = rest.substr(2);\r\n      this.slashes = true;\r\n    }\r\n  }\r\n\r\n  if (!hostlessProtocol[proto] &&\r\n      (slashes || (proto && !slashedProtocol[proto]))) {\r\n\r\n    // there's a hostname.\r\n    // the first instance of /, ?, ;, or # ends the host.\r\n    //\r\n    // If there is an @ in the hostname, then non-host chars *are* allowed\r\n    // to the left of the last @ sign, unless some host-ending character\r\n    // comes *before* the @-sign.\r\n    // URLs are obnoxious.\r\n    //\r\n    // ex:\r\n    // http://a@b@c/ => user:a@b host:c\r\n    // http://a@b?@c => user:a host:c path:/?@c\r\n\r\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\r\n    // Review our test case against browsers more comprehensively.\r\n\r\n    // find the first instance of any hostEndingChars\r\n    var hostEnd = -1;\r\n    for (var i = 0; i < hostEndingChars.length; i++) {\r\n      var hec = rest.indexOf(hostEndingChars[i]);\r\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\r\n        hostEnd = hec;\r\n    }\r\n\r\n    // at this point, either we have an explicit point where the\r\n    // auth portion cannot go past, or the last @ char is the decider.\r\n    var auth, atSign;\r\n    if (hostEnd === -1) {\r\n      // atSign can be anywhere.\r\n      atSign = rest.lastIndexOf('@');\r\n    } else {\r\n      // atSign must be in auth portion.\r\n      // http://a@b/c@d => host:b auth:a path:/c@d\r\n      atSign = rest.lastIndexOf('@', hostEnd);\r\n    }\r\n\r\n    // Now we have a portion which is definitely the auth.\r\n    // Pull that off.\r\n    if (atSign !== -1) {\r\n      auth = rest.slice(0, atSign);\r\n      rest = rest.slice(atSign + 1);\r\n      this.auth = decodeURIComponent(auth);\r\n    }\r\n\r\n    // the host is the remaining to the left of the first non-host char\r\n    hostEnd = -1;\r\n    for (var i = 0; i < nonHostChars.length; i++) {\r\n      var hec = rest.indexOf(nonHostChars[i]);\r\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\r\n        hostEnd = hec;\r\n    }\r\n    // if we still have not hit it, then the entire thing is a host.\r\n    if (hostEnd === -1)\r\n      hostEnd = rest.length;\r\n\r\n    this.host = rest.slice(0, hostEnd);\r\n    rest = rest.slice(hostEnd);\r\n\r\n    // pull out port.\r\n    this.parseHost();\r\n\r\n    // we've indicated that there is a hostname,\r\n    // so even if it's empty, it has to be present.\r\n    this.hostname = this.hostname || '';\r\n\r\n    // if hostname begins with [ and ends with ]\r\n    // assume that it's an IPv6 address.\r\n    var ipv6Hostname = this.hostname[0] === '[' &&\r\n        this.hostname[this.hostname.length - 1] === ']';\r\n\r\n    // validate a little.\r\n    if (!ipv6Hostname) {\r\n      var hostparts = this.hostname.split(/\\./);\r\n      for (var i = 0, l = hostparts.length; i < l; i++) {\r\n        var part = hostparts[i];\r\n        if (!part) continue;\r\n        if (!part.match(hostnamePartPattern)) {\r\n          var newpart = '';\r\n          for (var j = 0, k = part.length; j < k; j++) {\r\n            if (part.charCodeAt(j) > 127) {\r\n              // we replace non-ASCII char with a temporary placeholder\r\n              // we need this to make sure size of hostname is not\r\n              // broken by replacing non-ASCII by nothing\r\n              newpart += 'x';\r\n            } else {\r\n              newpart += part[j];\r\n            }\r\n          }\r\n          // we test again with ASCII char only\r\n          if (!newpart.match(hostnamePartPattern)) {\r\n            var validParts = hostparts.slice(0, i);\r\n            var notHost = hostparts.slice(i + 1);\r\n            var bit = part.match(hostnamePartStart);\r\n            if (bit) {\r\n              validParts.push(bit[1]);\r\n              notHost.unshift(bit[2]);\r\n            }\r\n            if (notHost.length) {\r\n              rest = '/' + notHost.join('.') + rest;\r\n            }\r\n            this.hostname = validParts.join('.');\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.hostname.length > hostnameMaxLen) {\r\n      this.hostname = '';\r\n    } else {\r\n      // hostnames are always lower case.\r\n      this.hostname = this.hostname.toLowerCase();\r\n    }\r\n\r\n    if (!ipv6Hostname) {\r\n      // IDNA Support: Returns a puny coded representation of \"domain\".\r\n      // It only converts the part of the domain name that\r\n      // has non ASCII characters. I.e. it dosent matter if\r\n      // you call it with a domain that already is in ASCII.\r\n      var domainArray = this.hostname.split('.');\r\n      var newOut = [];\r\n      for (var i = 0; i < domainArray.length; ++i) {\r\n        var s = domainArray[i];\r\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?\r\n            'xn--' + punycode.encode(s) : s);\r\n      }\r\n      this.hostname = newOut.join('.');\r\n    }\r\n\r\n    var p = this.port ? ':' + this.port : '';\r\n    var h = this.hostname || '';\r\n    this.host = h + p;\r\n    this.href += this.host;\r\n\r\n    // strip [ and ] from the hostname\r\n    // the host field still retains them, though\r\n    if (ipv6Hostname) {\r\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\r\n      if (rest[0] !== '/') {\r\n        rest = '/' + rest;\r\n      }\r\n    }\r\n  }\r\n\r\n  // now rest is set to the post-host stuff.\r\n  // chop off any delim chars.\r\n  if (!unsafeProtocol[lowerProto]) {\r\n\r\n    // First, make 100% sure that any \"autoEscape\" chars get\r\n    // escaped, even if encodeURIComponent doesn't think they\r\n    // need to be.\r\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\r\n      var ae = autoEscape[i];\r\n      var esc = encodeURIComponent(ae);\r\n      if (esc === ae) {\r\n        esc = escape(ae);\r\n      }\r\n      rest = rest.split(ae).join(esc);\r\n    }\r\n  }\r\n\r\n\r\n  // chop off from the tail first.\r\n  var hash = rest.indexOf('#');\r\n  if (hash !== -1) {\r\n    // got a fragment string.\r\n    this.hash = rest.substr(hash);\r\n    rest = rest.slice(0, hash);\r\n  }\r\n  var qm = rest.indexOf('?');\r\n  if (qm !== -1) {\r\n    this.search = rest.substr(qm);\r\n    this.query = rest.substr(qm + 1);\r\n    if (parseQueryString) {\r\n      this.query = querystring.parse(this.query);\r\n    }\r\n    rest = rest.slice(0, qm);\r\n  } else if (parseQueryString) {\r\n    // no query string, but parseQueryString still requested\r\n    this.search = '';\r\n    this.query = {};\r\n  }\r\n  if (rest) this.pathname = rest;\r\n  if (slashedProtocol[lowerProto] &&\r\n      this.hostname && !this.pathname) {\r\n    this.pathname = '/';\r\n  }\r\n\r\n  //to support http.request\r\n  if (this.pathname || this.search) {\r\n    var p = this.pathname || '';\r\n    var s = this.search || '';\r\n    this.path = p + s;\r\n  }\r\n\r\n  // finally, reconstruct the href based on what has been validated.\r\n  this.href = this.format();\r\n  return this;\r\n};\r\n\r\n// format a parsed object into a url string\r\nfunction urlFormat(obj) {\r\n  // ensure it's an object, and not a string url.\r\n  // If it's an obj, this is a no-op.\r\n  // this way, you can call url_format() on strings\r\n  // to clean up potentially wonky urls.\r\n  if (isString(obj)) obj = urlParse(obj);\r\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\r\n  return obj.format();\r\n}\r\n\r\nUrl.prototype.format = function() {\r\n  var auth = this.auth || '';\r\n  if (auth) {\r\n    auth = encodeURIComponent(auth);\r\n    auth = auth.replace(/%3A/i, ':');\r\n    auth += '@';\r\n  }\r\n\r\n  var protocol = this.protocol || '',\r\n      pathname = this.pathname || '',\r\n      hash = this.hash || '',\r\n      host = false,\r\n      query = '';\r\n\r\n  if (this.host) {\r\n    host = auth + this.host;\r\n  } else if (this.hostname) {\r\n    host = auth + (this.hostname.indexOf(':') === -1 ?\r\n        this.hostname :\r\n        '[' + this.hostname + ']');\r\n    if (this.port) {\r\n      host += ':' + this.port;\r\n    }\r\n  }\r\n\r\n  if (this.query &&\r\n      isObject(this.query) &&\r\n      Object.keys(this.query).length) {\r\n    query = querystring.stringify(this.query);\r\n  }\r\n\r\n  var search = this.search || (query && ('?' + query)) || '';\r\n\r\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\r\n\r\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\r\n  // unless they had them to begin with.\r\n  if (this.slashes ||\r\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\r\n    host = '//' + (host || '');\r\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\r\n  } else if (!host) {\r\n    host = '';\r\n  }\r\n\r\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\r\n  if (search && search.charAt(0) !== '?') search = '?' + search;\r\n\r\n  pathname = pathname.replace(/[?#]/g, function(match) {\r\n    return encodeURIComponent(match);\r\n  });\r\n  search = search.replace('#', '%23');\r\n\r\n  return protocol + host + pathname + search + hash;\r\n};\r\n\r\nfunction urlResolve(source, relative) {\r\n  return urlParse(source, false, true).resolve(relative);\r\n}\r\n\r\nUrl.prototype.resolve = function(relative) {\r\n  return this.resolveObject(urlParse(relative, false, true)).format();\r\n};\r\n\r\nfunction urlResolveObject(source, relative) {\r\n  if (!source) return relative;\r\n  return urlParse(source, false, true).resolveObject(relative);\r\n}\r\n\r\nUrl.prototype.resolveObject = function(relative) {\r\n  if (isString(relative)) {\r\n    var rel = new Url();\r\n    rel.parse(relative, false, true);\r\n    relative = rel;\r\n  }\r\n\r\n  var result = new Url();\r\n  Object.keys(this).forEach(function(k) {\r\n    result[k] = this[k];\r\n  }, this);\r\n\r\n  // hash is always overridden, no matter what.\r\n  // even href=\"\" will remove it.\r\n  result.hash = relative.hash;\r\n\r\n  // if the relative url is empty, then there's nothing left to do here.\r\n  if (relative.href === '') {\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  // hrefs like //foo/bar always cut to the protocol.\r\n  if (relative.slashes && !relative.protocol) {\r\n    // take everything except the protocol from relative\r\n    Object.keys(relative).forEach(function(k) {\r\n      if (k !== 'protocol')\r\n        result[k] = relative[k];\r\n    });\r\n\r\n    //urlParse appends trailing / to urls like http://www.example.com\r\n    if (slashedProtocol[result.protocol] &&\r\n        result.hostname && !result.pathname) {\r\n      result.path = result.pathname = '/';\r\n    }\r\n\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  if (relative.protocol && relative.protocol !== result.protocol) {\r\n    // if it's a known url protocol, then changing\r\n    // the protocol does weird things\r\n    // first, if it's not file:, then we MUST have a host,\r\n    // and if there was a path\r\n    // to begin with, then we MUST have a path.\r\n    // if it is file:, then the host is dropped,\r\n    // because that's known to be hostless.\r\n    // anything else is assumed to be absolute.\r\n    if (!slashedProtocol[relative.protocol]) {\r\n      Object.keys(relative).forEach(function(k) {\r\n        result[k] = relative[k];\r\n      });\r\n      result.href = result.format();\r\n      return result;\r\n    }\r\n\r\n    result.protocol = relative.protocol;\r\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\r\n      var relPath = (relative.pathname || '').split('/');\r\n      while (relPath.length && !(relative.host = relPath.shift()));\r\n      if (!relative.host) relative.host = '';\r\n      if (!relative.hostname) relative.hostname = '';\r\n      if (relPath[0] !== '') relPath.unshift('');\r\n      if (relPath.length < 2) relPath.unshift('');\r\n      result.pathname = relPath.join('/');\r\n    } else {\r\n      result.pathname = relative.pathname;\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    result.host = relative.host || '';\r\n    result.auth = relative.auth;\r\n    result.hostname = relative.hostname || relative.host;\r\n    result.port = relative.port;\r\n    // to support http.request\r\n    if (result.pathname || result.search) {\r\n      var p = result.pathname || '';\r\n      var s = result.search || '';\r\n      result.path = p + s;\r\n    }\r\n    result.slashes = result.slashes || relative.slashes;\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\r\n      isRelAbs = (\r\n          relative.host ||\r\n          relative.pathname && relative.pathname.charAt(0) === '/'\r\n      ),\r\n      mustEndAbs = (isRelAbs || isSourceAbs ||\r\n                    (result.host && relative.pathname)),\r\n      removeAllDots = mustEndAbs,\r\n      srcPath = result.pathname && result.pathname.split('/') || [],\r\n      relPath = relative.pathname && relative.pathname.split('/') || [],\r\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\r\n\r\n  // if the url is a non-slashed url, then relative\r\n  // links like ../.. should be able\r\n  // to crawl up to the hostname, as well.  This is strange.\r\n  // result.protocol has already been set by now.\r\n  // Later on, put the first path part into the host field.\r\n  if (psychotic) {\r\n    result.hostname = '';\r\n    result.port = null;\r\n    if (result.host) {\r\n      if (srcPath[0] === '') srcPath[0] = result.host;\r\n      else srcPath.unshift(result.host);\r\n    }\r\n    result.host = '';\r\n    if (relative.protocol) {\r\n      relative.hostname = null;\r\n      relative.port = null;\r\n      if (relative.host) {\r\n        if (relPath[0] === '') relPath[0] = relative.host;\r\n        else relPath.unshift(relative.host);\r\n      }\r\n      relative.host = null;\r\n    }\r\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\r\n  }\r\n\r\n  if (isRelAbs) {\r\n    // it's absolute.\r\n    result.host = (relative.host || relative.host === '') ?\r\n                  relative.host : result.host;\r\n    result.hostname = (relative.hostname || relative.hostname === '') ?\r\n                      relative.hostname : result.hostname;\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    srcPath = relPath;\r\n    // fall through to the dot-handling below.\r\n  } else if (relPath.length) {\r\n    // it's relative\r\n    // throw away the existing file, and take the new path instead.\r\n    if (!srcPath) srcPath = [];\r\n    srcPath.pop();\r\n    srcPath = srcPath.concat(relPath);\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n  } else if (!isNullOrUndefined(relative.search)) {\r\n    // just pull out the search.\r\n    // like href='?foo'.\r\n    // Put this after the other two cases because it simplifies the booleans\r\n    if (psychotic) {\r\n      result.hostname = result.host = srcPath.shift();\r\n      //occationaly the auth can get stuck only in host\r\n      //this especialy happens in cases like\r\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\r\n                       result.host.split('@') : false;\r\n      if (authInHost) {\r\n        result.auth = authInHost.shift();\r\n        result.host = result.hostname = authInHost.shift();\r\n      }\r\n    }\r\n    result.search = relative.search;\r\n    result.query = relative.query;\r\n    //to support http.request\r\n    if (!isNull(result.pathname) || !isNull(result.search)) {\r\n      result.path = (result.pathname ? result.pathname : '') +\r\n                    (result.search ? result.search : '');\r\n    }\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  if (!srcPath.length) {\r\n    // no path at all.  easy.\r\n    // we've already handled the other stuff above.\r\n    result.pathname = null;\r\n    //to support http.request\r\n    if (result.search) {\r\n      result.path = '/' + result.search;\r\n    } else {\r\n      result.path = null;\r\n    }\r\n    result.href = result.format();\r\n    return result;\r\n  }\r\n\r\n  // if a url ENDs in . or .., then it must get a trailing slash.\r\n  // however, if it ends in anything else non-slashy,\r\n  // then it must NOT get a trailing slash.\r\n  var last = srcPath.slice(-1)[0];\r\n  var hasTrailingSlash = (\r\n      (result.host || relative.host) && (last === '.' || last === '..') ||\r\n      last === '');\r\n\r\n  // strip single dots, resolve double dots to parent dir\r\n  // if the path tries to go above the root, `up` ends up > 0\r\n  var up = 0;\r\n  for (var i = srcPath.length; i >= 0; i--) {\r\n    last = srcPath[i];\r\n    if (last == '.') {\r\n      srcPath.splice(i, 1);\r\n    } else if (last === '..') {\r\n      srcPath.splice(i, 1);\r\n      up++;\r\n    } else if (up) {\r\n      srcPath.splice(i, 1);\r\n      up--;\r\n    }\r\n  }\r\n\r\n  // if the path is allowed to go above the root, restore leading ..s\r\n  if (!mustEndAbs && !removeAllDots) {\r\n    for (; up--; up) {\r\n      srcPath.unshift('..');\r\n    }\r\n  }\r\n\r\n  if (mustEndAbs && srcPath[0] !== '' &&\r\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\r\n    srcPath.unshift('');\r\n  }\r\n\r\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\r\n    srcPath.push('');\r\n  }\r\n\r\n  var isAbsolute = srcPath[0] === '' ||\r\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\r\n\r\n  // put the host back\r\n  if (psychotic) {\r\n    result.hostname = result.host = isAbsolute ? '' :\r\n                                    srcPath.length ? srcPath.shift() : '';\r\n    //occationaly the auth can get stuck only in host\r\n    //this especialy happens in cases like\r\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\r\n                     result.host.split('@') : false;\r\n    if (authInHost) {\r\n      result.auth = authInHost.shift();\r\n      result.host = result.hostname = authInHost.shift();\r\n    }\r\n  }\r\n\r\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\r\n\r\n  if (mustEndAbs && !isAbsolute) {\r\n    srcPath.unshift('');\r\n  }\r\n\r\n  if (!srcPath.length) {\r\n    result.pathname = null;\r\n    result.path = null;\r\n  } else {\r\n    result.pathname = srcPath.join('/');\r\n  }\r\n\r\n  //to support request.http\r\n  if (!isNull(result.pathname) || !isNull(result.search)) {\r\n    result.path = (result.pathname ? result.pathname : '') +\r\n                  (result.search ? result.search : '');\r\n  }\r\n  result.auth = relative.auth || result.auth;\r\n  result.slashes = result.slashes || relative.slashes;\r\n  result.href = result.format();\r\n  return result;\r\n};\r\n\r\nUrl.prototype.parseHost = function() {\r\n  var host = this.host;\r\n  var port = portPattern.exec(host);\r\n  if (port) {\r\n    port = port[0];\r\n    if (port !== ':') {\r\n      this.port = port.substr(1);\r\n    }\r\n    host = host.substr(0, host.length - port.length);\r\n  }\r\n  if (host) this.hostname = host;\r\n};\r\n\r\nfunction isString(arg) {\r\n  return typeof arg === \"string\";\r\n}\r\n\r\nfunction isObject(arg) {\r\n  return typeof arg === 'object' && arg !== null;\r\n}\r\n\r\nfunction isNull(arg) {\r\n  return arg === null;\r\n}\r\nfunction isNullOrUndefined(arg) {\r\n  return  arg == null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}