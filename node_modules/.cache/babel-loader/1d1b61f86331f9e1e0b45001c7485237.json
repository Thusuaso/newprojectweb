{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"columns is-centered\"\n};\nconst _hoisted_2 = {\n  class: \"column is-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Checkbox = _resolveComponent(\"Checkbox\");\n  const _component_Button = _resolveComponent(\"Button\");\n  return _openBlock(), _createElementBlock(\"section\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.kullanimList, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: item.id,\n      class: \"field\"\n    }, [_createVNode(_component_Checkbox, {\n      value: item.durum,\n      onInput: $event => $options.durumDegisim(item, $event)\n    }, null, 8 /* PROPS */, [\"value\", \"onInput\"]), _createTextVNode(\" \" + _toDisplayString(item.kullanimAdi), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_Button, {\n    class: \"p-button-success\",\n    label: \"Kaydet\",\n    onClick: $options.dataKayitIslem\n  }, null, 8 /* PROPS */, [\"onClick\"])])])]);\n}","map":{"version":3,"mappings":";;EAMSA,KAAK,EAAC;AAAqB;;EACzBA,KAAK,EAAC;AAAa;;;;uBAN5BC,oBAcU,qCAbRA,oBAGMC,6BAHcC,kBAAY,EAApBC,IAAI;yBAAhBH,oBAGM;MAH6BI,GAAG,EAAED,IAAI,CAACE,EAAE;MAAEN,KAAK,EAAC;QACrDO,aAAoEC;MAAzDC,KAAK,EAAEL,IAAI,CAACM,KAAK;MAAGC,OAAK,YAAEC,qBAAY,CAACR,IAAI,EAAES,MAAM;oEAAK,GACpE,oBAAGT,IAAI,CAACU,WAAW;kCAErBC,oBAQM,OARNC,UAQM,GAPJD,oBAMM,OANNE,UAMM,GALJV,aAIEW;IAHAlB,KAAK,EAAC,kBAAkB;IACxBmB,KAAK,EAAC,QAAQ;IACbC,OAAK,EAAER","names":["class","_createElementBlock","_Fragment","$data","item","key","id","_createVNode","_component_Checkbox","value","durum","onInput","$options","$event","kullanimAdi","_createElementVNode","_hoisted_1","_hoisted_2","_component_Button","label","onClick"],"sourceRoot":"","sources":["C:\\PROJELER\\NewProjects\\gitPull\\newprojectweb\\src\\components\\depousa\\UrunKullanimForm.vue"],"sourcesContent":["<template>\r\n  <section>\r\n    <div v-for=\"item in kullanimList\" :key=\"item.id\" class=\"field\">\r\n      <Checkbox :value=\"item.durum\" @input=\"durumDegisim(item, $event)\" />\r\n      {{ item.kullanimAdi }}\r\n    </div>\r\n    <div class=\"columns is-centered\">\r\n      <div class=\"column is-4\">\r\n        <Button\r\n          class=\"p-button-success\"\r\n          label=\"Kaydet\"\r\n          @click=\"dataKayitIslem\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport depoKullanimService from \"@/service/DepoKullanimService\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      kullanimList: null,\r\n      kullanim: null,\r\n      silinenler: [],\r\n      eklenenler: [],\r\n    };\r\n  },\r\n  props: [\"urunid\"],\r\n  created() {\r\n    depoKullanimService.getKullanimList(this.urunid).then((data) => {\r\n      this.kullanimList = data;\r\n    });\r\n  },\r\n  methods: {\r\n    durumDegisim(item, event) {\r\n      if (event) {\r\n        this.urunEkle(item);\r\n      } else {\r\n        this.urunSil(item);\r\n      }\r\n    },\r\n    urunEkle(item) {\r\n      const data = { ...item, urunid: this.urunid };\r\n\r\n      this.eklenenler.push(data);\r\n      this.kontrol(this.silinenler, item);\r\n    },\r\n    urunSil(item) {\r\n      const data = { ...item, urunid: this.urunid };\r\n\r\n      this.silinenler.push(data);\r\n\r\n      this.kontrol(this.eklenenler, item);\r\n    },\r\n    kontrol(list, item) {\r\n      for (let key in list) {\r\n        if (list[key].id == item.id) {\r\n          list.splice(key, 1);\r\n        }\r\n      }\r\n    },\r\n    dataKayitIslem() {\r\n      const data = {\r\n        eklenenler: this.eklenenler,\r\n        silinenler: this.silinenler,\r\n      };\r\n\r\n      depoKullanimService.dataKayitIslem(data).then((status) => {\r\n        if (status) {\r\n          this.eklenenler = [];\r\n          this.silinenler = [];\r\n          alert(\"Kullanım Alanları Eklendi.\");\r\n        }\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}