{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nvar AWS = require('../core');\nvar v4Credentials = require('../signers/v4_credentials');\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\nvar s3util = require('./s3util');\nvar regionUtil = require('../region_config');\n\n// Pull in managed upload extension\nrequire('../s3/managed_upload');\n\n/**\r\n * @api private\r\n */\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n\n/**\r\n * @api private\r\n */\nvar regionRedirectErrorCodes = ['AuthorizationHeaderMalformed',\n// non-head operations on virtual-hosted global bucket endpoints\n'BadRequest',\n// head operations on virtual-hosted global bucket endpoints\n'PermanentRedirect',\n// non-head operations on path-style or regional endpoints\n301 // head operations on path-style or regional endpoints\n];\n\nvar OBJECT_LAMBDA_SERVICE = 's3-object-lambda';\nAWS.util.update(AWS.S3.prototype, {\n  /**\r\n   * @api private\r\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\r\n      1) User defined version specified:\r\n        a) always return user defined version\r\n      2) No user defined version specified:\r\n        a) If not using presigned urls, default to V4\r\n        b) If using presigned urls, default to lowest version the region supports\r\n    */\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n    return defaultApiVersion;\n  },\n  /**\r\n   * @api private\r\n   */\n  getSigningName: function getSigningName(req) {\n    if (req && req.operation === 'writeGetObjectResponse') {\n      return OBJECT_LAMBDA_SERVICE;\n    }\n    var _super = AWS.Service.prototype.getSigningName;\n    return req && req._parsedArn && req._parsedArn.service ? req._parsedArn.service : _super.call(this);\n  },\n  /**\r\n   * @api private\r\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n  /**\r\n   * @api private\r\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = [];\n\n    // default to us-east-1 when no region is provided\n    if (!this.config.region) this.config.region = 'us-east-1';\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' + '`s3BucketEndpoint` to true.');\n    }\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n    if (msg) {\n      throw AWS.util.error(new Error(), {\n        name: 'InvalidEndpoint',\n        message: msg\n      });\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4 && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n    return false;\n  },\n  /**\r\n   * @api private\r\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('validate', this.optInUsEast1RegionalEndpoint, prependListener);\n    request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('build', this.populateURI);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', this.extractErrorFrom200Response);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n    if (this.shouldDisableBodySigning(request)) {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    }\n    //deal with ARNs supplied to Bucket\n    if (request.operation !== 'createBucket' && s3util.isArnInParam(request, 'Bucket')) {\n      // avoid duplicate parsing in the future\n      request._parsedArn = AWS.util.ARN.parse(request.params.Bucket);\n      request.removeListener('validate', this.validateBucketName);\n      request.removeListener('build', this.populateURI);\n      if (request._parsedArn.service === 's3') {\n        request.addListener('validate', s3util.validateS3AccessPointArn);\n        request.addListener('validate', this.validateArnResourceType);\n        request.addListener('validate', this.validateArnRegion);\n      } else if (request._parsedArn.service === 's3-outposts') {\n        request.addListener('validate', s3util.validateOutpostsAccessPointArn);\n        request.addListener('validate', s3util.validateOutpostsArn);\n        request.addListener('validate', s3util.validateArnRegion);\n      }\n      request.addListener('validate', s3util.validateArnAccount);\n      request.addListener('validate', s3util.validateArnService);\n      request.addListener('build', this.populateUriFromAccessPointArn);\n      request.addListener('build', s3util.validatePopulateUriFromArn);\n      return;\n    }\n    //listeners regarding region inference\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.onAsync('extractError', this.requestBucketRegion);\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  validateScheme: function (req) {\n    var params = req.params,\n      scheme = req.httpRequest.endpoint.protocol,\n      sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' + 'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  validateBucketEndpoint: function (req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  validateArnRegion: function validateArnRegion(req) {\n    s3util.validateArnRegion(req, {\n      allowFipsEndpoint: true\n    });\n  },\n  /**\r\n   * Validate resource-type supplied in S3 ARN\r\n   */\n  validateArnResourceType: function validateArnResourceType(req) {\n    var resource = req._parsedArn.resource;\n    if (resource.indexOf('accesspoint:') !== 0 && resource.indexOf('accesspoint/') !== 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'accesspoint/\\''\n      });\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params);\n        // Need to include trailing slash to match sigv2 behavior\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(), {\n          code: 'InvalidBucket',\n          message: msg\n        });\n      }\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = ['createBucket', 'deleteBucket', 'listBuckets'];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n  /**\r\n   * When us-east-1 region endpoint configuration is set, in stead of sending request to\r\n   * global endpoint(e.g. 's3.amazonaws.com'), we will send request to\r\n   * 's3.us-east-1.amazonaws.com'.\r\n   * @api private\r\n   */\n  optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: 'AWS_S3_US_EAST_1_REGIONAL_ENDPOINT',\n      sharedConfig: 's3_us_east_1_regional_endpoint',\n      clientConfig: 's3UsEast1RegionalEndpoint'\n    });\n    if (!(service._originalConfig || {}).endpoint && req.httpRequest.region === 'us-east-1' && config.s3UsEast1RegionalEndpoint === 'regional' && req.httpRequest.endpoint.hostname.indexOf('s3.amazonaws.com') >= 0) {\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      regionalEndpoint = config.endpoint.substring(0, insertPoint) + '.us-east-1' + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n    }\n  },\n  /**\r\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\r\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\r\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\r\n   * ssl wildcard certificate is only 1-level deep.\r\n   *\r\n   * @api private\r\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstackEndpoint) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname = b + '.' + endpoint.hostname;\n        }\n        var port = endpoint.port;\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' + endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n  /**\r\n   * Takes the bucket name out of the path if bucket is virtual-hosted\r\n   *\r\n   * @api private\r\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n  /**\r\n   * When user supply an access point ARN in the Bucket parameter, we need to\r\n   * populate the URI according to the ARN.\r\n   */\n  populateUriFromAccessPointArn: function populateUriFromAccessPointArn(req) {\n    var accessPointArn = req._parsedArn;\n    var isOutpostArn = accessPointArn.service === 's3-outposts';\n    var isObjectLambdaArn = accessPointArn.service === 's3-object-lambda';\n    var outpostsSuffix = isOutpostArn ? '.' + accessPointArn.outpostId : '';\n    var serviceName = isOutpostArn ? 's3-outposts' : 's3-accesspoint';\n    var fipsSuffix = !isOutpostArn && req.service.config.useFipsEndpoint ? '-fips' : '';\n    var dualStackSuffix = !isOutpostArn && req.service.config.useDualstackEndpoint ? '.dualstack' : '';\n    var endpoint = req.httpRequest.endpoint;\n    var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);\n    var useArnRegion = req.service.config.s3UseArnRegion;\n    endpoint.hostname = [accessPointArn.accessPoint + '-' + accessPointArn.accountId + outpostsSuffix, serviceName + fipsSuffix + dualStackSuffix, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix].join('.');\n    if (isObjectLambdaArn) {\n      // should be in the format: \"accesspoint/${accesspointName}\"\n      var serviceName = 's3-object-lambda';\n      var accesspointName = accessPointArn.resource.split('/')[1];\n      var fipsSuffix = req.service.config.useFipsEndpoint ? '-fips' : '';\n      endpoint.hostname = [accesspointName + '-' + accessPointArn.accountId, serviceName + fipsSuffix, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix].join('.');\n    }\n    endpoint.host = endpoint.hostname;\n    var encodedArn = AWS.util.uriEscape(req.params.Bucket);\n    var path = req.httpRequest.path;\n    //remove the Bucket value from path\n    req.httpRequest.path = path.replace(new RegExp('/' + encodedArn), '');\n    if (req.httpRequest.path[0] !== '/') {\n      req.httpRequest.path = '/' + req.httpRequest.path;\n    }\n    req.httpRequest.region = accessPointArn.region; //region used to sign\n  },\n\n  /**\r\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\r\n   * @api private\r\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n  /**\r\n   * Adds a default content type if none is supplied.\r\n   *\r\n   * @api private\r\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n    if (!httpRequest.headers['Content-Type']) {\n      // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n    var contentType = httpRequest.headers['Content-Type'];\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function (_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n        httpRequest.headers['Content-Type'] = contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n  /**\r\n   * Checks whether checksums should be computed for the request if it's not\r\n   * already set by {AWS.EventListeners.Core.COMPUTE_CHECKSUM}. It depends on\r\n   * whether {AWS.Config.computeChecksums} is set.\r\n   *\r\n   * @param req [AWS.Request] the request to check against\r\n   * @return [Boolean] whether to compute checksums for a request.\r\n   * @api private\r\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    var rules = req.service.api.operations[req.operation].input.members;\n    var body = req.httpRequest.body;\n    var needsContentMD5 = req.service.config.computeChecksums && rules.ContentMD5 && !req.params.ContentMD5 && body && (AWS.util.Buffer.isBuffer(req.httpRequest.body) || typeof req.httpRequest.body === 'string');\n\n    // Sha256 signing disabled, and not a presigned url\n    if (needsContentMD5 && req.service.shouldDisableBodySigning(req) && !req.isPresigned()) {\n      return true;\n    }\n\n    // SigV2 and presign, for backwards compatibility purpose.\n    if (needsContentMD5 && this.getSignatureVersion(req) === 's3' && req.isPresigned()) {\n      return true;\n    }\n    return false;\n  },\n  /**\r\n   * A listener that computes the Content-MD5 and sets it in the header.\r\n   * This listener is to support S3-specific features like\r\n   * s3DisableBodySigning and SigV2 presign. Content MD5 logic for SigV4 is\r\n   * handled in AWS.EventListeners.Core.COMPUTE_CHECKSUM\r\n   *\r\n   * @api private\r\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function (key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n  /**\r\n   * Returns true if the bucket name should be left in the URI path for\r\n   * a request to S3.  This function takes into account the current\r\n   * endpoint protocol (e.g. http or https).\r\n   *\r\n   * @api private\r\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n    if (s3util.dnsCompatibleBucketName(bucketName)) {\n      return this.config.sslEnabled && bucketName.match(/\\./) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\r\n   * For COPY operations, some can be error even with status code 200.\r\n   * SDK treats the response as exception when response body indicates\r\n   * an exception or body is empty.\r\n   *\r\n   * @api private\r\n   */\n  extractErrorFrom200Response: function extractErrorFrom200Response(resp) {\n    if (!operationsWith200StatusCodeError[resp.request.operation]) return;\n    var httpResponse = resp.httpResponse;\n    if (httpResponse.body && httpResponse.body.toString().match('<Error>')) {\n      // Response body with '<Error>...</Error>' indicates an exception.\n      // Get S3 client object. In ManagedUpload, this.service refers to\n      // S3 client object.\n      resp.data = null;\n      var service = this.service ? this.service : this;\n      service.extractError(resp);\n      throw resp.error;\n    } else if (!httpResponse.body || !httpResponse.body.toString().match(/<[\\w_]/)) {\n      // When body is empty or incomplete, S3 might stop the request on detecting client\n      // side aborting the request.\n      resp.data = null;\n      throw AWS.util.error(new Error(), {\n        code: 'InternalError',\n        message: 'S3 aborted request'\n      });\n    }\n  },\n  /**\r\n   * @return [Boolean] whether the error can be retried\r\n   * @api private\r\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] && error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket && request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error && regionRedirectErrorCodes.indexOf(error.code) != -1 && error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n  /**\r\n   * Updates httpRequest with region. If region is not provided, then\r\n   * the httpRequest will be updated based on httpRequest.region\r\n   *\r\n   * @api private\r\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n    httpRequest.endpoint = new AWS.S3(newConfig).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n  /**\r\n   * Provides a specialized parser for getBucketLocation -- all other\r\n   * operations are parsed by the super class.\r\n   *\r\n   * @api private\r\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n    var bucket = req.params.Bucket || null;\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n      if (region) {\n        if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n          req.service.bucketRegionCache[bucket] = region;\n        }\n      }\n    }\n    req.service.extractRequestIds(resp);\n  },\n  /**\r\n   * Extracts an error object from the http response.\r\n   *\r\n   * @api private\r\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n    var cachedRegion;\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n      if (data.Region && !region) {\n        region = data.Region;\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n    req.service.extractRequestIds(resp);\n  },\n  /**\r\n   * If region was not obtained synchronously, then send async request\r\n   * to get bucket region for errors resulting from wrong region.\r\n   *\r\n   * @api private\r\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n    if (!error || !bucket || error.region || req.operation === 'listObjects' || AWS.util.isNode() && req.operation === 'headBucket' || error.statusCode === 400 && req.operation !== 'headObject' || regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {\n      Bucket: bucket\n    };\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function () {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n  /**\r\n  * For browser only. If NetworkingError received, will attempt to obtain\r\n  * the bucket region.\r\n  *\r\n  * @api private\r\n  */\n  reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n    if (!error || error.code !== 'NetworkingError' || !bucket || request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!s3util.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({\n        Bucket: bucket,\n        MaxKeys: 0\n      });\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n      getRegionReq.send(function () {\n        var region = service.bucketRegionCache[bucket] || null;\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n  },\n  /**\r\n   * Cache for bucket region.\r\n   *\r\n   * @api private\r\n   */\n  bucketRegionCache: {},\n  /**\r\n   * Clears bucket region cache.\r\n   *\r\n   * @api private\r\n   */\n  clearBucketRegionCache: function (buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n    return bucketRegionCache;\n  },\n  /**\r\n   * Corrects request region if bucket's cached region is different\r\n   *\r\n   * @api private\r\n   */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n  /**\r\n   * Extracts S3 specific request ids from the http response.\r\n   *\r\n   * @api private\r\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n  /**\r\n   * Get a pre-signed URL for a given operation name.\r\n   *\r\n   * @note You must ensure that you have static or previously resolved\r\n   *   credentials if you call this method synchronously (with no callback),\r\n   *   otherwise it may not properly sign the request. If you cannot guarantee\r\n   *   this (you are using an asynchronous credential provider, i.e., EC2\r\n   *   IAM roles), you should always call this method with an asynchronous\r\n   *   callback.\r\n   * @note Not all operation parameters are supported when using pre-signed\r\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\r\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\r\n   *   request. If you are using pre-signed URLs to upload from a browser and\r\n   *   need to use these fields, see {createPresignedPost}.\r\n   * @note The default signer allows altering the request by adding corresponding\r\n   *   headers to set some parameters (e.g. Range) and these added parameters\r\n   *   won't be signed. You must use signatureVersion v4 to to include these\r\n   *   parameters in the signed portion of the URL and enforce exact matching\r\n   *   between headers and signed params in the URL.\r\n   * @note This operation cannot be used with a promise. See note above regarding\r\n   *   asynchronous credentials and use with a callback.\r\n   * @param operation [String] the name of the operation to call\r\n   * @param params [map] parameters to pass to the operation. See the given\r\n   *   operation for the expected operation parameters. In addition, you can\r\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\r\n   *   work for.\r\n   * @option params Expires [Integer] (900) the number of seconds to expire\r\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\r\n   * @param callback [Function] if a callback is provided, this function will\r\n   *   pass the URL as the second parameter (after the error parameter) to\r\n   *   the callback function.\r\n   * @return [String] if called synchronously (with no callback), returns the\r\n   *   signed URL.\r\n   * @return [null] nothing is returned if a callback is provided.\r\n   * @example Pre-signing a getObject operation (synchronously)\r\n   *   var params = {Bucket: 'bucket', Key: 'key'};\r\n   *   var url = s3.getSignedUrl('getObject', params);\r\n   *   console.log('The URL is', url);\r\n   * @example Pre-signing a putObject (asynchronously)\r\n   *   var params = {Bucket: 'bucket', Key: 'key'};\r\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\r\n   *     console.log('The URL is', url);\r\n   *   });\r\n   * @example Pre-signing a putObject operation with a specific payload\r\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\r\n   *   var url = s3.getSignedUrl('putObject', params);\r\n   *   console.log('The URL is', url);\r\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\r\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\r\n   *   var url = s3.getSignedUrl('getObject', params);\r\n   *   console.log('The URL is', url); // expires in 60 seconds\r\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidParameterException',\n        message: 'The expiration must be a number, received ' + typeof expires\n      });\n    }\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n    if (callback) {\n      AWS.util.defer(function () {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n  /**\r\n   * @!method  getSignedUrlPromise()\r\n   *   Returns a 'thenable' promise that will be resolved with a pre-signed URL\r\n   *   for a given operation name.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @note Not all operation parameters are supported when using pre-signed\r\n   *      URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\r\n   *      `ContentLength`, or `Tagging` must be provided as headers when sending a\r\n   *      request. If you are using pre-signed URLs to upload from a browser and\r\n   *      need to use these fields, see {createPresignedPost}.\r\n   *   @param operation [String] the name of the operation to call\r\n   *   @param params [map] parameters to pass to the operation. See the given\r\n   *      operation for the expected operation parameters. In addition, you can\r\n   *      also pass the \"Expires\" parameter to inform S3 how long the URL should\r\n   *      work for.\r\n   *   @option params Expires [Integer] (900) the number of seconds to expire\r\n   *      the pre-signed URL operation in. Defaults to 15 minutes.\r\n   *   @callback fulfilledCallback function(url)\r\n   *     Called if the promise is fulfilled.\r\n   *     @param url [String] the signed url\r\n   *   @callback rejectedCallback function(err)\r\n   *     Called if the promise is rejected.\r\n   *     @param err [Error] if an error occurred, this value will be filled\r\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\r\n   *   @example Pre-signing a getObject operation\r\n   *      var params = {Bucket: 'bucket', Key: 'key'};\r\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\r\n   *      promise.then(function(url) {\r\n   *        console.log('The URL is', url);\r\n   *      }, function(err) { ... });\r\n   *   @example Pre-signing a putObject operation with a specific payload\r\n   *      var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\r\n   *      var promise = s3.getSignedUrlPromise('putObject', params);\r\n   *      promise.then(function(url) {\r\n   *        console.log('The URL is', url);\r\n   *      }, function(err) { ... });\r\n   *   @example Passing in a 1-minute expiry time for a pre-signed URL\r\n   *      var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\r\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\r\n   *      promise.then(function(url) {\r\n   *        console.log('The URL is', url);\r\n   *      }, function(err) { ... });\r\n   */\n\n  /**\r\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\r\n   * HTML form.\r\n   *\r\n   * @param params [map]\r\n   * @option params Bucket [String]     The bucket to which the post should be\r\n   *                                    uploaded\r\n   * @option params Expires [Integer]   (3600) The number of seconds for which\r\n   *                                    the presigned policy should be valid.\r\n   * @option params Conditions [Array]  An array of conditions that must be met\r\n   *                                    for the presigned policy to allow the\r\n   *                                    upload. This can include required tags,\r\n   *                                    the accepted range for content lengths,\r\n   *                                    etc.\r\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\r\n   * @option params Fields [map]        Fields to include in the form. All\r\n   *                                    values passed in as fields will be\r\n   *                                    signed as exact match conditions.\r\n   * @param callback [Function]\r\n   *\r\n   * @note All fields passed in when creating presigned post data will be signed\r\n   *   as exact match conditions. Any fields that will be interpolated by S3\r\n   *   must be added to the fields hash after signing, and an appropriate\r\n   *   condition for such fields must be explicitly added to the Conditions\r\n   *   array passed to this function before signing.\r\n   *\r\n   * @example Presiging post data with a known key\r\n   *   var params = {\r\n   *     Bucket: 'bucket',\r\n   *     Fields: {\r\n   *       key: 'key'\r\n   *     }\r\n   *   };\r\n   *   s3.createPresignedPost(params, function(err, data) {\r\n   *     if (err) {\r\n   *       console.error('Presigning post data encountered an error', err);\r\n   *     } else {\r\n   *       console.log('The post data is', data);\r\n   *     }\r\n   *   });\r\n   *\r\n   * @example Presigning post data with an interpolated key\r\n   *   var params = {\r\n   *     Bucket: 'bucket',\r\n   *     Conditions: [\r\n   *       ['starts-with', '$key', 'path/to/uploads/']\r\n   *     ]\r\n   *   };\r\n   *   s3.createPresignedPost(params, function(err, data) {\r\n   *     if (err) {\r\n   *       console.error('Presigning post data encountered an error', err);\r\n   *     } else {\r\n   *       data.Fields.key = 'path/to/uploads/${filename}';\r\n   *       console.log('The post data is', data);\r\n   *     }\r\n   *   });\r\n   *\r\n   * @note You must ensure that you have static or previously resolved\r\n   *   credentials if you call this method synchronously (with no callback),\r\n   *   otherwise it may not properly sign the request. If you cannot guarantee\r\n   *   this (you are using an asynchronous credential provider, i.e., EC2\r\n   *   IAM roles), you should always call this method with an asynchronous\r\n   *   callback.\r\n   *\r\n   * @return [map]  If called synchronously (with no callback), returns a hash\r\n   *                with the url to set as the form action and a hash of fields\r\n   *                to include in the form.\r\n   * @return [null] Nothing is returned if a callback is provided.\r\n   *\r\n   * @callback callback function (err, data)\r\n   *  @param err [Error] the error object returned from the policy signer\r\n   *  @param data [map] The data necessary to construct an HTML form\r\n   *  @param data.url [String] The URL to use as the action of the form\r\n   *  @param data.fields [map] A hash of fields that must be included in the\r\n   *                           form for the upload to succeed. This hash will\r\n   *                           include the signed POST policy, your access key\r\n   *                           ID and security token (if present), etc. These\r\n   *                           may be safely included as input elements of type\r\n   *                           'hidden.'\r\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n      self = this,\n      config = this.config,\n      endpoint = AWS.util.copy(this.endpoint);\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(config.credentials, config.region, bucket, params.Fields, params.Conditions, params.Expires)\n      };\n    }\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        } else {\n          try {\n            callback(null, finalizePost());\n          } catch (err) {\n            callback(err);\n          }\n        }\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  preparePostFields: function preparePostFields(credentials, region, bucket, fields, conditions, expiresInSeconds) {\n    var now = this.getSkewCorrectedDate();\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,' + ' region, and credentials');\n    }\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n    fields.Policy = this.preparePostPolicy(new Date(now.valueOf() + expiresInSeconds * 1000), conditions);\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true), fields.Policy, 'hex');\n    return fields;\n  },\n  /**\r\n   * @api private\r\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n  /**\r\n   * @api private\r\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n  /**\r\n   * @api private\r\n   * @param request\r\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers;\n    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n  /**\r\n   * @api private\r\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {\n        code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'\n      });\n    }\n  },\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n    var hostname = this.endpoint.hostname;\n    // copy params so that appending keys does not unintentioinallly\n    // mutate params object argument passed in by user\n    var copiedParams = AWS.util.copy(params);\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      copiedParams.CreateBucketConfiguration = {\n        LocationConstraint: this.config.region\n      };\n    }\n    return this.makeRequest('createBucket', copiedParams, callback);\n  },\n  writeGetObjectResponse: function writeGetObjectResponse(params, callback) {\n    var request = this.makeRequest('writeGetObjectResponse', AWS.util.copy(params), callback);\n    var hostname = this.endpoint.hostname;\n    if (hostname.indexOf(this.config.region) !== -1) {\n      // hostname specifies a region already\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.');\n    } else {\n      // Hostname doesn't have a region.\n      // Object Lambda requires an explicit region.\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.' + this.config.region + '.');\n    }\n    request.httpRequest.endpoint = new AWS.Endpoint(hostname, this.config);\n    return request;\n  },\n  /**\r\n   * @see AWS.S3.ManagedUpload\r\n   * @overload upload(params = {}, [options], [callback])\r\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\r\n   *   concurrent handling of parts if the payload is large enough. You can\r\n   *   configure the concurrent queue size by setting `options`. Note that this\r\n   *   is the only operation for which the SDK can retry requests with stream\r\n   *   bodies.\r\n   *\r\n   *   @param (see AWS.S3.putObject)\r\n   *   @option (see AWS.S3.ManagedUpload.constructor)\r\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\r\n   *     `send()` or track progress.\r\n   *   @example Uploading a stream object\r\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\r\n   *     s3.upload(params, function(err, data) {\r\n   *       console.log(err, data);\r\n   *     });\r\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\r\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\r\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\r\n   *     s3.upload(params, options, function(err, data) {\r\n   *       console.log(err, data);\r\n   *     });\r\n   * @callback callback function(err, data)\r\n   *   @param err [Error] an error or null if no error occurred.\r\n   *   @param data [map] The response data from the successful upload:\r\n   *   @param data.Location [String] the URL of the uploaded object\r\n   *   @param data.ETag [String] the ETag of the uploaded object\r\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\r\n   *   @param data.Key [String] the key to which the object was uploaded\r\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n    options = options || {};\n    options = AWS.util.merge(options || {}, {\n      service: this,\n      params: params\n    });\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});\n\n/**\r\n * @api private\r\n */\nAWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod('getSignedUrl', PromiseDependency);\n};\n\n/**\r\n * @api private\r\n */\nAWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getSignedUrlPromise;\n};\nAWS.util.addPromises(AWS.S3);","map":{"version":3,"names":["AWS","require","v4Credentials","resolveRegionalEndpointsFlag","s3util","regionUtil","operationsWith200StatusCodeError","regionRedirectErrorCodes","OBJECT_LAMBDA_SERVICE","util","update","S3","prototype","getSignatureVersion","request","defaultApiVersion","api","signatureVersion","userDefinedVersion","_originalConfig","regionDefinedVersion","config","isPresigned","getSigningName","req","operation","_super","Service","_parsedArn","service","call","getSignerClass","Signers","RequestSigner","getVersion","validateService","msg","messages","region","endpoint","s3BucketEndpoint","push","length","join","error","Error","name","message","shouldDisableBodySigning","signerClass","s3DisableBodySigning","V4","httpRequest","protocol","setupRequestListeners","prependListener","addListener","validateScheme","validateBucketName","optInUsEast1RegionalEndpoint","removeListener","EventListeners","Core","VALIDATE_REGION","addContentType","computeContentMd5","computeSseCustomerKeyMd5","populateURI","addExpect100Continue","extractError","hoistPayloadMember","extractData","extractErrorFrom200Response","prepareSignedUrl","COMPUTE_SHA256","disableBodySigning","isArnInParam","ARN","parse","params","Bucket","validateS3AccessPointArn","validateArnResourceType","validateArnRegion","validateOutpostsAccessPointArn","validateOutpostsArn","validateArnAccount","validateArnService","populateUriFromAccessPointArn","validatePopulateUriFromArn","validateBucketEndpoint","correctBucketRegionFromCache","onAsync","requestBucketRegion","isBrowser","reqRegionForNetworkingError","scheme","sensitive","SSECustomerKey","CopySourceSSECustomerKey","code","allowFipsEndpoint","resource","indexOf","bucket","key","Key","slashIndex","copy","prefix","substr","isValidAccelerateOperation","invalidOperations","s3UsEast1RegionalEndpoint","env","sharedConfig","clientConfig","hostname","insertPoint","regionalEndpoint","substring","updateEndpoint","b","pathStyleBucketName","useAccelerateEndpoint","useDualstackEndpoint","port","host","virtualHostedBucket","removeVirtualHostedBucketFromPath","path","encodedS3Key","uriEscapePath","replace","RegExp","accessPointArn","isOutpostArn","isObjectLambdaArn","outpostsSuffix","outpostId","serviceName","fipsSuffix","useFipsEndpoint","dualStackSuffix","dnsSuffix","getEndpointSuffix","useArnRegion","s3UseArnRegion","accessPoint","accountId","accesspointName","split","encodedArn","uriEscape","len","headers","isNode","Body","stream","Stream","method","contentType","body","match","charset","replaceFn","_","charsetName","toUpperCase","willComputeChecksums","rules","operations","input","members","needsContentMD5","computeChecksums","ContentMD5","Buffer","isBuffer","md5","crypto","keys","each","header","value","bucketName","s3ForcePathStyle","dnsCompatibleBucketName","sslEnabled","resp","httpResponse","toString","data","retryableError","statusCode","_requestRegionForBucket","bucketRegionCache","updateReqBucketRegion","s3Config","newConfig","Host","_asm","currentState","LocationConstraint","clearBucketRegionCache","createBucketConfiguration","CreateBucketConfiguration","extractRequestIds","codes","cachedRegion","XML","Parser","Region","Code","Message","done","reqOperation","reqParams","MaxKeys","regionReq","send","getRegionReq","listObjects","buckets","Object","i","requestRegion","extendedRequestId","cfId","requestId","getSignedUrl","callback","expires","Expires","makeRequest","defer","presign","createPresignedPost","undefined","boundParams","self","pathname","finalizePost","url","urlFormat","fields","preparePostFields","credentials","Fields","Conditions","getCredentials","err","conditions","expiresInSeconds","now","getSkewCorrectedDate","slice","signingDate","date","iso8601","shortDate","scope","createScope","credential","accessKeyId","sessionToken","field","hasOwnProperty","condition","Policy","preparePostPolicy","Date","valueOf","hmac","getSigningKey","expiration","base64","encode","JSON","stringify","noPresignedContentLength","ContentLength","createBucket","copiedParams","globalEndpoint","writeGetObjectResponse","Endpoint","upload","options","merge","uploader","ManagedUpload","addPromisesToClass","PromiseDependency","getSignedUrlPromise","promisifyMethod","deletePromisesFromClass","addPromises"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/services/s3.js"],"sourcesContent":["var AWS = require('../core');\r\nvar v4Credentials = require('../signers/v4_credentials');\r\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\r\nvar s3util = require('./s3util');\r\nvar regionUtil = require('../region_config');\r\n\r\n// Pull in managed upload extension\r\nrequire('../s3/managed_upload');\r\n\r\n/**\r\n * @api private\r\n */\r\nvar operationsWith200StatusCodeError = {\r\n  'completeMultipartUpload': true,\r\n  'copyObject': true,\r\n  'uploadPartCopy': true\r\n};\r\n\r\n/**\r\n * @api private\r\n */\r\n var regionRedirectErrorCodes = [\r\n  'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\r\n  'BadRequest', // head operations on virtual-hosted global bucket endpoints\r\n  'PermanentRedirect', // non-head operations on path-style or regional endpoints\r\n  301 // head operations on path-style or regional endpoints\r\n ];\r\n\r\nvar OBJECT_LAMBDA_SERVICE = 's3-object-lambda';\r\n\r\nAWS.util.update(AWS.S3.prototype, {\r\n  /**\r\n   * @api private\r\n   */\r\n  getSignatureVersion: function getSignatureVersion(request) {\r\n    var defaultApiVersion = this.api.signatureVersion;\r\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\r\n    var regionDefinedVersion = this.config.signatureVersion;\r\n    var isPresigned = request ? request.isPresigned() : false;\r\n    /*\r\n      1) User defined version specified:\r\n        a) always return user defined version\r\n      2) No user defined version specified:\r\n        a) If not using presigned urls, default to V4\r\n        b) If using presigned urls, default to lowest version the region supports\r\n    */\r\n    if (userDefinedVersion) {\r\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\r\n      return userDefinedVersion;\r\n    }\r\n    if (isPresigned !== true) {\r\n      defaultApiVersion = 'v4';\r\n    } else if (regionDefinedVersion) {\r\n      defaultApiVersion = regionDefinedVersion;\r\n    }\r\n    return defaultApiVersion;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getSigningName: function getSigningName(req) {\r\n    if (req && req.operation === 'writeGetObjectResponse') {\r\n      return OBJECT_LAMBDA_SERVICE;\r\n    }\r\n\r\n    var _super = AWS.Service.prototype.getSigningName;\r\n    return (req && req._parsedArn && req._parsedArn.service)\r\n      ? req._parsedArn.service\r\n      : _super.call(this);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  getSignerClass: function getSignerClass(request) {\r\n    var signatureVersion = this.getSignatureVersion(request);\r\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  validateService: function validateService() {\r\n    var msg;\r\n    var messages = [];\r\n\r\n    // default to us-east-1 when no region is provided\r\n    if (!this.config.region) this.config.region = 'us-east-1';\r\n\r\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\r\n      messages.push('An endpoint must be provided when configuring ' +\r\n                    '`s3BucketEndpoint` to true.');\r\n    }\r\n    if (messages.length === 1) {\r\n      msg = messages[0];\r\n    } else if (messages.length > 1) {\r\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\r\n    }\r\n    if (msg) {\r\n      throw AWS.util.error(new Error(),\r\n        {name: 'InvalidEndpoint', message: msg});\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\r\n    var signerClass = this.getSignerClass();\r\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4\r\n        && request.httpRequest.endpoint.protocol === 'https:') {\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  setupRequestListeners: function setupRequestListeners(request) {\r\n    var prependListener = true;\r\n    request.addListener('validate', this.validateScheme);\r\n    request.addListener('validate', this.validateBucketName, prependListener);\r\n    request.addListener('validate', this.optInUsEast1RegionalEndpoint, prependListener);\r\n\r\n    request.removeListener('validate',\r\n      AWS.EventListeners.Core.VALIDATE_REGION);\r\n    request.addListener('build', this.addContentType);\r\n    request.addListener('build', this.computeContentMd5);\r\n    request.addListener('build', this.computeSseCustomerKeyMd5);\r\n    request.addListener('build', this.populateURI);\r\n    request.addListener('afterBuild', this.addExpect100Continue);\r\n    request.addListener('extractError', this.extractError);\r\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\r\n    request.addListener('extractData', this.extractData);\r\n    request.addListener('extractData', this.extractErrorFrom200Response);\r\n    request.addListener('beforePresign', this.prepareSignedUrl);\r\n    if (this.shouldDisableBodySigning(request))  {\r\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\r\n      request.addListener('afterBuild', this.disableBodySigning);\r\n    }\r\n    //deal with ARNs supplied to Bucket\r\n    if (request.operation !== 'createBucket' && s3util.isArnInParam(request, 'Bucket')) {\r\n      // avoid duplicate parsing in the future\r\n      request._parsedArn = AWS.util.ARN.parse(request.params.Bucket);\r\n\r\n      request.removeListener('validate', this.validateBucketName);\r\n      request.removeListener('build', this.populateURI);\r\n      if (request._parsedArn.service === 's3') {\r\n        request.addListener('validate', s3util.validateS3AccessPointArn);\r\n        request.addListener('validate', this.validateArnResourceType);\r\n        request.addListener('validate', this.validateArnRegion);\r\n      } else if (request._parsedArn.service === 's3-outposts') {\r\n        request.addListener('validate', s3util.validateOutpostsAccessPointArn);\r\n        request.addListener('validate', s3util.validateOutpostsArn);\r\n        request.addListener('validate', s3util.validateArnRegion);\r\n      }\r\n      request.addListener('validate', s3util.validateArnAccount);\r\n      request.addListener('validate', s3util.validateArnService);\r\n      request.addListener('build', this.populateUriFromAccessPointArn);\r\n      request.addListener('build', s3util.validatePopulateUriFromArn);\r\n      return;\r\n    }\r\n    //listeners regarding region inference\r\n    request.addListener('validate', this.validateBucketEndpoint);\r\n    request.addListener('validate', this.correctBucketRegionFromCache);\r\n    request.onAsync('extractError', this.requestBucketRegion);\r\n    if (AWS.util.isBrowser()) {\r\n      request.onAsync('retry', this.reqRegionForNetworkingError);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  validateScheme: function(req) {\r\n    var params = req.params,\r\n        scheme = req.httpRequest.endpoint.protocol,\r\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\r\n    if (sensitive && scheme !== 'https:') {\r\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' +\r\n        'to \\'true\\' in your configuration';\r\n      throw AWS.util.error(new Error(),\r\n        { code: 'ConfigError', message: msg });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  validateBucketEndpoint: function(req) {\r\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\r\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\r\n      throw AWS.util.error(new Error(),\r\n        { code: 'ConfigError', message: msg });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n   validateArnRegion: function validateArnRegion(req) {\r\n    s3util.validateArnRegion(req, { allowFipsEndpoint: true });\r\n  },\r\n\r\n  /**\r\n   * Validate resource-type supplied in S3 ARN\r\n   */\r\n  validateArnResourceType: function validateArnResourceType(req) {\r\n    var resource = req._parsedArn.resource;\r\n\r\n    if (\r\n      resource.indexOf('accesspoint:') !== 0 &&\r\n      resource.indexOf('accesspoint/') !== 0\r\n    ) {\r\n      throw AWS.util.error(new Error(), {\r\n        code: 'InvalidARN',\r\n        message: 'ARN resource should begin with \\'accesspoint/\\''\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  validateBucketName: function validateBucketName(req) {\r\n    var service = req.service;\r\n    var signatureVersion = service.getSignatureVersion(req);\r\n    var bucket = req.params && req.params.Bucket;\r\n    var key = req.params && req.params.Key;\r\n    var slashIndex = bucket && bucket.indexOf('/');\r\n    if (bucket && slashIndex >= 0) {\r\n      if (typeof key === 'string' && slashIndex > 0) {\r\n        req.params = AWS.util.copy(req.params);\r\n        // Need to include trailing slash to match sigv2 behavior\r\n        var prefix = bucket.substr(slashIndex + 1) || '';\r\n        req.params.Key = prefix + '/' + key;\r\n        req.params.Bucket = bucket.substr(0, slashIndex);\r\n      } else if (signatureVersion === 'v4') {\r\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\r\n        throw AWS.util.error(new Error(),\r\n          { code: 'InvalidBucket', message: msg });\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\r\n    var invalidOperations = [\r\n      'createBucket',\r\n      'deleteBucket',\r\n      'listBuckets'\r\n    ];\r\n    return invalidOperations.indexOf(operation) === -1;\r\n  },\r\n\r\n  /**\r\n   * When us-east-1 region endpoint configuration is set, in stead of sending request to\r\n   * global endpoint(e.g. 's3.amazonaws.com'), we will send request to\r\n   * 's3.us-east-1.amazonaws.com'.\r\n   * @api private\r\n   */\r\n  optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {\r\n    var service = req.service;\r\n    var config = service.config;\r\n    config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {\r\n      env: 'AWS_S3_US_EAST_1_REGIONAL_ENDPOINT',\r\n      sharedConfig: 's3_us_east_1_regional_endpoint',\r\n      clientConfig: 's3UsEast1RegionalEndpoint'\r\n    });\r\n    if (\r\n      !(service._originalConfig || {}).endpoint &&\r\n      req.httpRequest.region === 'us-east-1' &&\r\n      config.s3UsEast1RegionalEndpoint === 'regional' &&\r\n      req.httpRequest.endpoint.hostname.indexOf('s3.amazonaws.com') >= 0\r\n    ) {\r\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\r\n      regionalEndpoint = config.endpoint.substring(0, insertPoint) +\r\n        '.us-east-1' + config.endpoint.substring(insertPoint);\r\n      req.httpRequest.updateEndpoint(regionalEndpoint);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\r\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\r\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\r\n   * ssl wildcard certificate is only 1-level deep.\r\n   *\r\n   * @api private\r\n   */\r\n  populateURI: function populateURI(req) {\r\n    var httpRequest = req.httpRequest;\r\n    var b = req.params.Bucket;\r\n    var service = req.service;\r\n    var endpoint = httpRequest.endpoint;\r\n    if (b) {\r\n      if (!service.pathStyleBucketName(b)) {\r\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\r\n          if (service.config.useDualstackEndpoint) {\r\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\r\n          } else {\r\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\r\n          }\r\n        } else if (!service.config.s3BucketEndpoint) {\r\n          endpoint.hostname =\r\n            b + '.' + endpoint.hostname;\r\n        }\r\n\r\n        var port = endpoint.port;\r\n        if (port !== 80 && port !== 443) {\r\n          endpoint.host = endpoint.hostname + ':' +\r\n            endpoint.port;\r\n        } else {\r\n          endpoint.host = endpoint.hostname;\r\n        }\r\n\r\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\r\n        service.removeVirtualHostedBucketFromPath(req);\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Takes the bucket name out of the path if bucket is virtual-hosted\r\n   *\r\n   * @api private\r\n   */\r\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\r\n    var httpRequest = req.httpRequest;\r\n    var bucket = httpRequest.virtualHostedBucket;\r\n    if (bucket && httpRequest.path) {\r\n      if (req.params && req.params.Key) {\r\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\r\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\r\n          //path only contains key or path contains only key and querystring\r\n          return;\r\n        }\r\n      }\r\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\r\n      if (httpRequest.path[0] !== '/') {\r\n        httpRequest.path = '/' + httpRequest.path;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * When user supply an access point ARN in the Bucket parameter, we need to\r\n   * populate the URI according to the ARN.\r\n   */\r\n  populateUriFromAccessPointArn: function populateUriFromAccessPointArn(req) {\r\n    var accessPointArn = req._parsedArn;\r\n\r\n    var isOutpostArn = accessPointArn.service === 's3-outposts';\r\n    var isObjectLambdaArn = accessPointArn.service === 's3-object-lambda';\r\n\r\n    var outpostsSuffix = isOutpostArn ? '.' + accessPointArn.outpostId: '';\r\n    var serviceName = isOutpostArn ? 's3-outposts': 's3-accesspoint';\r\n    var fipsSuffix = !isOutpostArn && req.service.config.useFipsEndpoint ? '-fips': '';\r\n    var dualStackSuffix = !isOutpostArn &&\r\n      req.service.config.useDualstackEndpoint ? '.dualstack' : '';\r\n\r\n    var endpoint = req.httpRequest.endpoint;\r\n    var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);\r\n    var useArnRegion = req.service.config.s3UseArnRegion;\r\n\r\n    endpoint.hostname = [\r\n      accessPointArn.accessPoint + '-' + accessPointArn.accountId + outpostsSuffix,\r\n      serviceName + fipsSuffix + dualStackSuffix,\r\n      useArnRegion ? accessPointArn.region : req.service.config.region,\r\n      dnsSuffix\r\n    ].join('.');\r\n\r\n    if (isObjectLambdaArn) {\r\n      // should be in the format: \"accesspoint/${accesspointName}\"\r\n      var serviceName = 's3-object-lambda';\r\n      var accesspointName = accessPointArn.resource.split('/')[1];\r\n      var fipsSuffix = req.service.config.useFipsEndpoint ? '-fips': '';\r\n      endpoint.hostname = [\r\n        accesspointName + '-' + accessPointArn.accountId,\r\n        serviceName + fipsSuffix,\r\n        useArnRegion ? accessPointArn.region : req.service.config.region,\r\n        dnsSuffix\r\n      ].join('.');\r\n    }\r\n    endpoint.host = endpoint.hostname;\r\n    var encodedArn = AWS.util.uriEscape(req.params.Bucket);\r\n    var path = req.httpRequest.path;\r\n    //remove the Bucket value from path\r\n    req.httpRequest.path = path.replace(new RegExp('/' + encodedArn), '');\r\n    if (req.httpRequest.path[0] !== '/') {\r\n      req.httpRequest.path = '/' + req.httpRequest.path;\r\n    }\r\n    req.httpRequest.region = accessPointArn.region; //region used to sign\r\n  },\r\n\r\n  /**\r\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\r\n   * @api private\r\n   */\r\n  addExpect100Continue: function addExpect100Continue(req) {\r\n    var len = req.httpRequest.headers['Content-Length'];\r\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\r\n      req.httpRequest.headers['Expect'] = '100-continue';\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Adds a default content type if none is supplied.\r\n   *\r\n   * @api private\r\n   */\r\n  addContentType: function addContentType(req) {\r\n    var httpRequest = req.httpRequest;\r\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\r\n      // Content-Type is not set in GET/HEAD requests\r\n      delete httpRequest.headers['Content-Type'];\r\n      return;\r\n    }\r\n\r\n    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type\r\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\r\n    }\r\n\r\n    var contentType = httpRequest.headers['Content-Type'];\r\n    if (AWS.util.isBrowser()) {\r\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\r\n        var charset = '; charset=UTF-8';\r\n        httpRequest.headers['Content-Type'] += charset;\r\n      } else {\r\n        var replaceFn = function(_, prefix, charsetName) {\r\n          return prefix + charsetName.toUpperCase();\r\n        };\r\n\r\n        httpRequest.headers['Content-Type'] =\r\n          contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Checks whether checksums should be computed for the request if it's not\r\n   * already set by {AWS.EventListeners.Core.COMPUTE_CHECKSUM}. It depends on\r\n   * whether {AWS.Config.computeChecksums} is set.\r\n   *\r\n   * @param req [AWS.Request] the request to check against\r\n   * @return [Boolean] whether to compute checksums for a request.\r\n   * @api private\r\n   */\r\n  willComputeChecksums: function willComputeChecksums(req) {\r\n    var rules = req.service.api.operations[req.operation].input.members;\r\n    var body = req.httpRequest.body;\r\n    var needsContentMD5 = req.service.config.computeChecksums &&\r\n      rules.ContentMD5 &&\r\n      !req.params.ContentMD5 &&\r\n      body &&\r\n      (AWS.util.Buffer.isBuffer(req.httpRequest.body) || typeof req.httpRequest.body === 'string');\r\n\r\n    // Sha256 signing disabled, and not a presigned url\r\n    if (needsContentMD5 && req.service.shouldDisableBodySigning(req) && !req.isPresigned()) {\r\n      return true;\r\n    }\r\n\r\n    // SigV2 and presign, for backwards compatibility purpose.\r\n    if (needsContentMD5 && this.getSignatureVersion(req) === 's3' && req.isPresigned()) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * A listener that computes the Content-MD5 and sets it in the header.\r\n   * This listener is to support S3-specific features like\r\n   * s3DisableBodySigning and SigV2 presign. Content MD5 logic for SigV4 is\r\n   * handled in AWS.EventListeners.Core.COMPUTE_CHECKSUM\r\n   *\r\n   * @api private\r\n   */\r\n  computeContentMd5: function computeContentMd5(req) {\r\n    if (req.service.willComputeChecksums(req)) {\r\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\r\n      req.httpRequest.headers['Content-MD5'] = md5;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\r\n    var keys = {\r\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\r\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\r\n    };\r\n    AWS.util.each(keys, function(key, header) {\r\n      if (req.params[key]) {\r\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\r\n        req.httpRequest.headers[header] = value;\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Returns true if the bucket name should be left in the URI path for\r\n   * a request to S3.  This function takes into account the current\r\n   * endpoint protocol (e.g. http or https).\r\n   *\r\n   * @api private\r\n   */\r\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\r\n    // user can force path style requests via the configuration\r\n    if (this.config.s3ForcePathStyle) return true;\r\n    if (this.config.s3BucketEndpoint) return false;\r\n\r\n    if (s3util.dnsCompatibleBucketName(bucketName)) {\r\n      return (this.config.sslEnabled && bucketName.match(/\\./)) ? true : false;\r\n    } else {\r\n      return true; // not dns compatible names must always use path style\r\n    }\r\n  },\r\n\r\n  /**\r\n   * For COPY operations, some can be error even with status code 200.\r\n   * SDK treats the response as exception when response body indicates\r\n   * an exception or body is empty.\r\n   *\r\n   * @api private\r\n   */\r\n  extractErrorFrom200Response: function extractErrorFrom200Response(resp) {\r\n    if (!operationsWith200StatusCodeError[resp.request.operation]) return;\r\n    var httpResponse = resp.httpResponse;\r\n    if (httpResponse.body && httpResponse.body.toString().match('<Error>')) {\r\n      // Response body with '<Error>...</Error>' indicates an exception.\r\n      // Get S3 client object. In ManagedUpload, this.service refers to\r\n      // S3 client object.\r\n      resp.data = null;\r\n      var service = this.service ? this.service : this;\r\n      service.extractError(resp);\r\n      throw resp.error;\r\n    } else if (!httpResponse.body || !httpResponse.body.toString().match(/<[\\w_]/)) {\r\n      // When body is empty or incomplete, S3 might stop the request on detecting client\r\n      // side aborting the request.\r\n      resp.data = null;\r\n      throw AWS.util.error(new Error(), {\r\n        code: 'InternalError',\r\n        message: 'S3 aborted request'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @return [Boolean] whether the error can be retried\r\n   * @api private\r\n   */\r\n  retryableError: function retryableError(error, request) {\r\n    if (operationsWith200StatusCodeError[request.operation] &&\r\n        error.statusCode === 200) {\r\n      return true;\r\n    } else if (request._requestRegionForBucket &&\r\n        request.service.bucketRegionCache[request._requestRegionForBucket]) {\r\n      return false;\r\n    } else if (error && error.code === 'RequestTimeout') {\r\n      return true;\r\n    } else if (error &&\r\n        regionRedirectErrorCodes.indexOf(error.code) != -1 &&\r\n        error.region && error.region != request.httpRequest.region) {\r\n      request.httpRequest.region = error.region;\r\n      if (error.statusCode === 301) {\r\n        request.service.updateReqBucketRegion(request);\r\n      }\r\n      return true;\r\n    } else {\r\n      var _super = AWS.Service.prototype.retryableError;\r\n      return _super.call(this, error, request);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Updates httpRequest with region. If region is not provided, then\r\n   * the httpRequest will be updated based on httpRequest.region\r\n   *\r\n   * @api private\r\n   */\r\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\r\n    var httpRequest = request.httpRequest;\r\n    if (typeof region === 'string' && region.length) {\r\n      httpRequest.region = region;\r\n    }\r\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\r\n      return;\r\n    }\r\n    var service = request.service;\r\n    var s3Config = service.config;\r\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\r\n    if (s3BucketEndpoint) {\r\n      delete s3Config.s3BucketEndpoint;\r\n    }\r\n    var newConfig = AWS.util.copy(s3Config);\r\n    delete newConfig.endpoint;\r\n    newConfig.region = httpRequest.region;\r\n\r\n    httpRequest.endpoint = (new AWS.S3(newConfig)).endpoint;\r\n    service.populateURI(request);\r\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\r\n    httpRequest.headers.Host = httpRequest.endpoint.host;\r\n\r\n    if (request._asm.currentState === 'validate') {\r\n      request.removeListener('build', service.populateURI);\r\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Provides a specialized parser for getBucketLocation -- all other\r\n   * operations are parsed by the super class.\r\n   *\r\n   * @api private\r\n   */\r\n  extractData: function extractData(resp) {\r\n    var req = resp.request;\r\n    if (req.operation === 'getBucketLocation') {\r\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\r\n      delete resp.data['_'];\r\n      if (match) {\r\n        resp.data.LocationConstraint = match[1];\r\n      } else {\r\n        resp.data.LocationConstraint = '';\r\n      }\r\n    }\r\n    var bucket = req.params.Bucket || null;\r\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\r\n      req.service.clearBucketRegionCache(bucket);\r\n    } else {\r\n      var headers = resp.httpResponse.headers || {};\r\n      var region = headers['x-amz-bucket-region'] || null;\r\n      if (!region && req.operation === 'createBucket' && !resp.error) {\r\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\r\n        if (!createBucketConfiguration) {\r\n          region = 'us-east-1';\r\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\r\n          region = 'eu-west-1';\r\n        } else {\r\n          region = createBucketConfiguration.LocationConstraint;\r\n        }\r\n      }\r\n      if (region) {\r\n          if (bucket && region !== req.service.bucketRegionCache[bucket]) {\r\n            req.service.bucketRegionCache[bucket] = region;\r\n          }\r\n      }\r\n    }\r\n    req.service.extractRequestIds(resp);\r\n  },\r\n\r\n  /**\r\n   * Extracts an error object from the http response.\r\n   *\r\n   * @api private\r\n   */\r\n  extractError: function extractError(resp) {\r\n    var codes = {\r\n      304: 'NotModified',\r\n      403: 'Forbidden',\r\n      400: 'BadRequest',\r\n      404: 'NotFound'\r\n    };\r\n\r\n    var req = resp.request;\r\n    var code = resp.httpResponse.statusCode;\r\n    var body = resp.httpResponse.body || '';\r\n\r\n    var headers = resp.httpResponse.headers || {};\r\n    var region = headers['x-amz-bucket-region'] || null;\r\n    var bucket = req.params.Bucket || null;\r\n    var bucketRegionCache = req.service.bucketRegionCache;\r\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\r\n      bucketRegionCache[bucket] = region;\r\n    }\r\n\r\n    var cachedRegion;\r\n    if (codes[code] && body.length === 0) {\r\n      if (bucket && !region) {\r\n        cachedRegion = bucketRegionCache[bucket] || null;\r\n        if (cachedRegion !== req.httpRequest.region) {\r\n          region = cachedRegion;\r\n        }\r\n      }\r\n      resp.error = AWS.util.error(new Error(), {\r\n        code: codes[code],\r\n        message: null,\r\n        region: region\r\n      });\r\n    } else {\r\n      var data = new AWS.XML.Parser().parse(body.toString());\r\n\r\n      if (data.Region && !region) {\r\n        region = data.Region;\r\n        if (bucket && region !== bucketRegionCache[bucket]) {\r\n          bucketRegionCache[bucket] = region;\r\n        }\r\n      } else if (bucket && !region && !data.Region) {\r\n        cachedRegion = bucketRegionCache[bucket] || null;\r\n        if (cachedRegion !== req.httpRequest.region) {\r\n          region = cachedRegion;\r\n        }\r\n      }\r\n\r\n      resp.error = AWS.util.error(new Error(), {\r\n        code: data.Code || code,\r\n        message: data.Message || null,\r\n        region: region\r\n      });\r\n    }\r\n    req.service.extractRequestIds(resp);\r\n  },\r\n\r\n  /**\r\n   * If region was not obtained synchronously, then send async request\r\n   * to get bucket region for errors resulting from wrong region.\r\n   *\r\n   * @api private\r\n   */\r\n  requestBucketRegion: function requestBucketRegion(resp, done) {\r\n    var error = resp.error;\r\n    var req = resp.request;\r\n    var bucket = req.params.Bucket || null;\r\n\r\n    if (!error || !bucket || error.region || req.operation === 'listObjects' ||\r\n        (AWS.util.isNode() && req.operation === 'headBucket') ||\r\n        (error.statusCode === 400 && req.operation !== 'headObject') ||\r\n        regionRedirectErrorCodes.indexOf(error.code) === -1) {\r\n      return done();\r\n    }\r\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\r\n    var reqParams = {Bucket: bucket};\r\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\r\n    var regionReq = req.service[reqOperation](reqParams);\r\n    regionReq._requestRegionForBucket = bucket;\r\n    regionReq.send(function() {\r\n      var region = req.service.bucketRegionCache[bucket] || null;\r\n      error.region = region;\r\n      done();\r\n    });\r\n  },\r\n\r\n   /**\r\n   * For browser only. If NetworkingError received, will attempt to obtain\r\n   * the bucket region.\r\n   *\r\n   * @api private\r\n   */\r\n   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\r\n    if (!AWS.util.isBrowser()) {\r\n      return done();\r\n    }\r\n    var error = resp.error;\r\n    var request = resp.request;\r\n    var bucket = request.params.Bucket;\r\n    if (!error || error.code !== 'NetworkingError' || !bucket ||\r\n        request.httpRequest.region === 'us-east-1') {\r\n      return done();\r\n    }\r\n    var service = request.service;\r\n    var bucketRegionCache = service.bucketRegionCache;\r\n    var cachedRegion = bucketRegionCache[bucket] || null;\r\n\r\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\r\n      service.updateReqBucketRegion(request, cachedRegion);\r\n      done();\r\n    } else if (!s3util.dnsCompatibleBucketName(bucket)) {\r\n      service.updateReqBucketRegion(request, 'us-east-1');\r\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\r\n        bucketRegionCache[bucket] = 'us-east-1';\r\n      }\r\n      done();\r\n    } else if (request.httpRequest.virtualHostedBucket) {\r\n      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});\r\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\r\n      getRegionReq._requestRegionForBucket = bucket;\r\n\r\n      getRegionReq.send(function() {\r\n        var region = service.bucketRegionCache[bucket] || null;\r\n        if (region && region !== request.httpRequest.region) {\r\n          service.updateReqBucketRegion(request, region);\r\n        }\r\n        done();\r\n      });\r\n    } else {\r\n      // DNS-compatible path-style\r\n      // (s3ForcePathStyle or bucket name with dot over https)\r\n      // Cannot obtain region information for this case\r\n      done();\r\n    }\r\n   },\r\n\r\n  /**\r\n   * Cache for bucket region.\r\n   *\r\n   * @api private\r\n   */\r\n   bucketRegionCache: {},\r\n\r\n  /**\r\n   * Clears bucket region cache.\r\n   *\r\n   * @api private\r\n   */\r\n   clearBucketRegionCache: function(buckets) {\r\n    var bucketRegionCache = this.bucketRegionCache;\r\n    if (!buckets) {\r\n      buckets = Object.keys(bucketRegionCache);\r\n    } else if (typeof buckets === 'string') {\r\n      buckets = [buckets];\r\n    }\r\n    for (var i = 0; i < buckets.length; i++) {\r\n      delete bucketRegionCache[buckets[i]];\r\n    }\r\n    return bucketRegionCache;\r\n   },\r\n\r\n   /**\r\n    * Corrects request region if bucket's cached region is different\r\n    *\r\n    * @api private\r\n    */\r\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\r\n    var bucket = req.params.Bucket || null;\r\n    if (bucket) {\r\n      var service = req.service;\r\n      var requestRegion = req.httpRequest.region;\r\n      var cachedRegion = service.bucketRegionCache[bucket];\r\n      if (cachedRegion && cachedRegion !== requestRegion) {\r\n        service.updateReqBucketRegion(req, cachedRegion);\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Extracts S3 specific request ids from the http response.\r\n   *\r\n   * @api private\r\n   */\r\n  extractRequestIds: function extractRequestIds(resp) {\r\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\r\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\r\n    resp.extendedRequestId = extendedRequestId;\r\n    resp.cfId = cfId;\r\n\r\n    if (resp.error) {\r\n      resp.error.requestId = resp.requestId || null;\r\n      resp.error.extendedRequestId = extendedRequestId;\r\n      resp.error.cfId = cfId;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get a pre-signed URL for a given operation name.\r\n   *\r\n   * @note You must ensure that you have static or previously resolved\r\n   *   credentials if you call this method synchronously (with no callback),\r\n   *   otherwise it may not properly sign the request. If you cannot guarantee\r\n   *   this (you are using an asynchronous credential provider, i.e., EC2\r\n   *   IAM roles), you should always call this method with an asynchronous\r\n   *   callback.\r\n   * @note Not all operation parameters are supported when using pre-signed\r\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\r\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\r\n   *   request. If you are using pre-signed URLs to upload from a browser and\r\n   *   need to use these fields, see {createPresignedPost}.\r\n   * @note The default signer allows altering the request by adding corresponding\r\n   *   headers to set some parameters (e.g. Range) and these added parameters\r\n   *   won't be signed. You must use signatureVersion v4 to to include these\r\n   *   parameters in the signed portion of the URL and enforce exact matching\r\n   *   between headers and signed params in the URL.\r\n   * @note This operation cannot be used with a promise. See note above regarding\r\n   *   asynchronous credentials and use with a callback.\r\n   * @param operation [String] the name of the operation to call\r\n   * @param params [map] parameters to pass to the operation. See the given\r\n   *   operation for the expected operation parameters. In addition, you can\r\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\r\n   *   work for.\r\n   * @option params Expires [Integer] (900) the number of seconds to expire\r\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\r\n   * @param callback [Function] if a callback is provided, this function will\r\n   *   pass the URL as the second parameter (after the error parameter) to\r\n   *   the callback function.\r\n   * @return [String] if called synchronously (with no callback), returns the\r\n   *   signed URL.\r\n   * @return [null] nothing is returned if a callback is provided.\r\n   * @example Pre-signing a getObject operation (synchronously)\r\n   *   var params = {Bucket: 'bucket', Key: 'key'};\r\n   *   var url = s3.getSignedUrl('getObject', params);\r\n   *   console.log('The URL is', url);\r\n   * @example Pre-signing a putObject (asynchronously)\r\n   *   var params = {Bucket: 'bucket', Key: 'key'};\r\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\r\n   *     console.log('The URL is', url);\r\n   *   });\r\n   * @example Pre-signing a putObject operation with a specific payload\r\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\r\n   *   var url = s3.getSignedUrl('putObject', params);\r\n   *   console.log('The URL is', url);\r\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\r\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\r\n   *   var url = s3.getSignedUrl('getObject', params);\r\n   *   console.log('The URL is', url); // expires in 60 seconds\r\n   */\r\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\r\n    params = AWS.util.copy(params || {});\r\n    var expires = params.Expires || 900;\r\n\r\n    if (typeof expires !== 'number') {\r\n      throw AWS.util.error(new Error(),\r\n        { code: 'InvalidParameterException', message: 'The expiration must be a number, received ' + typeof expires });\r\n    }\r\n\r\n    delete params.Expires; // we can't validate this\r\n    var request = this.makeRequest(operation, params);\r\n\r\n    if (callback) {\r\n      AWS.util.defer(function() {\r\n        request.presign(expires, callback);\r\n      });\r\n    } else {\r\n      return request.presign(expires, callback);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @!method  getSignedUrlPromise()\r\n   *   Returns a 'thenable' promise that will be resolved with a pre-signed URL\r\n   *   for a given operation name.\r\n   *\r\n   *   Two callbacks can be provided to the `then` method on the returned promise.\r\n   *   The first callback will be called if the promise is fulfilled, and the second\r\n   *   callback will be called if the promise is rejected.\r\n   *   @note Not all operation parameters are supported when using pre-signed\r\n   *      URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\r\n   *      `ContentLength`, or `Tagging` must be provided as headers when sending a\r\n   *      request. If you are using pre-signed URLs to upload from a browser and\r\n   *      need to use these fields, see {createPresignedPost}.\r\n   *   @param operation [String] the name of the operation to call\r\n   *   @param params [map] parameters to pass to the operation. See the given\r\n   *      operation for the expected operation parameters. In addition, you can\r\n   *      also pass the \"Expires\" parameter to inform S3 how long the URL should\r\n   *      work for.\r\n   *   @option params Expires [Integer] (900) the number of seconds to expire\r\n   *      the pre-signed URL operation in. Defaults to 15 minutes.\r\n   *   @callback fulfilledCallback function(url)\r\n   *     Called if the promise is fulfilled.\r\n   *     @param url [String] the signed url\r\n   *   @callback rejectedCallback function(err)\r\n   *     Called if the promise is rejected.\r\n   *     @param err [Error] if an error occurred, this value will be filled\r\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\r\n   *   @example Pre-signing a getObject operation\r\n   *      var params = {Bucket: 'bucket', Key: 'key'};\r\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\r\n   *      promise.then(function(url) {\r\n   *        console.log('The URL is', url);\r\n   *      }, function(err) { ... });\r\n   *   @example Pre-signing a putObject operation with a specific payload\r\n   *      var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\r\n   *      var promise = s3.getSignedUrlPromise('putObject', params);\r\n   *      promise.then(function(url) {\r\n   *        console.log('The URL is', url);\r\n   *      }, function(err) { ... });\r\n   *   @example Passing in a 1-minute expiry time for a pre-signed URL\r\n   *      var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\r\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\r\n   *      promise.then(function(url) {\r\n   *        console.log('The URL is', url);\r\n   *      }, function(err) { ... });\r\n   */\r\n\r\n  /**\r\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\r\n   * HTML form.\r\n   *\r\n   * @param params [map]\r\n   * @option params Bucket [String]     The bucket to which the post should be\r\n   *                                    uploaded\r\n   * @option params Expires [Integer]   (3600) The number of seconds for which\r\n   *                                    the presigned policy should be valid.\r\n   * @option params Conditions [Array]  An array of conditions that must be met\r\n   *                                    for the presigned policy to allow the\r\n   *                                    upload. This can include required tags,\r\n   *                                    the accepted range for content lengths,\r\n   *                                    etc.\r\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\r\n   * @option params Fields [map]        Fields to include in the form. All\r\n   *                                    values passed in as fields will be\r\n   *                                    signed as exact match conditions.\r\n   * @param callback [Function]\r\n   *\r\n   * @note All fields passed in when creating presigned post data will be signed\r\n   *   as exact match conditions. Any fields that will be interpolated by S3\r\n   *   must be added to the fields hash after signing, and an appropriate\r\n   *   condition for such fields must be explicitly added to the Conditions\r\n   *   array passed to this function before signing.\r\n   *\r\n   * @example Presiging post data with a known key\r\n   *   var params = {\r\n   *     Bucket: 'bucket',\r\n   *     Fields: {\r\n   *       key: 'key'\r\n   *     }\r\n   *   };\r\n   *   s3.createPresignedPost(params, function(err, data) {\r\n   *     if (err) {\r\n   *       console.error('Presigning post data encountered an error', err);\r\n   *     } else {\r\n   *       console.log('The post data is', data);\r\n   *     }\r\n   *   });\r\n   *\r\n   * @example Presigning post data with an interpolated key\r\n   *   var params = {\r\n   *     Bucket: 'bucket',\r\n   *     Conditions: [\r\n   *       ['starts-with', '$key', 'path/to/uploads/']\r\n   *     ]\r\n   *   };\r\n   *   s3.createPresignedPost(params, function(err, data) {\r\n   *     if (err) {\r\n   *       console.error('Presigning post data encountered an error', err);\r\n   *     } else {\r\n   *       data.Fields.key = 'path/to/uploads/${filename}';\r\n   *       console.log('The post data is', data);\r\n   *     }\r\n   *   });\r\n   *\r\n   * @note You must ensure that you have static or previously resolved\r\n   *   credentials if you call this method synchronously (with no callback),\r\n   *   otherwise it may not properly sign the request. If you cannot guarantee\r\n   *   this (you are using an asynchronous credential provider, i.e., EC2\r\n   *   IAM roles), you should always call this method with an asynchronous\r\n   *   callback.\r\n   *\r\n   * @return [map]  If called synchronously (with no callback), returns a hash\r\n   *                with the url to set as the form action and a hash of fields\r\n   *                to include in the form.\r\n   * @return [null] Nothing is returned if a callback is provided.\r\n   *\r\n   * @callback callback function (err, data)\r\n   *  @param err [Error] the error object returned from the policy signer\r\n   *  @param data [map] The data necessary to construct an HTML form\r\n   *  @param data.url [String] The URL to use as the action of the form\r\n   *  @param data.fields [map] A hash of fields that must be included in the\r\n   *                           form for the upload to succeed. This hash will\r\n   *                           include the signed POST policy, your access key\r\n   *                           ID and security token (if present), etc. These\r\n   *                           may be safely included as input elements of type\r\n   *                           'hidden.'\r\n   */\r\n  createPresignedPost: function createPresignedPost(params, callback) {\r\n    if (typeof params === 'function' && callback === undefined) {\r\n      callback = params;\r\n      params = null;\r\n    }\r\n\r\n    params = AWS.util.copy(params || {});\r\n    var boundParams = this.config.params || {};\r\n    var bucket = params.Bucket || boundParams.Bucket,\r\n      self = this,\r\n      config = this.config,\r\n      endpoint = AWS.util.copy(this.endpoint);\r\n    if (!config.s3BucketEndpoint) {\r\n      endpoint.pathname = '/' + bucket;\r\n    }\r\n\r\n    function finalizePost() {\r\n      return {\r\n        url: AWS.util.urlFormat(endpoint),\r\n        fields: self.preparePostFields(\r\n          config.credentials,\r\n          config.region,\r\n          bucket,\r\n          params.Fields,\r\n          params.Conditions,\r\n          params.Expires\r\n        )\r\n      };\r\n    }\r\n\r\n    if (callback) {\r\n      config.getCredentials(function (err) {\r\n        if (err) {\r\n          callback(err);\r\n        } else {\r\n          try {\r\n            callback(null, finalizePost());\r\n          } catch (err) {\r\n            callback(err);\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      return finalizePost();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  preparePostFields: function preparePostFields(\r\n    credentials,\r\n    region,\r\n    bucket,\r\n    fields,\r\n    conditions,\r\n    expiresInSeconds\r\n  ) {\r\n    var now = this.getSkewCorrectedDate();\r\n    if (!credentials || !region || !bucket) {\r\n      throw new Error('Unable to create a POST object policy without a bucket,'\r\n        + ' region, and credentials');\r\n    }\r\n    fields = AWS.util.copy(fields || {});\r\n    conditions = (conditions || []).slice(0);\r\n    expiresInSeconds = expiresInSeconds || 3600;\r\n\r\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\r\n    var shortDate = signingDate.substr(0, 8);\r\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\r\n    var credential = credentials.accessKeyId + '/' + scope;\r\n\r\n    fields['bucket'] = bucket;\r\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\r\n    fields['X-Amz-Credential'] = credential;\r\n    fields['X-Amz-Date'] = signingDate;\r\n    if (credentials.sessionToken) {\r\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\r\n    }\r\n    for (var field in fields) {\r\n      if (fields.hasOwnProperty(field)) {\r\n        var condition = {};\r\n        condition[field] = fields[field];\r\n        conditions.push(condition);\r\n      }\r\n    }\r\n\r\n    fields.Policy = this.preparePostPolicy(\r\n      new Date(now.valueOf() + expiresInSeconds * 1000),\r\n      conditions\r\n    );\r\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(\r\n      v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true),\r\n      fields.Policy,\r\n      'hex'\r\n    );\r\n\r\n    return fields;\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\r\n    return AWS.util.base64.encode(JSON.stringify({\r\n      expiration: AWS.util.date.iso8601(expiration),\r\n      conditions: conditions\r\n    }));\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  prepareSignedUrl: function prepareSignedUrl(request) {\r\n    request.addListener('validate', request.service.noPresignedContentLength);\r\n    request.removeListener('build', request.service.addContentType);\r\n    if (!request.params.Body) {\r\n      // no Content-MD5/SHA-256 if body is not provided\r\n      request.removeListener('build', request.service.computeContentMd5);\r\n    } else {\r\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   * @param request\r\n   */\r\n  disableBodySigning: function disableBodySigning(request) {\r\n    var headers = request.httpRequest.headers;\r\n    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\r\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\r\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  noPresignedContentLength: function noPresignedContentLength(request) {\r\n    if (request.params.ContentLength !== undefined) {\r\n      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',\r\n        message: 'ContentLength is not supported in pre-signed URLs.'});\r\n    }\r\n  },\r\n\r\n  createBucket: function createBucket(params, callback) {\r\n    // When creating a bucket *outside* the classic region, the location\r\n    // constraint must be set for the bucket and it must match the endpoint.\r\n    // This chunk of code will set the location constraint param based\r\n    // on the region (when possible), but it will not override a passed-in\r\n    // location constraint.\r\n    if (typeof params === 'function' || !params) {\r\n      callback = callback || params;\r\n      params = {};\r\n    }\r\n    var hostname = this.endpoint.hostname;\r\n    // copy params so that appending keys does not unintentioinallly\r\n    // mutate params object argument passed in by user\r\n    var copiedParams = AWS.util.copy(params);\r\n\r\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\r\n      copiedParams.CreateBucketConfiguration = { LocationConstraint: this.config.region };\r\n    }\r\n    return this.makeRequest('createBucket', copiedParams, callback);\r\n  },\r\n\r\n  writeGetObjectResponse: function writeGetObjectResponse(params, callback) {\r\n\r\n    var request = this.makeRequest('writeGetObjectResponse', AWS.util.copy(params), callback);\r\n    var hostname = this.endpoint.hostname;\r\n    if (hostname.indexOf(this.config.region) !== -1) {\r\n      // hostname specifies a region already\r\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.');\r\n    } else {\r\n      // Hostname doesn't have a region.\r\n      // Object Lambda requires an explicit region.\r\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.' + this.config.region + '.');\r\n    }\r\n\r\n    request.httpRequest.endpoint = new AWS.Endpoint(hostname, this.config);\r\n    return request;\r\n  },\r\n\r\n  /**\r\n   * @see AWS.S3.ManagedUpload\r\n   * @overload upload(params = {}, [options], [callback])\r\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\r\n   *   concurrent handling of parts if the payload is large enough. You can\r\n   *   configure the concurrent queue size by setting `options`. Note that this\r\n   *   is the only operation for which the SDK can retry requests with stream\r\n   *   bodies.\r\n   *\r\n   *   @param (see AWS.S3.putObject)\r\n   *   @option (see AWS.S3.ManagedUpload.constructor)\r\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\r\n   *     `send()` or track progress.\r\n   *   @example Uploading a stream object\r\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\r\n   *     s3.upload(params, function(err, data) {\r\n   *       console.log(err, data);\r\n   *     });\r\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\r\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\r\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\r\n   *     s3.upload(params, options, function(err, data) {\r\n   *       console.log(err, data);\r\n   *     });\r\n   * @callback callback function(err, data)\r\n   *   @param err [Error] an error or null if no error occurred.\r\n   *   @param data [map] The response data from the successful upload:\r\n   *   @param data.Location [String] the URL of the uploaded object\r\n   *   @param data.ETag [String] the ETag of the uploaded object\r\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\r\n   *   @param data.Key [String] the key to which the object was uploaded\r\n   */\r\n  upload: function upload(params, options, callback) {\r\n    if (typeof options === 'function' && callback === undefined) {\r\n      callback = options;\r\n      options = null;\r\n    }\r\n\r\n    options = options || {};\r\n    options = AWS.util.merge(options || {}, {service: this, params: params});\r\n\r\n    var uploader = new AWS.S3.ManagedUpload(options);\r\n    if (typeof callback === 'function') uploader.send(callback);\r\n    return uploader;\r\n  }\r\n});\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\r\n  this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod('getSignedUrl', PromiseDependency);\r\n};\r\n\r\n/**\r\n * @api private\r\n */\r\nAWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {\r\n  delete this.prototype.getSignedUrlPromise;\r\n};\r\n\r\nAWS.util.addPromises(AWS.S3);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}