{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_InputText = _resolveComponent(\"InputText\");\n  return _openBlock(), _createBlock(_component_InputText, {\n    type: \"text\",\n    modelValue: $options.currencyValue,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $options.currencyValue = $event),\n    onBlur: _cache[1] || (_cache[1] = $event => _ctx.isInputActive = false),\n    onFocus: _cache[2] || (_cache[2] = $event => _ctx.isInputActive = true),\n    disabled: $props.disAktif,\n    onInput: _ctx.isInput\n  }, null, 8 /* PROPS */, [\"modelValue\", \"disabled\", \"onInput\"]);\n}","map":{"version":3,"mappings":";;;uBACEA,aAOEC;IANAC,IAAI,EAAC,MAAM;gBACFC,sBAAa;+DAAbA,sBAAa;IACrBC,MAAI,sCAAEC,kBAAa;IACnBC,OAAK,sCAAED,kBAAa;IACpBE,QAAQ,EAAEC,eAAQ;IAClBC,OAAK,EAAEJ","names":["_createBlock","_component_InputText","type","$options","onBlur","_ctx","onFocus","disabled","$props","onInput"],"sourceRoot":"","sources":["C:\\PROJELER\\NewProjects\\gitPull\\newprojectweb\\src\\components\\shared\\CurrencyInput.vue"],"sourcesContent":["<template>\r\n  <InputText\r\n    type=\"text\"\r\n    v-model=\"currencyValue\"\r\n    @blur=\"isInputActive = false\"\r\n    @focus=\"isInputActive = true\"\r\n    :disabled=\"disAktif\"\r\n    @input=\"isInput\"\r\n  />\r\n</template>\r\n<script>\r\nexport default {\r\n  data: function () {\r\n    return {\r\n      isInputActive: false,\r\n    };\r\n  },\r\n  props: {\r\n    value: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    ondalik: {\r\n      type: Number,\r\n      default: 2,\r\n    },\r\n    disAktif: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  computed: {\r\n    currencyValue: {\r\n      get: function () {\r\n        if (this.isInputActive) {\r\n          return this.value.toString();\r\n        } else {\r\n          return (\r\n            \"$ \" +\r\n            this.value\r\n              .toFixed(this.ondalik)\r\n              .replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, \"$1,\")\r\n          );\r\n        }\r\n      },\r\n      set: function (modifiedValue) {\r\n        let newValue = parseFloat(modifiedValue /*.replace(/[^\\d\\.]/g, \"\")*/);\r\n        if (isNaN(newValue)) {\r\n          newValue = 0;\r\n        }\r\n\r\n        this.emitter.emit(\"input\", newValue);\r\n      },\r\n    },\r\n  },\r\n  methods: {},\r\n};\r\n</script>\r\n<style scoped>\r\nbody {\r\n  margin: 20px;\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n}\r\ninput {\r\n  border: 1px solid #888;\r\n  font-size: 14px;\r\n  padding: 0.5rem;\r\n  text-align: center;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}