{"ast":null,"code":"require(\"core-js/modules/es.array.unshift.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nvar AWS = require('./core');\nrequire('./credentials');\nrequire('./credentials/credential_provider_chain');\nvar PromisesDependency;\n\n/**\r\n * The main configuration class used by all service objects to set\r\n * the region, credentials, and other options for requests.\r\n *\r\n * By default, credentials and region settings are left unconfigured.\r\n * This should be configured by the application before using any\r\n * AWS service APIs.\r\n *\r\n * In order to set global configuration options, properties should\r\n * be assigned to the global {AWS.config} object.\r\n *\r\n * @see AWS.config\r\n *\r\n * @!group General Configuration Options\r\n *\r\n * @!attribute credentials\r\n *   @return [AWS.Credentials] the AWS credentials to sign requests with.\r\n *\r\n * @!attribute region\r\n *   @example Set the global region setting to us-west-2\r\n *     AWS.config.update({region: 'us-west-2'});\r\n *   @return [AWS.Credentials] The region to send service requests to.\r\n *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html\r\n *     A list of available endpoints for each AWS service\r\n *\r\n * @!attribute maxRetries\r\n *   @return [Integer] the maximum amount of retries to perform for a\r\n *     service request. By default this value is calculated by the specific\r\n *     service object that the request is being made to.\r\n *\r\n * @!attribute maxRedirects\r\n *   @return [Integer] the maximum amount of redirects to follow for a\r\n *     service request. Defaults to 10.\r\n *\r\n * @!attribute paramValidation\r\n *   @return [Boolean|map] whether input parameters should be validated against\r\n *     the operation description before sending the request. Defaults to true.\r\n *     Pass a map to enable any of the following specific validation features:\r\n *\r\n *     * **min** [Boolean] &mdash; Validates that a value meets the min\r\n *       constraint. This is enabled by default when paramValidation is set\r\n *       to `true`.\r\n *     * **max** [Boolean] &mdash; Validates that a value meets the max\r\n *       constraint.\r\n *     * **pattern** [Boolean] &mdash; Validates that a string value matches a\r\n *       regular expression.\r\n *     * **enum** [Boolean] &mdash; Validates that a string value matches one\r\n *       of the allowable enum values.\r\n *\r\n * @!attribute computeChecksums\r\n *   @return [Boolean] whether to compute checksums for payload bodies when\r\n *     the service accepts it (currently supported in S3 and SQS only).\r\n *\r\n * @!attribute convertResponseTypes\r\n *   @return [Boolean] whether types are converted when parsing response data.\r\n *     Currently only supported for JSON based services. Turning this off may\r\n *     improve performance on large response payloads. Defaults to `true`.\r\n *\r\n * @!attribute correctClockSkew\r\n *   @return [Boolean] whether to apply a clock skew correction and retry\r\n *     requests that fail because of an skewed client clock. Defaults to\r\n *     `false`.\r\n *\r\n * @!attribute sslEnabled\r\n *   @return [Boolean] whether SSL is enabled for requests\r\n *\r\n * @!attribute s3ForcePathStyle\r\n *   @return [Boolean] whether to force path style URLs for S3 objects\r\n *\r\n * @!attribute s3BucketEndpoint\r\n *   @note Setting this configuration option requires an `endpoint` to be\r\n *     provided explicitly to the service constructor.\r\n *   @return [Boolean] whether the provided endpoint addresses an individual\r\n *     bucket (false if it addresses the root API endpoint).\r\n *\r\n * @!attribute s3DisableBodySigning\r\n *   @return [Boolean] whether to disable S3 body signing when using signature version `v4`.\r\n *     Body signing can only be disabled when using https. Defaults to `true`.\r\n *\r\n * @!attribute s3UsEast1RegionalEndpoint\r\n *   @return ['legacy'|'regional'] when region is set to 'us-east-1', whether to send s3\r\n *     request to global endpoints or 'us-east-1' regional endpoints. This config is only\r\n *     applicable to S3 client;\r\n *     Defaults to 'legacy'\r\n * @!attribute s3UseArnRegion\r\n *   @return [Boolean] whether to override the request region with the region inferred\r\n *     from requested resource's ARN. Only available for S3 buckets\r\n *     Defaults to `true`\r\n *\r\n * @!attribute useAccelerateEndpoint\r\n *   @note This configuration option is only compatible with S3 while accessing\r\n *     dns-compatible buckets.\r\n *   @return [Boolean] Whether to use the Accelerate endpoint with the S3 service.\r\n *     Defaults to `false`.\r\n *\r\n * @!attribute retryDelayOptions\r\n *   @example Set the base retry delay for all services to 300 ms\r\n *     AWS.config.update({retryDelayOptions: {base: 300}});\r\n *     // Delays with maxRetries = 3: 300, 600, 1200\r\n *   @example Set a custom backoff function to provide delay values on retries\r\n *     AWS.config.update({retryDelayOptions: {customBackoff: function(retryCount, err) {\r\n *       // returns delay in ms\r\n *     }}});\r\n *   @return [map] A set of options to configure the retry delay on retryable errors.\r\n *     Currently supported options are:\r\n *\r\n *     * **base** [Integer] &mdash; The base number of milliseconds to use in the\r\n *       exponential backoff for operation retries. Defaults to 100 ms for all services except\r\n *       DynamoDB, where it defaults to 50ms.\r\n *\r\n *     * **customBackoff ** [function] &mdash; A custom function that accepts a\r\n *       retry count and error and returns the amount of time to delay in\r\n *       milliseconds. If the result is a non-zero negative value, no further\r\n *       retry attempts will be made. The `base` option will be ignored if this\r\n *       option is supplied. The function is only called for retryable errors.\r\n *\r\n * @!attribute httpOptions\r\n *   @return [map] A set of options to pass to the low-level HTTP request.\r\n *     Currently supported options are:\r\n *\r\n *     * **proxy** [String] &mdash; the URL to proxy requests through\r\n *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\r\n *       HTTP requests with. Used for connection pooling. Note that for\r\n *       SSL connections, a special Agent object is used in order to enable\r\n *       peer certificate verification. This feature is only supported in the\r\n *       Node.js environment.\r\n *     * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after\r\n *       failing to establish a connection with the server after\r\n *       `connectTimeout` milliseconds. This timeout has no effect once a socket\r\n *       connection has been established.\r\n *     * **timeout** [Integer] &mdash; The number of milliseconds a request can\r\n *       take before automatically being terminated.\r\n *       Defaults to two minutes (120000).\r\n *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous\r\n *       HTTP requests. Used in the browser environment only. Set to false to\r\n *       send requests synchronously. Defaults to true (async on).\r\n *     * **xhrWithCredentials** [Boolean] &mdash; Sets the \"withCredentials\"\r\n *       property of an XMLHttpRequest object. Used in the browser environment\r\n *       only. Defaults to false.\r\n * @!attribute logger\r\n *   @return [#write,#log] an object that responds to .write() (like a stream)\r\n *     or .log() (like the console object) in order to log information about\r\n *     requests\r\n *\r\n * @!attribute systemClockOffset\r\n *   @return [Number] an offset value in milliseconds to apply to all signing\r\n *     times. Use this to compensate for clock skew when your system may be\r\n *     out of sync with the service time. Note that this configuration option\r\n *     can only be applied to the global `AWS.config` object and cannot be\r\n *     overridden in service-specific configuration. Defaults to 0 milliseconds.\r\n *\r\n * @!attribute signatureVersion\r\n *   @return [String] the signature version to sign requests with (overriding\r\n *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.\r\n *\r\n * @!attribute signatureCache\r\n *   @return [Boolean] whether the signature to sign requests with (overriding\r\n *     the API configuration) is cached. Only applies to the signature version 'v4'.\r\n *     Defaults to `true`.\r\n *\r\n * @!attribute endpointDiscoveryEnabled\r\n *   @return [Boolean|undefined] whether to call operations with endpoints\r\n *     given by service dynamically. Setting this config to `true` will enable\r\n *     endpoint discovery for all applicable operations. Setting it to `false`\r\n *     will explicitly disable endpoint discovery even though operations that\r\n *     require endpoint discovery will presumably fail. Leaving it to\r\n *     `undefined` means SDK only do endpoint discovery when it's required.\r\n *     Defaults to `undefined`\r\n *\r\n * @!attribute endpointCacheSize\r\n *   @return [Number] the size of the global cache storing endpoints from endpoint\r\n *     discovery operations. Once endpoint cache is created, updating this setting\r\n *     cannot change existing cache size.\r\n *     Defaults to 1000\r\n *\r\n * @!attribute hostPrefixEnabled\r\n *   @return [Boolean] whether to marshal request parameters to the prefix of\r\n *     hostname. Defaults to `true`.\r\n *\r\n * @!attribute stsRegionalEndpoints\r\n *   @return ['legacy'|'regional'] whether to send sts request to global endpoints or\r\n *     regional endpoints.\r\n *     Defaults to 'legacy'.\r\n *\r\n * @!attribute useFipsEndpoint\r\n *   @return [Boolean] Enables FIPS compatible endpoints. Defaults to `false`.\r\n *\r\n * @!attribute useDualstackEndpoint\r\n *   @return [Boolean] Enables IPv6 dualstack endpoint. Defaults to `false`.\r\n */\nAWS.Config = AWS.util.inherit({\n  /**\r\n   * @!endgroup\r\n   */\n\n  /**\r\n   * Creates a new configuration object. This is the object that passes\r\n   * option data along to service requests, including credentials, security,\r\n   * region information, and some service specific settings.\r\n   *\r\n   * @example Creating a new configuration object with credentials and region\r\n   *   var config = new AWS.Config({\r\n   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'\r\n   *   });\r\n   * @option options accessKeyId [String] your AWS access key ID.\r\n   * @option options secretAccessKey [String] your AWS secret access key.\r\n   * @option options sessionToken [AWS.Credentials] the optional AWS\r\n   *   session token to sign requests with.\r\n   * @option options credentials [AWS.Credentials] the AWS credentials\r\n   *   to sign requests with. You can either specify this object, or\r\n   *   specify the accessKeyId and secretAccessKey options directly.\r\n   * @option options credentialProvider [AWS.CredentialProviderChain] the\r\n   *   provider chain used to resolve credentials if no static `credentials`\r\n   *   property is set.\r\n   * @option options region [String] the region to send service requests to.\r\n   *   See {region} for more information.\r\n   * @option options maxRetries [Integer] the maximum amount of retries to\r\n   *   attempt with a request. See {maxRetries} for more information.\r\n   * @option options maxRedirects [Integer] the maximum amount of redirects to\r\n   *   follow with a request. See {maxRedirects} for more information.\r\n   * @option options sslEnabled [Boolean] whether to enable SSL for\r\n   *   requests.\r\n   * @option options paramValidation [Boolean|map] whether input parameters\r\n   *   should be validated against the operation description before sending\r\n   *   the request. Defaults to true. Pass a map to enable any of the\r\n   *   following specific validation features:\r\n   *\r\n   *   * **min** [Boolean] &mdash; Validates that a value meets the min\r\n   *     constraint. This is enabled by default when paramValidation is set\r\n   *     to `true`.\r\n   *   * **max** [Boolean] &mdash; Validates that a value meets the max\r\n   *     constraint.\r\n   *   * **pattern** [Boolean] &mdash; Validates that a string value matches a\r\n   *     regular expression.\r\n   *   * **enum** [Boolean] &mdash; Validates that a string value matches one\r\n   *     of the allowable enum values.\r\n   * @option options computeChecksums [Boolean] whether to compute checksums\r\n   *   for payload bodies when the service accepts it (currently supported\r\n   *   in S3 only)\r\n   * @option options convertResponseTypes [Boolean] whether types are converted\r\n   *     when parsing response data. Currently only supported for JSON based\r\n   *     services. Turning this off may improve performance on large response\r\n   *     payloads. Defaults to `true`.\r\n   * @option options correctClockSkew [Boolean] whether to apply a clock skew\r\n   *     correction and retry requests that fail because of an skewed client\r\n   *     clock. Defaults to `false`.\r\n   * @option options s3ForcePathStyle [Boolean] whether to force path\r\n   *   style URLs for S3 objects.\r\n   * @option options s3BucketEndpoint [Boolean] whether the provided endpoint\r\n   *   addresses an individual bucket (false if it addresses the root API\r\n   *   endpoint). Note that setting this configuration option requires an\r\n   *   `endpoint` to be provided explicitly to the service constructor.\r\n   * @option options s3DisableBodySigning [Boolean] whether S3 body signing\r\n   *   should be disabled when using signature version `v4`. Body signing\r\n   *   can only be disabled when using https. Defaults to `true`.\r\n   * @option options s3UsEast1RegionalEndpoint ['legacy'|'regional'] when region\r\n   *   is set to 'us-east-1', whether to send s3 request to global endpoints or\r\n   *   'us-east-1' regional endpoints. This config is only applicable to S3 client.\r\n   *   Defaults to `legacy`\r\n   * @option options s3UseArnRegion [Boolean] whether to override the request region\r\n   *   with the region inferred from requested resource's ARN. Only available for S3 buckets\r\n   *   Defaults to `true`\r\n   *\r\n   * @option options retryDelayOptions [map] A set of options to configure\r\n   *   the retry delay on retryable errors. Currently supported options are:\r\n   *\r\n   *   * **base** [Integer] &mdash; The base number of milliseconds to use in the\r\n   *     exponential backoff for operation retries. Defaults to 100 ms for all\r\n   *     services except DynamoDB, where it defaults to 50ms.\r\n   *   * **customBackoff ** [function] &mdash; A custom function that accepts a\r\n   *     retry count and error and returns the amount of time to delay in\r\n   *     milliseconds. If the result is a non-zero negative value, no further\r\n   *     retry attempts will be made. The `base` option will be ignored if this\r\n   *     option is supplied. The function is only called for retryable errors.\r\n   * @option options httpOptions [map] A set of options to pass to the low-level\r\n   *   HTTP request. Currently supported options are:\r\n   *\r\n   *   * **proxy** [String] &mdash; the URL to proxy requests through\r\n   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\r\n   *     HTTP requests with. Used for connection pooling. Defaults to the global\r\n   *     agent (`http.globalAgent`) for non-SSL connections. Note that for\r\n   *     SSL connections, a special Agent object is used in order to enable\r\n   *     peer certificate verification. This feature is only available in the\r\n   *     Node.js environment.\r\n   *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after\r\n   *     failing to establish a connection with the server after\r\n   *     `connectTimeout` milliseconds. This timeout has no effect once a socket\r\n   *     connection has been established.\r\n   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout\r\n   *     milliseconds of inactivity on the socket. Defaults to two minutes\r\n   *     (120000).\r\n   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous\r\n   *     HTTP requests. Used in the browser environment only. Set to false to\r\n   *     send requests synchronously. Defaults to true (async on).\r\n   *   * **xhrWithCredentials** [Boolean] &mdash; Sets the \"withCredentials\"\r\n   *     property of an XMLHttpRequest object. Used in the browser environment\r\n   *     only. Defaults to false.\r\n   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format\r\n   *   (or a date) that represents the latest possible API version that can be\r\n   *   used in all services (unless overridden by `apiVersions`). Specify\r\n   *   'latest' to use the latest possible version.\r\n   * @option options apiVersions [map<String, String|Date>] a map of service\r\n   *   identifiers (the lowercase service class name) with the API version to\r\n   *   use when instantiating a service. Specify 'latest' for each individual\r\n   *   that can use the latest available version.\r\n   * @option options logger [#write,#log] an object that responds to .write()\r\n   *   (like a stream) or .log() (like the console object) in order to log\r\n   *   information about requests\r\n   * @option options systemClockOffset [Number] an offset value in milliseconds\r\n   *   to apply to all signing times. Use this to compensate for clock skew\r\n   *   when your system may be out of sync with the service time. Note that\r\n   *   this configuration option can only be applied to the global `AWS.config`\r\n   *   object and cannot be overridden in service-specific configuration.\r\n   *   Defaults to 0 milliseconds.\r\n   * @option options signatureVersion [String] the signature version to sign\r\n   *   requests with (overriding the API configuration). Possible values are:\r\n   *   'v2', 'v3', 'v4'.\r\n   * @option options signatureCache [Boolean] whether the signature to sign\r\n   *   requests with (overriding the API configuration) is cached. Only applies\r\n   *   to the signature version 'v4'. Defaults to `true`.\r\n   * @option options dynamoDbCrc32 [Boolean] whether to validate the CRC32\r\n   *   checksum of HTTP response bodies returned by DynamoDB. Default: `true`.\r\n   * @option options useAccelerateEndpoint [Boolean] Whether to use the\r\n   *   S3 Transfer Acceleration endpoint with the S3 service. Default: `false`.\r\n   * @option options clientSideMonitoring [Boolean] whether to collect and\r\n   *   publish this client's performance metrics of all its API requests.\r\n   * @option options endpointDiscoveryEnabled [Boolean|undefined] whether to\r\n   *   call operations with endpoints given by service dynamically. Setting this\r\n   * config to `true` will enable endpoint discovery for all applicable operations.\r\n   *   Setting it to `false` will explicitly disable endpoint discovery even though\r\n   *   operations that require endpoint discovery will presumably fail. Leaving it\r\n   *   to `undefined` means SDK will only do endpoint discovery when it's required.\r\n   *   Defaults to `undefined`\r\n   * @option options endpointCacheSize [Number] the size of the global cache storing\r\n   *   endpoints from endpoint discovery operations. Once endpoint cache is created,\r\n   *   updating this setting cannot change existing cache size.\r\n   *   Defaults to 1000\r\n   * @option options hostPrefixEnabled [Boolean] whether to marshal request\r\n   *   parameters to the prefix of hostname.\r\n   *   Defaults to `true`.\r\n   * @option options stsRegionalEndpoints ['legacy'|'regional'] whether to send sts request\r\n   *   to global endpoints or regional endpoints.\r\n   *   Defaults to 'legacy'.\r\n   * @option options useFipsEndpoint [Boolean] Enables FIPS compatible endpoints.\r\n   *   Defaults to `false`.\r\n   * @option options useDualstackEndpoint [Boolean] Enables IPv6 dualstack endpoint.\r\n   *   Defaults to `false`.\r\n   */\n  constructor: function Config(options) {\n    if (options === undefined) options = {};\n    options = this.extractCredentials(options);\n    AWS.util.each.call(this, this.keys, function (key, value) {\n      this.set(key, options[key], value);\n    });\n  },\n  /**\r\n   * @!group Managing Credentials\r\n   */\n\n  /**\r\n   * Loads credentials from the configuration object. This is used internally\r\n   * by the SDK to ensure that refreshable {Credentials} objects are properly\r\n   * refreshed and loaded when sending a request. If you want to ensure that\r\n   * your credentials are loaded prior to a request, you can use this method\r\n   * directly to provide accurate credential data stored in the object.\r\n   *\r\n   * @note If you configure the SDK with static or environment credentials,\r\n   *   the credential data should already be present in {credentials} attribute.\r\n   *   This method is primarily necessary to load credentials from asynchronous\r\n   *   sources, or sources that can refresh credentials periodically.\r\n   * @example Getting your access key\r\n   *   AWS.config.getCredentials(function(err) {\r\n   *     if (err) console.log(err.stack); // credentials not loaded\r\n   *     else console.log(\"Access Key:\", AWS.config.credentials.accessKeyId);\r\n   *   })\r\n   * @callback callback function(err)\r\n   *   Called when the {credentials} have been properly set on the configuration\r\n   *   object.\r\n   *\r\n   *   @param err [Error] if this is set, credentials were not successfully\r\n   *     loaded and this error provides information why.\r\n   * @see credentials\r\n   * @see Credentials\r\n   */\n  getCredentials: function getCredentials(callback) {\n    var self = this;\n    function finish(err) {\n      callback(err, err ? null : self.credentials);\n    }\n    function credError(msg, err) {\n      return new AWS.util.error(err || new Error(), {\n        code: 'CredentialsError',\n        message: msg,\n        name: 'CredentialsError'\n      });\n    }\n    function getAsyncCredentials() {\n      self.credentials.get(function (err) {\n        if (err) {\n          var msg = 'Could not load credentials from ' + self.credentials.constructor.name;\n          err = credError(msg, err);\n        }\n        finish(err);\n      });\n    }\n    function getStaticCredentials() {\n      var err = null;\n      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {\n        err = credError('Missing credentials');\n      }\n      finish(err);\n    }\n    if (self.credentials) {\n      if (typeof self.credentials.get === 'function') {\n        getAsyncCredentials();\n      } else {\n        // static credentials\n        getStaticCredentials();\n      }\n    } else if (self.credentialProvider) {\n      self.credentialProvider.resolve(function (err, creds) {\n        if (err) {\n          err = credError('Could not load credentials from any providers', err);\n        }\n        self.credentials = creds;\n        finish(err);\n      });\n    } else {\n      finish(credError('No credentials to load'));\n    }\n  },\n  /**\r\n   * Loads token from the configuration object. This is used internally\r\n   * by the SDK to ensure that refreshable {Token} objects are properly\r\n   * refreshed and loaded when sending a request. If you want to ensure that\r\n   * your token is loaded prior to a request, you can use this method\r\n   * directly to provide accurate token data stored in the object.\r\n   *\r\n   * @note If you configure the SDK with static token, the token data should\r\n   *   already be present in {token} attribute. This method is primarily necessary\r\n   *   to load token from asynchronous sources, or sources that can refresh\r\n   *   token periodically.\r\n   * @example Getting your access token\r\n   *   AWS.config.getToken(function(err) {\r\n   *     if (err) console.log(err.stack); // token not loaded\r\n   *     else console.log(\"Token:\", AWS.config.token.token);\r\n   *   })\r\n   * @callback callback function(err)\r\n   *   Called when the {token} have been properly set on the configuration object.\r\n   *\r\n   *   @param err [Error] if this is set, token was not successfully loaded and\r\n   *     this error provides information why.\r\n   * @see token\r\n   */\n  getToken: function getToken(callback) {\n    var self = this;\n    function finish(err) {\n      callback(err, err ? null : self.token);\n    }\n    function tokenError(msg, err) {\n      return new AWS.util.error(err || new Error(), {\n        code: 'TokenError',\n        message: msg,\n        name: 'TokenError'\n      });\n    }\n    function getAsyncToken() {\n      self.token.get(function (err) {\n        if (err) {\n          var msg = 'Could not load token from ' + self.token.constructor.name;\n          err = tokenError(msg, err);\n        }\n        finish(err);\n      });\n    }\n    function getStaticToken() {\n      var err = null;\n      if (!self.token.token) {\n        err = tokenError('Missing token');\n      }\n      finish(err);\n    }\n    if (self.token) {\n      if (typeof self.token.get === 'function') {\n        getAsyncToken();\n      } else {\n        // static token\n        getStaticToken();\n      }\n    } else if (self.tokenProvider) {\n      self.tokenProvider.resolve(function (err, token) {\n        if (err) {\n          err = tokenError('Could not load token from any providers', err);\n        }\n        self.token = token;\n        finish(err);\n      });\n    } else {\n      finish(tokenError('No token to load'));\n    }\n  },\n  /**\r\n   * @!group Loading and Setting Configuration Options\r\n   */\n\n  /**\r\n   * @overload update(options, allowUnknownKeys = false)\r\n   *   Updates the current configuration object with new options.\r\n   *\r\n   *   @example Update maxRetries property of a configuration object\r\n   *     config.update({maxRetries: 10});\r\n   *   @param [Object] options a map of option keys and values.\r\n   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on\r\n   *     the configuration object. Defaults to `false`.\r\n   *   @see constructor\r\n   */\n  update: function update(options, allowUnknownKeys) {\n    allowUnknownKeys = allowUnknownKeys || false;\n    options = this.extractCredentials(options);\n    AWS.util.each.call(this, options, function (key, value) {\n      if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) || AWS.Service.hasService(key)) {\n        this.set(key, value);\n      }\n    });\n  },\n  /**\r\n   * Loads configuration data from a JSON file into this config object.\r\n   * @note Loading configuration will reset all existing configuration\r\n   *   on the object.\r\n   * @!macro nobrowser\r\n   * @param path [String] the path relative to your process's current\r\n   *    working directory to load configuration from.\r\n   * @return [AWS.Config] the same configuration object\r\n   */\n  loadFromPath: function loadFromPath(path) {\n    this.clear();\n    var options = JSON.parse(AWS.util.readFileSync(path));\n    var fileSystemCreds = new AWS.FileSystemCredentials(path);\n    var chain = new AWS.CredentialProviderChain();\n    chain.providers.unshift(fileSystemCreds);\n    chain.resolve(function (err, creds) {\n      if (err) throw err;else options.credentials = creds;\n    });\n    this.constructor(options);\n    return this;\n  },\n  /**\r\n   * Clears configuration data on this object\r\n   *\r\n   * @api private\r\n   */\n  clear: function clear() {\n    /*jshint forin:false */\n    AWS.util.each.call(this, this.keys, function (key) {\n      delete this[key];\n    });\n\n    // reset credential provider\n    this.set('credentials', undefined);\n    this.set('credentialProvider', undefined);\n  },\n  /**\r\n   * Sets a property on the configuration object, allowing for a\r\n   * default value\r\n   * @api private\r\n   */\n  set: function set(property, value, defaultValue) {\n    if (value === undefined) {\n      if (defaultValue === undefined) {\n        defaultValue = this.keys[property];\n      }\n      if (typeof defaultValue === 'function') {\n        this[property] = defaultValue.call(this);\n      } else {\n        this[property] = defaultValue;\n      }\n    } else if (property === 'httpOptions' && this[property]) {\n      // deep merge httpOptions\n      this[property] = AWS.util.merge(this[property], value);\n    } else {\n      this[property] = value;\n    }\n  },\n  /**\r\n   * All of the keys with their default values.\r\n   *\r\n   * @constant\r\n   * @api private\r\n   */\n  keys: {\n    credentials: null,\n    credentialProvider: null,\n    region: null,\n    logger: null,\n    apiVersions: {},\n    apiVersion: null,\n    endpoint: undefined,\n    httpOptions: {\n      timeout: 120000\n    },\n    maxRetries: undefined,\n    maxRedirects: 10,\n    paramValidation: true,\n    sslEnabled: true,\n    s3ForcePathStyle: false,\n    s3BucketEndpoint: false,\n    s3DisableBodySigning: true,\n    s3UsEast1RegionalEndpoint: 'legacy',\n    s3UseArnRegion: undefined,\n    computeChecksums: true,\n    convertResponseTypes: true,\n    correctClockSkew: false,\n    customUserAgent: null,\n    dynamoDbCrc32: true,\n    systemClockOffset: 0,\n    signatureVersion: null,\n    signatureCache: true,\n    retryDelayOptions: {},\n    useAccelerateEndpoint: false,\n    clientSideMonitoring: false,\n    endpointDiscoveryEnabled: undefined,\n    endpointCacheSize: 1000,\n    hostPrefixEnabled: true,\n    stsRegionalEndpoints: 'legacy',\n    useFipsEndpoint: false,\n    useDualstackEndpoint: false,\n    token: null\n  },\n  /**\r\n   * Extracts accessKeyId, secretAccessKey and sessionToken\r\n   * from a configuration hash.\r\n   *\r\n   * @api private\r\n   */\n  extractCredentials: function extractCredentials(options) {\n    if (options.accessKeyId && options.secretAccessKey) {\n      options = AWS.util.copy(options);\n      options.credentials = new AWS.Credentials(options);\n    }\n    return options;\n  },\n  /**\r\n   * Sets the promise dependency the SDK will use wherever Promises are returned.\r\n   * Passing `null` will force the SDK to use native Promises if they are available.\r\n   * If native Promises are not available, passing `null` will have no effect.\r\n   * @param [Constructor] dep A reference to a Promise constructor\r\n   */\n  setPromisesDependency: function setPromisesDependency(dep) {\n    PromisesDependency = dep;\n    // if null was passed in, we should try to use native promises\n    if (dep === null && typeof Promise === 'function') {\n      PromisesDependency = Promise;\n    }\n    var constructors = [AWS.Request, AWS.Credentials, AWS.CredentialProviderChain];\n    if (AWS.S3) {\n      constructors.push(AWS.S3);\n      if (AWS.S3.ManagedUpload) {\n        constructors.push(AWS.S3.ManagedUpload);\n      }\n    }\n    AWS.util.addPromises(constructors, PromisesDependency);\n  },\n  /**\r\n   * Gets the promise dependency set by `AWS.config.setPromisesDependency`.\r\n   */\n  getPromisesDependency: function getPromisesDependency() {\n    return PromisesDependency;\n  }\n});\n\n/**\r\n * @return [AWS.Config] The global configuration object singleton instance\r\n * @readonly\r\n * @see AWS.Config\r\n */\nAWS.config = new AWS.Config();","map":{"version":3,"names":["AWS","require","PromisesDependency","Config","util","inherit","constructor","options","undefined","extractCredentials","each","call","keys","key","value","set","getCredentials","callback","self","finish","err","credentials","credError","msg","error","Error","code","message","name","getAsyncCredentials","get","getStaticCredentials","accessKeyId","secretAccessKey","credentialProvider","resolve","creds","getToken","token","tokenError","getAsyncToken","getStaticToken","tokenProvider","update","allowUnknownKeys","Object","prototype","hasOwnProperty","Service","hasService","loadFromPath","path","clear","JSON","parse","readFileSync","fileSystemCreds","FileSystemCredentials","chain","CredentialProviderChain","providers","unshift","property","defaultValue","merge","region","logger","apiVersions","apiVersion","endpoint","httpOptions","timeout","maxRetries","maxRedirects","paramValidation","sslEnabled","s3ForcePathStyle","s3BucketEndpoint","s3DisableBodySigning","s3UsEast1RegionalEndpoint","s3UseArnRegion","computeChecksums","convertResponseTypes","correctClockSkew","customUserAgent","dynamoDbCrc32","systemClockOffset","signatureVersion","signatureCache","retryDelayOptions","useAccelerateEndpoint","clientSideMonitoring","endpointDiscoveryEnabled","endpointCacheSize","hostPrefixEnabled","stsRegionalEndpoints","useFipsEndpoint","useDualstackEndpoint","copy","Credentials","setPromisesDependency","dep","Promise","constructors","Request","S3","push","ManagedUpload","addPromises","getPromisesDependency","config"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/config.js"],"sourcesContent":["var AWS = require('./core');\r\nrequire('./credentials');\r\nrequire('./credentials/credential_provider_chain');\r\nvar PromisesDependency;\r\n\r\n/**\r\n * The main configuration class used by all service objects to set\r\n * the region, credentials, and other options for requests.\r\n *\r\n * By default, credentials and region settings are left unconfigured.\r\n * This should be configured by the application before using any\r\n * AWS service APIs.\r\n *\r\n * In order to set global configuration options, properties should\r\n * be assigned to the global {AWS.config} object.\r\n *\r\n * @see AWS.config\r\n *\r\n * @!group General Configuration Options\r\n *\r\n * @!attribute credentials\r\n *   @return [AWS.Credentials] the AWS credentials to sign requests with.\r\n *\r\n * @!attribute region\r\n *   @example Set the global region setting to us-west-2\r\n *     AWS.config.update({region: 'us-west-2'});\r\n *   @return [AWS.Credentials] The region to send service requests to.\r\n *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html\r\n *     A list of available endpoints for each AWS service\r\n *\r\n * @!attribute maxRetries\r\n *   @return [Integer] the maximum amount of retries to perform for a\r\n *     service request. By default this value is calculated by the specific\r\n *     service object that the request is being made to.\r\n *\r\n * @!attribute maxRedirects\r\n *   @return [Integer] the maximum amount of redirects to follow for a\r\n *     service request. Defaults to 10.\r\n *\r\n * @!attribute paramValidation\r\n *   @return [Boolean|map] whether input parameters should be validated against\r\n *     the operation description before sending the request. Defaults to true.\r\n *     Pass a map to enable any of the following specific validation features:\r\n *\r\n *     * **min** [Boolean] &mdash; Validates that a value meets the min\r\n *       constraint. This is enabled by default when paramValidation is set\r\n *       to `true`.\r\n *     * **max** [Boolean] &mdash; Validates that a value meets the max\r\n *       constraint.\r\n *     * **pattern** [Boolean] &mdash; Validates that a string value matches a\r\n *       regular expression.\r\n *     * **enum** [Boolean] &mdash; Validates that a string value matches one\r\n *       of the allowable enum values.\r\n *\r\n * @!attribute computeChecksums\r\n *   @return [Boolean] whether to compute checksums for payload bodies when\r\n *     the service accepts it (currently supported in S3 and SQS only).\r\n *\r\n * @!attribute convertResponseTypes\r\n *   @return [Boolean] whether types are converted when parsing response data.\r\n *     Currently only supported for JSON based services. Turning this off may\r\n *     improve performance on large response payloads. Defaults to `true`.\r\n *\r\n * @!attribute correctClockSkew\r\n *   @return [Boolean] whether to apply a clock skew correction and retry\r\n *     requests that fail because of an skewed client clock. Defaults to\r\n *     `false`.\r\n *\r\n * @!attribute sslEnabled\r\n *   @return [Boolean] whether SSL is enabled for requests\r\n *\r\n * @!attribute s3ForcePathStyle\r\n *   @return [Boolean] whether to force path style URLs for S3 objects\r\n *\r\n * @!attribute s3BucketEndpoint\r\n *   @note Setting this configuration option requires an `endpoint` to be\r\n *     provided explicitly to the service constructor.\r\n *   @return [Boolean] whether the provided endpoint addresses an individual\r\n *     bucket (false if it addresses the root API endpoint).\r\n *\r\n * @!attribute s3DisableBodySigning\r\n *   @return [Boolean] whether to disable S3 body signing when using signature version `v4`.\r\n *     Body signing can only be disabled when using https. Defaults to `true`.\r\n *\r\n * @!attribute s3UsEast1RegionalEndpoint\r\n *   @return ['legacy'|'regional'] when region is set to 'us-east-1', whether to send s3\r\n *     request to global endpoints or 'us-east-1' regional endpoints. This config is only\r\n *     applicable to S3 client;\r\n *     Defaults to 'legacy'\r\n * @!attribute s3UseArnRegion\r\n *   @return [Boolean] whether to override the request region with the region inferred\r\n *     from requested resource's ARN. Only available for S3 buckets\r\n *     Defaults to `true`\r\n *\r\n * @!attribute useAccelerateEndpoint\r\n *   @note This configuration option is only compatible with S3 while accessing\r\n *     dns-compatible buckets.\r\n *   @return [Boolean] Whether to use the Accelerate endpoint with the S3 service.\r\n *     Defaults to `false`.\r\n *\r\n * @!attribute retryDelayOptions\r\n *   @example Set the base retry delay for all services to 300 ms\r\n *     AWS.config.update({retryDelayOptions: {base: 300}});\r\n *     // Delays with maxRetries = 3: 300, 600, 1200\r\n *   @example Set a custom backoff function to provide delay values on retries\r\n *     AWS.config.update({retryDelayOptions: {customBackoff: function(retryCount, err) {\r\n *       // returns delay in ms\r\n *     }}});\r\n *   @return [map] A set of options to configure the retry delay on retryable errors.\r\n *     Currently supported options are:\r\n *\r\n *     * **base** [Integer] &mdash; The base number of milliseconds to use in the\r\n *       exponential backoff for operation retries. Defaults to 100 ms for all services except\r\n *       DynamoDB, where it defaults to 50ms.\r\n *\r\n *     * **customBackoff ** [function] &mdash; A custom function that accepts a\r\n *       retry count and error and returns the amount of time to delay in\r\n *       milliseconds. If the result is a non-zero negative value, no further\r\n *       retry attempts will be made. The `base` option will be ignored if this\r\n *       option is supplied. The function is only called for retryable errors.\r\n *\r\n * @!attribute httpOptions\r\n *   @return [map] A set of options to pass to the low-level HTTP request.\r\n *     Currently supported options are:\r\n *\r\n *     * **proxy** [String] &mdash; the URL to proxy requests through\r\n *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\r\n *       HTTP requests with. Used for connection pooling. Note that for\r\n *       SSL connections, a special Agent object is used in order to enable\r\n *       peer certificate verification. This feature is only supported in the\r\n *       Node.js environment.\r\n *     * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after\r\n *       failing to establish a connection with the server after\r\n *       `connectTimeout` milliseconds. This timeout has no effect once a socket\r\n *       connection has been established.\r\n *     * **timeout** [Integer] &mdash; The number of milliseconds a request can\r\n *       take before automatically being terminated.\r\n *       Defaults to two minutes (120000).\r\n *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous\r\n *       HTTP requests. Used in the browser environment only. Set to false to\r\n *       send requests synchronously. Defaults to true (async on).\r\n *     * **xhrWithCredentials** [Boolean] &mdash; Sets the \"withCredentials\"\r\n *       property of an XMLHttpRequest object. Used in the browser environment\r\n *       only. Defaults to false.\r\n * @!attribute logger\r\n *   @return [#write,#log] an object that responds to .write() (like a stream)\r\n *     or .log() (like the console object) in order to log information about\r\n *     requests\r\n *\r\n * @!attribute systemClockOffset\r\n *   @return [Number] an offset value in milliseconds to apply to all signing\r\n *     times. Use this to compensate for clock skew when your system may be\r\n *     out of sync with the service time. Note that this configuration option\r\n *     can only be applied to the global `AWS.config` object and cannot be\r\n *     overridden in service-specific configuration. Defaults to 0 milliseconds.\r\n *\r\n * @!attribute signatureVersion\r\n *   @return [String] the signature version to sign requests with (overriding\r\n *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.\r\n *\r\n * @!attribute signatureCache\r\n *   @return [Boolean] whether the signature to sign requests with (overriding\r\n *     the API configuration) is cached. Only applies to the signature version 'v4'.\r\n *     Defaults to `true`.\r\n *\r\n * @!attribute endpointDiscoveryEnabled\r\n *   @return [Boolean|undefined] whether to call operations with endpoints\r\n *     given by service dynamically. Setting this config to `true` will enable\r\n *     endpoint discovery for all applicable operations. Setting it to `false`\r\n *     will explicitly disable endpoint discovery even though operations that\r\n *     require endpoint discovery will presumably fail. Leaving it to\r\n *     `undefined` means SDK only do endpoint discovery when it's required.\r\n *     Defaults to `undefined`\r\n *\r\n * @!attribute endpointCacheSize\r\n *   @return [Number] the size of the global cache storing endpoints from endpoint\r\n *     discovery operations. Once endpoint cache is created, updating this setting\r\n *     cannot change existing cache size.\r\n *     Defaults to 1000\r\n *\r\n * @!attribute hostPrefixEnabled\r\n *   @return [Boolean] whether to marshal request parameters to the prefix of\r\n *     hostname. Defaults to `true`.\r\n *\r\n * @!attribute stsRegionalEndpoints\r\n *   @return ['legacy'|'regional'] whether to send sts request to global endpoints or\r\n *     regional endpoints.\r\n *     Defaults to 'legacy'.\r\n *\r\n * @!attribute useFipsEndpoint\r\n *   @return [Boolean] Enables FIPS compatible endpoints. Defaults to `false`.\r\n *\r\n * @!attribute useDualstackEndpoint\r\n *   @return [Boolean] Enables IPv6 dualstack endpoint. Defaults to `false`.\r\n */\r\nAWS.Config = AWS.util.inherit({\r\n  /**\r\n   * @!endgroup\r\n   */\r\n\r\n  /**\r\n   * Creates a new configuration object. This is the object that passes\r\n   * option data along to service requests, including credentials, security,\r\n   * region information, and some service specific settings.\r\n   *\r\n   * @example Creating a new configuration object with credentials and region\r\n   *   var config = new AWS.Config({\r\n   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'\r\n   *   });\r\n   * @option options accessKeyId [String] your AWS access key ID.\r\n   * @option options secretAccessKey [String] your AWS secret access key.\r\n   * @option options sessionToken [AWS.Credentials] the optional AWS\r\n   *   session token to sign requests with.\r\n   * @option options credentials [AWS.Credentials] the AWS credentials\r\n   *   to sign requests with. You can either specify this object, or\r\n   *   specify the accessKeyId and secretAccessKey options directly.\r\n   * @option options credentialProvider [AWS.CredentialProviderChain] the\r\n   *   provider chain used to resolve credentials if no static `credentials`\r\n   *   property is set.\r\n   * @option options region [String] the region to send service requests to.\r\n   *   See {region} for more information.\r\n   * @option options maxRetries [Integer] the maximum amount of retries to\r\n   *   attempt with a request. See {maxRetries} for more information.\r\n   * @option options maxRedirects [Integer] the maximum amount of redirects to\r\n   *   follow with a request. See {maxRedirects} for more information.\r\n   * @option options sslEnabled [Boolean] whether to enable SSL for\r\n   *   requests.\r\n   * @option options paramValidation [Boolean|map] whether input parameters\r\n   *   should be validated against the operation description before sending\r\n   *   the request. Defaults to true. Pass a map to enable any of the\r\n   *   following specific validation features:\r\n   *\r\n   *   * **min** [Boolean] &mdash; Validates that a value meets the min\r\n   *     constraint. This is enabled by default when paramValidation is set\r\n   *     to `true`.\r\n   *   * **max** [Boolean] &mdash; Validates that a value meets the max\r\n   *     constraint.\r\n   *   * **pattern** [Boolean] &mdash; Validates that a string value matches a\r\n   *     regular expression.\r\n   *   * **enum** [Boolean] &mdash; Validates that a string value matches one\r\n   *     of the allowable enum values.\r\n   * @option options computeChecksums [Boolean] whether to compute checksums\r\n   *   for payload bodies when the service accepts it (currently supported\r\n   *   in S3 only)\r\n   * @option options convertResponseTypes [Boolean] whether types are converted\r\n   *     when parsing response data. Currently only supported for JSON based\r\n   *     services. Turning this off may improve performance on large response\r\n   *     payloads. Defaults to `true`.\r\n   * @option options correctClockSkew [Boolean] whether to apply a clock skew\r\n   *     correction and retry requests that fail because of an skewed client\r\n   *     clock. Defaults to `false`.\r\n   * @option options s3ForcePathStyle [Boolean] whether to force path\r\n   *   style URLs for S3 objects.\r\n   * @option options s3BucketEndpoint [Boolean] whether the provided endpoint\r\n   *   addresses an individual bucket (false if it addresses the root API\r\n   *   endpoint). Note that setting this configuration option requires an\r\n   *   `endpoint` to be provided explicitly to the service constructor.\r\n   * @option options s3DisableBodySigning [Boolean] whether S3 body signing\r\n   *   should be disabled when using signature version `v4`. Body signing\r\n   *   can only be disabled when using https. Defaults to `true`.\r\n   * @option options s3UsEast1RegionalEndpoint ['legacy'|'regional'] when region\r\n   *   is set to 'us-east-1', whether to send s3 request to global endpoints or\r\n   *   'us-east-1' regional endpoints. This config is only applicable to S3 client.\r\n   *   Defaults to `legacy`\r\n   * @option options s3UseArnRegion [Boolean] whether to override the request region\r\n   *   with the region inferred from requested resource's ARN. Only available for S3 buckets\r\n   *   Defaults to `true`\r\n   *\r\n   * @option options retryDelayOptions [map] A set of options to configure\r\n   *   the retry delay on retryable errors. Currently supported options are:\r\n   *\r\n   *   * **base** [Integer] &mdash; The base number of milliseconds to use in the\r\n   *     exponential backoff for operation retries. Defaults to 100 ms for all\r\n   *     services except DynamoDB, where it defaults to 50ms.\r\n   *   * **customBackoff ** [function] &mdash; A custom function that accepts a\r\n   *     retry count and error and returns the amount of time to delay in\r\n   *     milliseconds. If the result is a non-zero negative value, no further\r\n   *     retry attempts will be made. The `base` option will be ignored if this\r\n   *     option is supplied. The function is only called for retryable errors.\r\n   * @option options httpOptions [map] A set of options to pass to the low-level\r\n   *   HTTP request. Currently supported options are:\r\n   *\r\n   *   * **proxy** [String] &mdash; the URL to proxy requests through\r\n   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform\r\n   *     HTTP requests with. Used for connection pooling. Defaults to the global\r\n   *     agent (`http.globalAgent`) for non-SSL connections. Note that for\r\n   *     SSL connections, a special Agent object is used in order to enable\r\n   *     peer certificate verification. This feature is only available in the\r\n   *     Node.js environment.\r\n   *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after\r\n   *     failing to establish a connection with the server after\r\n   *     `connectTimeout` milliseconds. This timeout has no effect once a socket\r\n   *     connection has been established.\r\n   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout\r\n   *     milliseconds of inactivity on the socket. Defaults to two minutes\r\n   *     (120000).\r\n   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous\r\n   *     HTTP requests. Used in the browser environment only. Set to false to\r\n   *     send requests synchronously. Defaults to true (async on).\r\n   *   * **xhrWithCredentials** [Boolean] &mdash; Sets the \"withCredentials\"\r\n   *     property of an XMLHttpRequest object. Used in the browser environment\r\n   *     only. Defaults to false.\r\n   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format\r\n   *   (or a date) that represents the latest possible API version that can be\r\n   *   used in all services (unless overridden by `apiVersions`). Specify\r\n   *   'latest' to use the latest possible version.\r\n   * @option options apiVersions [map<String, String|Date>] a map of service\r\n   *   identifiers (the lowercase service class name) with the API version to\r\n   *   use when instantiating a service. Specify 'latest' for each individual\r\n   *   that can use the latest available version.\r\n   * @option options logger [#write,#log] an object that responds to .write()\r\n   *   (like a stream) or .log() (like the console object) in order to log\r\n   *   information about requests\r\n   * @option options systemClockOffset [Number] an offset value in milliseconds\r\n   *   to apply to all signing times. Use this to compensate for clock skew\r\n   *   when your system may be out of sync with the service time. Note that\r\n   *   this configuration option can only be applied to the global `AWS.config`\r\n   *   object and cannot be overridden in service-specific configuration.\r\n   *   Defaults to 0 milliseconds.\r\n   * @option options signatureVersion [String] the signature version to sign\r\n   *   requests with (overriding the API configuration). Possible values are:\r\n   *   'v2', 'v3', 'v4'.\r\n   * @option options signatureCache [Boolean] whether the signature to sign\r\n   *   requests with (overriding the API configuration) is cached. Only applies\r\n   *   to the signature version 'v4'. Defaults to `true`.\r\n   * @option options dynamoDbCrc32 [Boolean] whether to validate the CRC32\r\n   *   checksum of HTTP response bodies returned by DynamoDB. Default: `true`.\r\n   * @option options useAccelerateEndpoint [Boolean] Whether to use the\r\n   *   S3 Transfer Acceleration endpoint with the S3 service. Default: `false`.\r\n   * @option options clientSideMonitoring [Boolean] whether to collect and\r\n   *   publish this client's performance metrics of all its API requests.\r\n   * @option options endpointDiscoveryEnabled [Boolean|undefined] whether to\r\n   *   call operations with endpoints given by service dynamically. Setting this\r\n   * config to `true` will enable endpoint discovery for all applicable operations.\r\n   *   Setting it to `false` will explicitly disable endpoint discovery even though\r\n   *   operations that require endpoint discovery will presumably fail. Leaving it\r\n   *   to `undefined` means SDK will only do endpoint discovery when it's required.\r\n   *   Defaults to `undefined`\r\n   * @option options endpointCacheSize [Number] the size of the global cache storing\r\n   *   endpoints from endpoint discovery operations. Once endpoint cache is created,\r\n   *   updating this setting cannot change existing cache size.\r\n   *   Defaults to 1000\r\n   * @option options hostPrefixEnabled [Boolean] whether to marshal request\r\n   *   parameters to the prefix of hostname.\r\n   *   Defaults to `true`.\r\n   * @option options stsRegionalEndpoints ['legacy'|'regional'] whether to send sts request\r\n   *   to global endpoints or regional endpoints.\r\n   *   Defaults to 'legacy'.\r\n   * @option options useFipsEndpoint [Boolean] Enables FIPS compatible endpoints.\r\n   *   Defaults to `false`.\r\n   * @option options useDualstackEndpoint [Boolean] Enables IPv6 dualstack endpoint.\r\n   *   Defaults to `false`.\r\n   */\r\n  constructor: function Config(options) {\r\n    if (options === undefined) options = {};\r\n    options = this.extractCredentials(options);\r\n\r\n    AWS.util.each.call(this, this.keys, function (key, value) {\r\n      this.set(key, options[key], value);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @!group Managing Credentials\r\n   */\r\n\r\n  /**\r\n   * Loads credentials from the configuration object. This is used internally\r\n   * by the SDK to ensure that refreshable {Credentials} objects are properly\r\n   * refreshed and loaded when sending a request. If you want to ensure that\r\n   * your credentials are loaded prior to a request, you can use this method\r\n   * directly to provide accurate credential data stored in the object.\r\n   *\r\n   * @note If you configure the SDK with static or environment credentials,\r\n   *   the credential data should already be present in {credentials} attribute.\r\n   *   This method is primarily necessary to load credentials from asynchronous\r\n   *   sources, or sources that can refresh credentials periodically.\r\n   * @example Getting your access key\r\n   *   AWS.config.getCredentials(function(err) {\r\n   *     if (err) console.log(err.stack); // credentials not loaded\r\n   *     else console.log(\"Access Key:\", AWS.config.credentials.accessKeyId);\r\n   *   })\r\n   * @callback callback function(err)\r\n   *   Called when the {credentials} have been properly set on the configuration\r\n   *   object.\r\n   *\r\n   *   @param err [Error] if this is set, credentials were not successfully\r\n   *     loaded and this error provides information why.\r\n   * @see credentials\r\n   * @see Credentials\r\n   */\r\n  getCredentials: function getCredentials(callback) {\r\n    var self = this;\r\n\r\n    function finish(err) {\r\n      callback(err, err ? null : self.credentials);\r\n    }\r\n\r\n    function credError(msg, err) {\r\n      return new AWS.util.error(err || new Error(), {\r\n        code: 'CredentialsError',\r\n        message: msg,\r\n        name: 'CredentialsError'\r\n      });\r\n    }\r\n\r\n    function getAsyncCredentials() {\r\n      self.credentials.get(function(err) {\r\n        if (err) {\r\n          var msg = 'Could not load credentials from ' +\r\n            self.credentials.constructor.name;\r\n          err = credError(msg, err);\r\n        }\r\n        finish(err);\r\n      });\r\n    }\r\n\r\n    function getStaticCredentials() {\r\n      var err = null;\r\n      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {\r\n        err = credError('Missing credentials');\r\n      }\r\n      finish(err);\r\n    }\r\n\r\n    if (self.credentials) {\r\n      if (typeof self.credentials.get === 'function') {\r\n        getAsyncCredentials();\r\n      } else { // static credentials\r\n        getStaticCredentials();\r\n      }\r\n    } else if (self.credentialProvider) {\r\n      self.credentialProvider.resolve(function(err, creds) {\r\n        if (err) {\r\n          err = credError('Could not load credentials from any providers', err);\r\n        }\r\n        self.credentials = creds;\r\n        finish(err);\r\n      });\r\n    } else {\r\n      finish(credError('No credentials to load'));\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Loads token from the configuration object. This is used internally\r\n   * by the SDK to ensure that refreshable {Token} objects are properly\r\n   * refreshed and loaded when sending a request. If you want to ensure that\r\n   * your token is loaded prior to a request, you can use this method\r\n   * directly to provide accurate token data stored in the object.\r\n   *\r\n   * @note If you configure the SDK with static token, the token data should\r\n   *   already be present in {token} attribute. This method is primarily necessary\r\n   *   to load token from asynchronous sources, or sources that can refresh\r\n   *   token periodically.\r\n   * @example Getting your access token\r\n   *   AWS.config.getToken(function(err) {\r\n   *     if (err) console.log(err.stack); // token not loaded\r\n   *     else console.log(\"Token:\", AWS.config.token.token);\r\n   *   })\r\n   * @callback callback function(err)\r\n   *   Called when the {token} have been properly set on the configuration object.\r\n   *\r\n   *   @param err [Error] if this is set, token was not successfully loaded and\r\n   *     this error provides information why.\r\n   * @see token\r\n   */\r\n  getToken: function getToken(callback) {\r\n    var self = this;\r\n\r\n    function finish(err) {\r\n      callback(err, err ? null : self.token);\r\n    }\r\n\r\n    function tokenError(msg, err) {\r\n      return new AWS.util.error(err || new Error(), {\r\n        code: 'TokenError',\r\n        message: msg,\r\n        name: 'TokenError'\r\n      });\r\n    }\r\n\r\n    function getAsyncToken() {\r\n      self.token.get(function(err) {\r\n        if (err) {\r\n          var msg = 'Could not load token from ' +\r\n            self.token.constructor.name;\r\n          err = tokenError(msg, err);\r\n        }\r\n        finish(err);\r\n      });\r\n    }\r\n\r\n    function getStaticToken() {\r\n      var err = null;\r\n      if (!self.token.token) {\r\n        err = tokenError('Missing token');\r\n      }\r\n      finish(err);\r\n    }\r\n\r\n    if (self.token) {\r\n      if (typeof self.token.get === 'function') {\r\n        getAsyncToken();\r\n      } else { // static token\r\n        getStaticToken();\r\n      }\r\n    } else if (self.tokenProvider) {\r\n      self.tokenProvider.resolve(function(err, token) {\r\n        if (err) {\r\n          err = tokenError('Could not load token from any providers', err);\r\n        }\r\n        self.token = token;\r\n        finish(err);\r\n      });\r\n    } else {\r\n      finish(tokenError('No token to load'));\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @!group Loading and Setting Configuration Options\r\n   */\r\n\r\n  /**\r\n   * @overload update(options, allowUnknownKeys = false)\r\n   *   Updates the current configuration object with new options.\r\n   *\r\n   *   @example Update maxRetries property of a configuration object\r\n   *     config.update({maxRetries: 10});\r\n   *   @param [Object] options a map of option keys and values.\r\n   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on\r\n   *     the configuration object. Defaults to `false`.\r\n   *   @see constructor\r\n   */\r\n  update: function update(options, allowUnknownKeys) {\r\n    allowUnknownKeys = allowUnknownKeys || false;\r\n    options = this.extractCredentials(options);\r\n    AWS.util.each.call(this, options, function (key, value) {\r\n      if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) ||\r\n          AWS.Service.hasService(key)) {\r\n        this.set(key, value);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Loads configuration data from a JSON file into this config object.\r\n   * @note Loading configuration will reset all existing configuration\r\n   *   on the object.\r\n   * @!macro nobrowser\r\n   * @param path [String] the path relative to your process's current\r\n   *    working directory to load configuration from.\r\n   * @return [AWS.Config] the same configuration object\r\n   */\r\n  loadFromPath: function loadFromPath(path) {\r\n    this.clear();\r\n\r\n    var options = JSON.parse(AWS.util.readFileSync(path));\r\n    var fileSystemCreds = new AWS.FileSystemCredentials(path);\r\n    var chain = new AWS.CredentialProviderChain();\r\n    chain.providers.unshift(fileSystemCreds);\r\n    chain.resolve(function (err, creds) {\r\n      if (err) throw err;\r\n      else options.credentials = creds;\r\n    });\r\n\r\n    this.constructor(options);\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Clears configuration data on this object\r\n   *\r\n   * @api private\r\n   */\r\n  clear: function clear() {\r\n    /*jshint forin:false */\r\n    AWS.util.each.call(this, this.keys, function (key) {\r\n      delete this[key];\r\n    });\r\n\r\n    // reset credential provider\r\n    this.set('credentials', undefined);\r\n    this.set('credentialProvider', undefined);\r\n  },\r\n\r\n  /**\r\n   * Sets a property on the configuration object, allowing for a\r\n   * default value\r\n   * @api private\r\n   */\r\n  set: function set(property, value, defaultValue) {\r\n    if (value === undefined) {\r\n      if (defaultValue === undefined) {\r\n        defaultValue = this.keys[property];\r\n      }\r\n      if (typeof defaultValue === 'function') {\r\n        this[property] = defaultValue.call(this);\r\n      } else {\r\n        this[property] = defaultValue;\r\n      }\r\n    } else if (property === 'httpOptions' && this[property]) {\r\n      // deep merge httpOptions\r\n      this[property] = AWS.util.merge(this[property], value);\r\n    } else {\r\n      this[property] = value;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * All of the keys with their default values.\r\n   *\r\n   * @constant\r\n   * @api private\r\n   */\r\n  keys: {\r\n    credentials: null,\r\n    credentialProvider: null,\r\n    region: null,\r\n    logger: null,\r\n    apiVersions: {},\r\n    apiVersion: null,\r\n    endpoint: undefined,\r\n    httpOptions: {\r\n      timeout: 120000\r\n    },\r\n    maxRetries: undefined,\r\n    maxRedirects: 10,\r\n    paramValidation: true,\r\n    sslEnabled: true,\r\n    s3ForcePathStyle: false,\r\n    s3BucketEndpoint: false,\r\n    s3DisableBodySigning: true,\r\n    s3UsEast1RegionalEndpoint: 'legacy',\r\n    s3UseArnRegion: undefined,\r\n    computeChecksums: true,\r\n    convertResponseTypes: true,\r\n    correctClockSkew: false,\r\n    customUserAgent: null,\r\n    dynamoDbCrc32: true,\r\n    systemClockOffset: 0,\r\n    signatureVersion: null,\r\n    signatureCache: true,\r\n    retryDelayOptions: {},\r\n    useAccelerateEndpoint: false,\r\n    clientSideMonitoring: false,\r\n    endpointDiscoveryEnabled: undefined,\r\n    endpointCacheSize: 1000,\r\n    hostPrefixEnabled: true,\r\n    stsRegionalEndpoints: 'legacy',\r\n    useFipsEndpoint: false,\r\n    useDualstackEndpoint: false,\r\n    token: null\r\n  },\r\n\r\n  /**\r\n   * Extracts accessKeyId, secretAccessKey and sessionToken\r\n   * from a configuration hash.\r\n   *\r\n   * @api private\r\n   */\r\n  extractCredentials: function extractCredentials(options) {\r\n    if (options.accessKeyId && options.secretAccessKey) {\r\n      options = AWS.util.copy(options);\r\n      options.credentials = new AWS.Credentials(options);\r\n    }\r\n    return options;\r\n  },\r\n\r\n  /**\r\n   * Sets the promise dependency the SDK will use wherever Promises are returned.\r\n   * Passing `null` will force the SDK to use native Promises if they are available.\r\n   * If native Promises are not available, passing `null` will have no effect.\r\n   * @param [Constructor] dep A reference to a Promise constructor\r\n   */\r\n  setPromisesDependency: function setPromisesDependency(dep) {\r\n    PromisesDependency = dep;\r\n    // if null was passed in, we should try to use native promises\r\n    if (dep === null && typeof Promise === 'function') {\r\n      PromisesDependency = Promise;\r\n    }\r\n    var constructors = [AWS.Request, AWS.Credentials, AWS.CredentialProviderChain];\r\n    if (AWS.S3) {\r\n      constructors.push(AWS.S3);\r\n      if (AWS.S3.ManagedUpload) {\r\n        constructors.push(AWS.S3.ManagedUpload);\r\n      }\r\n    }\r\n    AWS.util.addPromises(constructors, PromisesDependency);\r\n  },\r\n\r\n  /**\r\n   * Gets the promise dependency set by `AWS.config.setPromisesDependency`.\r\n   */\r\n  getPromisesDependency: function getPromisesDependency() {\r\n    return PromisesDependency;\r\n  }\r\n});\r\n\r\n/**\r\n * @return [AWS.Config] The global configuration object singleton instance\r\n * @readonly\r\n * @see AWS.Config\r\n */\r\nAWS.config = new AWS.Config();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}