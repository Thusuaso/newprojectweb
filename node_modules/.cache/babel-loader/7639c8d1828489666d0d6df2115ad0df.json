{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport '../../style/SemipolarSpinner.css';\nimport { openBlock, createElementBlock, normalizeStyle, Fragment, renderList } from 'vue';\nimport { _export_sfc } from '../plugin-vue_export-helper.js';\nvar SemipolarSpinner_vue_vue_type_style_index_0_lang = '';\nconst _sfc_main = {\n  name: 'SemipolarSpinner',\n  props: {\n    animationDuration: {\n      type: Number,\n      default: 2000\n    },\n    size: {\n      type: Number,\n      default: 65\n    },\n    color: {\n      type: String,\n      default: '#fff'\n    }\n  },\n  data() {\n    return {\n      ringsNum: 5\n    };\n  },\n  computed: {\n    spinnerStyle() {\n      return {\n        height: `${this.size}px`,\n        width: `${this.size}px`\n      };\n    },\n    ringStyle() {\n      return {\n        animationDuration: `${this.animationDuration}ms`,\n        borderTopColor: this.color,\n        borderLeftColor: this.color\n      };\n    },\n    ringsStyles() {\n      const ringsStyles = [];\n      const delayModifier = 0.1;\n      const ringWidth = this.size * 0.05;\n      const positionIncrement = ringWidth * 2;\n      const sizeDecrement = this.size * 0.2;\n      for (let i = 0; i < this.ringsNum; i++) {\n        const computedSize = `${this.size - sizeDecrement * i}px`;\n        const computedPosition = `${positionIncrement * i}px`;\n        const style = Object.assign({\n          animationDelay: `${this.animationDuration * delayModifier * (this.ringsNum - i - 1)}ms`,\n          height: computedSize,\n          width: computedSize,\n          left: computedPosition,\n          top: computedPosition,\n          borderWidth: `${ringWidth}px`\n        }, this.ringStyle);\n        ringsStyles.push(style);\n      }\n      return ringsStyles;\n    }\n  }\n};\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"semipolar-spinner\",\n    style: normalizeStyle($options.spinnerStyle)\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList($options.ringsStyles, (rs, index) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: index,\n      class: \"ring\",\n      style: normalizeStyle(rs)\n    }, null, 4);\n  }), 128))], 4);\n}\nvar SemipolarSpinner = /*#__PURE__*/_export_sfc(_sfc_main, [['render', _sfc_render]]);\nexport { SemipolarSpinner };","map":{"version":3,"names":["openBlock","createElementBlock","normalizeStyle","Fragment","renderList","_export_sfc","SemipolarSpinner_vue_vue_type_style_index_0_lang","_sfc_main","name","props","animationDuration","type","Number","default","size","color","String","data","ringsNum","computed","spinnerStyle","height","width","ringStyle","borderTopColor","borderLeftColor","ringsStyles","delayModifier","ringWidth","positionIncrement","sizeDecrement","i","computedSize","computedPosition","style","Object","assign","animationDelay","left","top","borderWidth","push","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","class","rs","index","key","SemipolarSpinner"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/epic-spinners/dist/es/components/SemipolarSpinner.js"],"sourcesContent":["import '../../style/SemipolarSpinner.css';\r\nimport { openBlock, createElementBlock, normalizeStyle, Fragment, renderList } from 'vue';\r\nimport { _export_sfc } from '../plugin-vue_export-helper.js';\r\n\r\nvar SemipolarSpinner_vue_vue_type_style_index_0_lang = '';\r\n\r\nconst _sfc_main = {\r\n  name: 'SemipolarSpinner',\r\n\r\n  props: {\r\n    animationDuration: {\r\n      type: Number,\r\n      default: 2000,\r\n    },\r\n    size: {\r\n      type: Number,\r\n      default: 65,\r\n    },\r\n    color: {\r\n      type: String,\r\n      default: '#fff',\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      ringsNum: 5,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    spinnerStyle() {\r\n      return {\r\n        height: `${this.size}px`,\r\n        width: `${this.size}px`,\r\n      }\r\n    },\r\n    ringStyle() {\r\n      return {\r\n        animationDuration: `${this.animationDuration}ms`,\r\n        borderTopColor: this.color,\r\n        borderLeftColor: this.color,\r\n      }\r\n    },\r\n    ringsStyles() {\r\n      const ringsStyles = [];\r\n      const delayModifier = 0.1;\r\n      const ringWidth = this.size * 0.05;\r\n      const positionIncrement = ringWidth * 2;\r\n      const sizeDecrement = this.size * 0.2;\r\n\r\n      for (let i = 0; i < this.ringsNum; i++) {\r\n        const computedSize = `${this.size - sizeDecrement * i}px`;\r\n        const computedPosition = `${positionIncrement * i}px`;\r\n        const style = Object.assign(\r\n          {\r\n            animationDelay: `${this.animationDuration * delayModifier * (this.ringsNum - i - 1)}ms`,\r\n            height: computedSize,\r\n            width: computedSize,\r\n            left: computedPosition,\r\n            top: computedPosition,\r\n            borderWidth: `${ringWidth}px`,\r\n          },\r\n          this.ringStyle,\r\n        );\r\n        ringsStyles.push(style);\r\n      }\r\n\r\n      return ringsStyles\r\n    },\r\n  },\r\n};\r\n\r\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\r\n  return (openBlock(), createElementBlock(\"div\", {\r\n    class: \"semipolar-spinner\",\r\n    style: normalizeStyle($options.spinnerStyle)\r\n  }, [\r\n    (openBlock(true), createElementBlock(Fragment, null, renderList($options.ringsStyles, (rs, index) => {\r\n      return (openBlock(), createElementBlock(\"div\", {\r\n        key: index,\r\n        class: \"ring\",\r\n        style: normalizeStyle(rs)\r\n      }, null, 4))\r\n    }), 128))\r\n  ], 4))\r\n}\r\nvar SemipolarSpinner = /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]]);\r\n\r\nexport { SemipolarSpinner };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}