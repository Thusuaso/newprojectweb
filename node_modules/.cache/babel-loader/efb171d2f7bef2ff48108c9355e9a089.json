{"ast":null,"code":"var AWS = require('../core');\nvar STS = require('../../clients/sts');\n\n/**\r\n * Represents credentials retrieved from STS SAML support.\r\n *\r\n * By default this provider gets credentials using the\r\n * {AWS.STS.assumeRoleWithSAML} service operation. This operation\r\n * requires a `RoleArn` containing the ARN of the IAM trust policy for the\r\n * application for which credentials will be given, as well as a `PrincipalArn`\r\n * representing the ARN for the SAML identity provider. In addition, the\r\n * `SAMLAssertion` must be set to the token provided by the identity\r\n * provider. See {constructor} for an example on creating a credentials\r\n * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.\r\n *\r\n * ## Refreshing Credentials from Identity Service\r\n *\r\n * In addition to AWS credentials expiring after a given amount of time, the\r\n * login token from the identity provider will also expire. Once this token\r\n * expires, it will not be usable to refresh AWS credentials, and another\r\n * token will be needed. The SDK does not manage refreshing of the token value,\r\n * but this can be done through a \"refresh token\" supported by most identity\r\n * providers. Consult the documentation for the identity provider for refreshing\r\n * tokens. Once the refreshed token is acquired, you should make sure to update\r\n * this new token in the credentials object's {params} property. The following\r\n * code will update the SAMLAssertion, assuming you have retrieved an updated\r\n * token from the identity provider:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials.params.SAMLAssertion = updatedToken;\r\n * ```\r\n *\r\n * Future calls to `credentials.refresh()` will now use the new token.\r\n *\r\n * @!attribute params\r\n *   @return [map] the map of params passed to\r\n *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the\r\n *     `params.SAMLAssertion` property.\r\n */\nAWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\r\n   * Creates a new credentials object.\r\n   * @param (see AWS.STS.assumeRoleWithSAML)\r\n   * @example Creating a new credentials object\r\n   *   AWS.config.credentials = new AWS.SAMLCredentials({\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',\r\n   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',\r\n   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP\r\n   *   });\r\n   * @see AWS.STS.assumeRoleWithSAML\r\n   */\n  constructor: function SAMLCredentials(params) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.params = params;\n  },\n  /**\r\n   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see get\r\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n  /**\r\n   * @api private\r\n   */\n  load: function load(callback) {\n    var self = this;\n    self.createClients();\n    self.service.assumeRoleWithSAML(function (err, data) {\n      if (!err) {\n        self.service.credentialsFrom(data, self);\n      }\n      callback(err);\n    });\n  },\n  /**\r\n   * @api private\r\n   */\n  createClients: function () {\n    this.service = this.service || new STS({\n      params: this.params\n    });\n  }\n});","map":{"version":3,"names":["AWS","require","STS","SAMLCredentials","util","inherit","Credentials","constructor","params","call","expired","refresh","callback","coalesceRefresh","fn","load","self","createClients","service","assumeRoleWithSAML","err","data","credentialsFrom"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/credentials/saml_credentials.js"],"sourcesContent":["var AWS = require('../core');\r\nvar STS = require('../../clients/sts');\r\n\r\n/**\r\n * Represents credentials retrieved from STS SAML support.\r\n *\r\n * By default this provider gets credentials using the\r\n * {AWS.STS.assumeRoleWithSAML} service operation. This operation\r\n * requires a `RoleArn` containing the ARN of the IAM trust policy for the\r\n * application for which credentials will be given, as well as a `PrincipalArn`\r\n * representing the ARN for the SAML identity provider. In addition, the\r\n * `SAMLAssertion` must be set to the token provided by the identity\r\n * provider. See {constructor} for an example on creating a credentials\r\n * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.\r\n *\r\n * ## Refreshing Credentials from Identity Service\r\n *\r\n * In addition to AWS credentials expiring after a given amount of time, the\r\n * login token from the identity provider will also expire. Once this token\r\n * expires, it will not be usable to refresh AWS credentials, and another\r\n * token will be needed. The SDK does not manage refreshing of the token value,\r\n * but this can be done through a \"refresh token\" supported by most identity\r\n * providers. Consult the documentation for the identity provider for refreshing\r\n * tokens. Once the refreshed token is acquired, you should make sure to update\r\n * this new token in the credentials object's {params} property. The following\r\n * code will update the SAMLAssertion, assuming you have retrieved an updated\r\n * token from the identity provider:\r\n *\r\n * ```javascript\r\n * AWS.config.credentials.params.SAMLAssertion = updatedToken;\r\n * ```\r\n *\r\n * Future calls to `credentials.refresh()` will now use the new token.\r\n *\r\n * @!attribute params\r\n *   @return [map] the map of params passed to\r\n *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the\r\n *     `params.SAMLAssertion` property.\r\n */\r\nAWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {\r\n  /**\r\n   * Creates a new credentials object.\r\n   * @param (see AWS.STS.assumeRoleWithSAML)\r\n   * @example Creating a new credentials object\r\n   *   AWS.config.credentials = new AWS.SAMLCredentials({\r\n   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',\r\n   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',\r\n   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP\r\n   *   });\r\n   * @see AWS.STS.assumeRoleWithSAML\r\n   */\r\n  constructor: function SAMLCredentials(params) {\r\n    AWS.Credentials.call(this);\r\n    this.expired = true;\r\n    this.params = params;\r\n  },\r\n\r\n  /**\r\n   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}\r\n   *\r\n   * @callback callback function(err)\r\n   *   Called when the STS service responds (or fails). When\r\n   *   this callback is called with no error, it means that the credentials\r\n   *   information has been loaded into the object (as the `accessKeyId`,\r\n   *   `secretAccessKey`, and `sessionToken` properties).\r\n   *   @param err [Error] if an error occurred, this value will be filled\r\n   * @see get\r\n   */\r\n  refresh: function refresh(callback) {\r\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  load: function load(callback) {\r\n    var self = this;\r\n    self.createClients();\r\n    self.service.assumeRoleWithSAML(function (err, data) {\r\n      if (!err) {\r\n        self.service.credentialsFrom(data, self);\r\n      }\r\n      callback(err);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  createClients: function() {\r\n    this.service = this.service || new STS({params: this.params});\r\n  }\r\n\r\n});\r\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC5B,IAAIC,GAAG,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,GAAG,CAACG,eAAe,GAAGH,GAAG,CAACI,IAAI,CAACC,OAAO,CAACL,GAAG,CAACM,WAAW,EAAE;EACtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASJ,eAAe,CAACK,MAAM,EAAE;IAC5CR,GAAG,CAACM,WAAW,CAACG,IAAI,CAAC,IAAI,CAAC;IAC1B,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACF,MAAM,GAAGA,MAAM;EACtB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,OAAO,EAAE,SAASA,OAAO,CAACC,QAAQ,EAAE;IAClC,IAAI,CAACC,eAAe,CAACD,QAAQ,IAAIZ,GAAG,CAACI,IAAI,CAACU,EAAE,CAACF,QAAQ,CAAC;EACxD,CAAC;EAED;AACF;AACA;EACEG,IAAI,EAAE,SAASA,IAAI,CAACH,QAAQ,EAAE;IAC5B,IAAII,IAAI,GAAG,IAAI;IACfA,IAAI,CAACC,aAAa,EAAE;IACpBD,IAAI,CAACE,OAAO,CAACC,kBAAkB,CAAC,UAAUC,GAAG,EAAEC,IAAI,EAAE;MACnD,IAAI,CAACD,GAAG,EAAE;QACRJ,IAAI,CAACE,OAAO,CAACI,eAAe,CAACD,IAAI,EAAEL,IAAI,CAAC;MAC1C;MACAJ,QAAQ,CAACQ,GAAG,CAAC;IACf,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;EACEH,aAAa,EAAE,YAAW;IACxB,IAAI,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,IAAIhB,GAAG,CAAC;MAACM,MAAM,EAAE,IAAI,CAACA;IAAM,CAAC,CAAC;EAC/D;AAEF,CAAC,CAAC"},"metadata":{},"sourceType":"script"}