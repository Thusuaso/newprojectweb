{"ast":null,"code":"var AWS = require('../core');\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\nvar ENV_REGIONAL_ENDPOINT_ENABLED = 'AWS_STS_REGIONAL_ENDPOINTS';\nvar CONFIG_REGIONAL_ENDPOINT_ENABLED = 'sts_regional_endpoints';\nAWS.util.update(AWS.STS.prototype, {\n  /**\r\n   * @overload credentialsFrom(data, credentials = null)\r\n   *   Creates a credentials object from STS response data containing\r\n   *   credentials information. Useful for quickly setting AWS credentials.\r\n   *\r\n   *   @note This is a low-level utility function. If you want to load temporary\r\n   *     credentials into your process for subsequent requests to AWS resources,\r\n   *     you should use {AWS.TemporaryCredentials} instead.\r\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\r\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\r\n   *   @param credentials [AWS.Credentials] an optional credentials object to\r\n   *     fill instead of creating a new object. Useful when modifying an\r\n   *     existing credentials object from a refresh call.\r\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\r\n   *     loaded from a raw STS operation response.\r\n   *   @example Using credentialsFrom to load global AWS credentials\r\n   *     var sts = new AWS.STS();\r\n   *     sts.getSessionToken(function (err, data) {\r\n   *       if (err) console.log(\"Error getting credentials\");\r\n   *       else {\r\n   *         AWS.config.credentials = sts.credentialsFrom(data);\r\n   *       }\r\n   *     });\r\n   *   @see AWS.TemporaryCredentials\r\n   */\n  credentialsFrom: function credentialsFrom(data, credentials) {\n    if (!data) return null;\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n    return credentials;\n  },\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\n  },\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\n  },\n  /**\r\n   * @api private\r\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('validate', this.optInRegionalEndpoint, true);\n  },\n  /**\r\n   * @api private\r\n   */\n  optInRegionalEndpoint: function optInRegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: ENV_REGIONAL_ENDPOINT_ENABLED,\n      sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,\n      clientConfig: 'stsRegionalEndpoints'\n    });\n    if (config.stsRegionalEndpoints === 'regional' && service.isGlobalEndpoint) {\n      //client will throw if region is not supplied; request will be signed with specified region\n      if (!config.region) {\n        throw AWS.util.error(new Error(), {\n          code: 'ConfigError',\n          message: 'Missing region in config'\n        });\n      }\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      var regionalEndpoint = config.endpoint.substring(0, insertPoint) + '.' + config.region + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n      req.httpRequest.region = config.region;\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","resolveRegionalEndpointsFlag","ENV_REGIONAL_ENDPOINT_ENABLED","CONFIG_REGIONAL_ENDPOINT_ENABLED","util","update","STS","prototype","credentialsFrom","data","credentials","TemporaryCredentials","expired","accessKeyId","Credentials","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","expireTime","Expiration","assumeRoleWithWebIdentity","params","callback","makeUnauthenticatedRequest","assumeRoleWithSAML","setupRequestListeners","request","addListener","optInRegionalEndpoint","req","service","config","stsRegionalEndpoints","_originalConfig","env","sharedConfig","clientConfig","isGlobalEndpoint","region","error","Error","code","message","insertPoint","endpoint","indexOf","regionalEndpoint","substring","httpRequest","updateEndpoint"],"sources":["C:/PROJELER/NewProjects/gitPull/newprojectweb/node_modules/aws-sdk/lib/services/sts.js"],"sourcesContent":["var AWS = require('../core');\r\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\r\nvar ENV_REGIONAL_ENDPOINT_ENABLED = 'AWS_STS_REGIONAL_ENDPOINTS';\r\nvar CONFIG_REGIONAL_ENDPOINT_ENABLED = 'sts_regional_endpoints';\r\n\r\nAWS.util.update(AWS.STS.prototype, {\r\n  /**\r\n   * @overload credentialsFrom(data, credentials = null)\r\n   *   Creates a credentials object from STS response data containing\r\n   *   credentials information. Useful for quickly setting AWS credentials.\r\n   *\r\n   *   @note This is a low-level utility function. If you want to load temporary\r\n   *     credentials into your process for subsequent requests to AWS resources,\r\n   *     you should use {AWS.TemporaryCredentials} instead.\r\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\r\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\r\n   *   @param credentials [AWS.Credentials] an optional credentials object to\r\n   *     fill instead of creating a new object. Useful when modifying an\r\n   *     existing credentials object from a refresh call.\r\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\r\n   *     loaded from a raw STS operation response.\r\n   *   @example Using credentialsFrom to load global AWS credentials\r\n   *     var sts = new AWS.STS();\r\n   *     sts.getSessionToken(function (err, data) {\r\n   *       if (err) console.log(\"Error getting credentials\");\r\n   *       else {\r\n   *         AWS.config.credentials = sts.credentialsFrom(data);\r\n   *       }\r\n   *     });\r\n   *   @see AWS.TemporaryCredentials\r\n   */\r\n  credentialsFrom: function credentialsFrom(data, credentials) {\r\n    if (!data) return null;\r\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\r\n    credentials.expired = false;\r\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\r\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\r\n    credentials.sessionToken = data.Credentials.SessionToken;\r\n    credentials.expireTime = data.Credentials.Expiration;\r\n    return credentials;\r\n  },\r\n\r\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\r\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\r\n  },\r\n\r\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\r\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  setupRequestListeners: function setupRequestListeners(request) {\r\n    request.addListener('validate', this.optInRegionalEndpoint, true);\r\n  },\r\n\r\n  /**\r\n   * @api private\r\n   */\r\n  optInRegionalEndpoint: function optInRegionalEndpoint(req) {\r\n    var service = req.service;\r\n    var config = service.config;\r\n    config.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {\r\n      env: ENV_REGIONAL_ENDPOINT_ENABLED,\r\n      sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,\r\n      clientConfig: 'stsRegionalEndpoints'\r\n    });\r\n    if (\r\n      config.stsRegionalEndpoints === 'regional' &&\r\n      service.isGlobalEndpoint\r\n    ) {\r\n      //client will throw if region is not supplied; request will be signed with specified region\r\n      if (!config.region) {\r\n        throw AWS.util.error(new Error(),\r\n          {code: 'ConfigError', message: 'Missing region in config'});\r\n      }\r\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\r\n      var regionalEndpoint = config.endpoint.substring(0, insertPoint) +\r\n        '.' + config.region + config.endpoint.substring(insertPoint);\r\n      req.httpRequest.updateEndpoint(regionalEndpoint);\r\n      req.httpRequest.region = config.region;\r\n    }\r\n  }\r\n\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}